<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android 下获取 activity_main.xml 的根 View</title>
    <url>/posts/2de415f5.html</url>
    <content><![CDATA[<p>最近做测试的时候需要获取当前 XML 的根视图进行操作，查询后发现网上提到了 <code>getDecorView()</code>，<code>getRootView()</code>，参照别人的测试自己也做了一个小的测试，首先是一个 View 层次结构图，方便理解测试，原文地址在文章最后： <span id="more"></span> <img src="http://i.imgur.com/WrbG9q2.jpg" alt="视图层次"></p>
<p>activity_main 和 btn_lay 布局如下： <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">tools:context</span>=<span class="string">&quot;com.rookieyang.test.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;hello&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">&quot;@layout/btn_lay&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;test&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>接下来是测试代码： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> View mDecorView;</span><br><span class="line">  <span class="keyword">private</span> View mRootView;</span><br><span class="line">  <span class="keyword">private</span> View mContentView;</span><br><span class="line">  <span class="keyword">private</span> View mCurrentView;</span><br><span class="line">  <span class="keyword">private</span> View mCurrentView2;</span><br><span class="line">  <span class="keyword">private</span> TextView mOneText;</span><br><span class="line">  <span class="keyword">private</span> TextView mTwoText;</span><br><span class="line">  <span class="keyword">private</span> Button mBtn;</span><br><span class="line">  <span class="keyword">private</span> Button mBtn2;</span><br><span class="line">  <span class="keyword">private</span> Button mBtn3;</span><br><span class="line">  <span class="keyword">private</span> View mView;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    init();</span><br><span class="line">    logView();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mDecorView = getWindow().getDecorView();</span><br><span class="line">    mRootView = mDecorView.getRootView();</span><br><span class="line">    mContentView = mDecorView.findViewById(android.R.id.content);</span><br><span class="line">    mCurrentView = ((ViewGroup) mContentView).getChildAt(<span class="number">0</span>);</span><br><span class="line">    mOneText = (TextView) ((ViewGroup) mCurrentView).getChildAt(<span class="number">0</span>);</span><br><span class="line">    mCurrentView2 = ((ViewGroup) mRootView</span><br><span class="line">        .findViewById(android.R.id.content)).getChildAt(<span class="number">0</span>);</span><br><span class="line">    mTwoText = (TextView) ((ViewGroup) mCurrentView2).getChildAt(<span class="number">0</span>);</span><br><span class="line">    mView = LayoutInflater.from(<span class="keyword">this</span>).inflate(R.layout.btn_lay, <span class="keyword">null</span>);</span><br><span class="line">    mBtn = (Button) findViewById(R.id.btn);</span><br><span class="line">    mBtn2 = (Button) mView.findViewById(R.id.btn2);</span><br><span class="line">    mBtn3 = (Button) findViewById(R.id.btn2);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">logView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Log.i(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;DecorView:&quot;</span> + mDecorView );</span><br><span class="line">    Log.i(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;DecorView ID:&quot;</span> + mDecorView.getId());</span><br><span class="line">    Log.i(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;RootView:&quot;</span> + mRootView);</span><br><span class="line">    Log.i(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;RootView ID:&quot;</span> + mRootView.getId());</span><br><span class="line">    Log.i(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;ContentView:&quot;</span> + mContentView);</span><br><span class="line">    Log.i(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;ContentView ID:&quot;</span> + mContentView.getId());</span><br><span class="line">    Log.i(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;CurrentView:&quot;</span> + mCurrentView);</span><br><span class="line">    Log.i(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;CurrentView ID:&quot;</span> + mCurrentView.getId());</span><br><span class="line">    Log.i(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;CurrentView2:&quot;</span> + mCurrentView2);</span><br><span class="line">    Log.i(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;CurrentView2 ID:&quot;</span> + mCurrentView2.getId());</span><br><span class="line">    Log.i(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;mOneText ID:&quot;</span> + mOneText.getText());</span><br><span class="line">    Log.i(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;mTwoText ID:&quot;</span> + mTwoText.getText());</span><br><span class="line">    Log.i(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;mBtn RootView:&quot;</span> + mBtn.getRootView());</span><br><span class="line">    Log.i(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;mBtn2 RootView:&quot;</span> + mBtn2.getRootView());</span><br><span class="line">    Log.i(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;mBtn3 RootView:&quot;</span> + mBtn3.getRootView());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 运行结果如下： <img src="http://i.imgur.com/VVtxMep.png" alt="运行结果"></p>
<p>首先可以看到 <code>getWindow().getDecorView()</code> 和 <code>getDecorView().getRootView()</code> 获得的 View 和 id 是一样的， 说明 DecorView 是整个 Window 界面最顶层的 View。</p>
<p>但是对比 <code>mBtn2.getRootView()</code> 和 <code>mBtn3.getRootView()</code> 却发现两者输出结果完全不同，<code>mBtn3.getRootView()</code> 获取到的是 DecorView，而 <code>mBtn2.getRootView()</code> 获取到的则是 LinearLayout，两者的不同之处在于 <code>mBtn2</code> 通过 <code>mView.findViewById(R.id.btn2)</code> 获取，<code>mBtn3</code> 却是直接通过 <code>findViewById(R.id.btn2)</code> 获取。在查询 LayoutInflater 的 API 文档后，第一行的描述是这样的：<br> 「Instantiates a layout XML file into its corresponding View objects」<br> 也就说通过 <code>LayoutInflater.from(this).inflate(R.layout.btn_lay, null)</code>，<code>btn_lay</code> 布局被实例化了到对应的 View 对象中，所以导致 mView 的根视图是 LinearLayout，自然 <code>mBtn2</code> 的根视图也是 LinearLayout。 <code>findViewById(android.R.id.content)</code> 用于获取 <code>activity_main</code> 外层的视图，即上图的 <code>mContentParent</code>。 在获取了 <code>mContentParent</code> 之后，由于 <code>activity_main</code> 的根视图是 <code>mContentParent</code> 的第一个子元素，所以利用 <code>getChildAt(0)</code> 即可获取 ConstraintLayout。<code>mCurrentView</code> 和 <code>mCurrentView2</code> 的输出结果可以印证该点。</p>
<h2 id="总结">总结：</h2>
<p><strong>获取 activity_main.xml 根 View：</strong> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">View rootView = ((ViewGroup)(getWindow().getDecorView()</span><br><span class="line">    .findViewById(android.R.id.content))).getChildAt(<span class="number">0</span>);</span><br></pre></td></tr></table></figure> <strong>获取 btn_lay.xml 根 View:</strong> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">View rootView = LayoutInflater.from(<span class="keyword">this</span>).inflate(R.layout.btn_lay, <span class="keyword">null</span>).getRootView();</span><br></pre></td></tr></table></figure> <strong>getDecorView():</strong><br> 　　Retrieve the top-level window decor view (containing the standard window frame/decorations and the client's content inside of that), which can be added as a window to the window manager.<br> <strong>getRootView():</strong><br> 　　Finds the topmost view in the current view hierarchy.<br></p>
<hr>
<h2 id="参考链接">参考链接</h2>
<ol type="1">
<li><span class="exturl" data-url="aHR0cDovL3d3dy50dWljb29sLmNvbS9hcnRpY2xlcy9iaTZKemU=" title="view.getRootView()的真正含义及测试">view.getRootView() 的真正含义及测试<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5qaWFuc2h1LmNvbS9wLzY4NzAxMGNjYWQ2Ng==">Android View 源码解读<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Android Problem</tag>
        <tag>Android View</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 中 View 的构造函数浅解</title>
    <url>/posts/319b2f7e.html</url>
    <content><![CDATA[<h2 id="构造函数的调用时机">构造函数的调用时机</h2>
<p>在自定义 View 的过程当中，不可避免的需要接触到 View 的构造函数，目前 View 具有四个构造函数，分别如下：<span id="more"></span></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">View</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">      /...../</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">View</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">View</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(context, attrs, defStyleAttr, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">View</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs, <span class="keyword">int</span> defStyleAttr, <span class="keyword">int</span> defStyleRes)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(context);</span><br><span class="line">    /...../</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>defStyleAttr 当前主题中的一个属性，其中包含对为视图提供默认值的样式资源的引用。 可以为0，不寻找默认值。</li>
<li>defStyleRes 为视图提供默认值的样式资源的资源标识符，仅在 defStyleAttr 为0或在主题中找不到时使用。可以为0，不寻找默认值。</li>
</ul>
<p>第一个构造函数源码的解释如下： &gt; Simple constructor to use when creating a view from code.</p>
<p>也就是说当在代码中创建 View 的时候会调用第一个构造函数。</p>
<p>第二个构造函数的源码解释如下： &gt; Constructor that is called when inflating a view from XML. This is called when a view is being constructed from an XML file, supplying attributes that were specified in the XML file. This version uses a default style of 0, so the only attribute values applied are those in the Context's Theme and the given AttributeSet.</p>
<p>也就是说当在 XML 文件中插入 View 的时候会调用第二个构造函数，并且会应用 Context 的主题以及在 XML 中给定的属性值。</p>
<p>第三个和第四个构造函数的源码解释分别如下： &gt; Perform inflation from XML and apply a class-specific base style from a theme attribute. &gt; &gt; &gt;This constructor of View allows subclasses to use their own base style when they are inflating.</p>
<blockquote>
<p>For example, a Button class's constructor would call this version of the super class constructor and supply <code>R.attr.buttonStyle</code> for <var>defStyleAttr</var>; this (in particular its background) as well as the Button class's attributes.</p>
</blockquote>
<hr>
<blockquote>
<p>Perform inflation from XML and apply a class-specific base style from a theme attribute or style resource.</p>
<blockquote>
<p>This constructor of View allows subclasses to use their own base style when they are inflating.</p>
</blockquote>
</blockquote>
<p>也就是说两个构造函数共同的作用是允许 View 应用自己的基础 style，那么当我们需要为 View 设置 style 的时候就可以选择去调用这两个构造函数当中的一个，调用方式一般如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Button</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>(context, attrs, com.android.internal.R.attr.buttonStyle);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Button</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>(context, attrs, defStyleAttr, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="defstyleattr-和-defstyleres-的联系">defStyleAttr 和 defStyleRes 的联系</h2>
<p>接下来的问题是这两者的区别在哪里？由于这两者都用于设置 style，而 style 里面是属性的集合，所以这里需要先了解 View 设置属性的方式，一般来说有如下五种方式： 1. XML 中直接声明相关属性值 2. XML 中 引入 style 3. defStyleAttr 4. defStyleRes 5. theme中直接指定</p>
<p>既然有五种方式，那么当同时应用的时候就涉及到了优先级的问题。为了了解优先级的问题，首先我们需要在 attrs.xml 文件中写入如下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">&quot;DefAttrs&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;attr_1&quot;</span> <span class="attr">format</span>=<span class="string">&quot;string&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;attr_2&quot;</span> <span class="attr">format</span>=<span class="string">&quot;string&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;attr_3&quot;</span> <span class="attr">format</span>=<span class="string">&quot;string&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;attr_4&quot;</span> <span class="attr">format</span>=<span class="string">&quot;string&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;defStyleAttr&quot;</span> <span class="attr">format</span>=<span class="string">&quot;reference&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>这里定义了四个格式为 string 的属性用于测试，定义了一个名为 defStyleAttr 引用。</li>
<li><p>通过 declare-styleable 可以为每个属性在 R 文件里自动生成一个 int[]，这样就可以很方便的用 R.styleable.* 来进行使用，当然定义的属性也可以不放在 declare-styleable 中，但是使用的时候就需要通过如下代码：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] attrs = &#123;R.attr.attr_1,R.attr_2&#125;;</span><br><span class="line">TypedArray typedArray = context.obtainStyledAttributes(set,attrs);</span><br></pre></td></tr></table></figure></p></li>
</ul>
<p>在创建了自定义的属性之后，还需要创建一些 style，在 style.xml 文件中写入如下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Base application theme. --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;AppTheme&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;Theme.AppCompat.Light.DarkActionBar&quot;</span>&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;colorPrimary&quot;</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;colorPrimaryDark&quot;</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;colorAccent&quot;</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--Theme 直接指定--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;attr_1&quot;</span>&gt;</span>theme_one<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;attr_2&quot;</span>&gt;</span>theme_two<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;attr_3&quot;</span>&gt;</span>theme_three<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;attr_4&quot;</span>&gt;</span>theme_four<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--defStyleAttr--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;defStyleAttr&quot;</span>&gt;</span>@style/def_style_attr<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--xml 中引入的 style --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;xml_style&quot;</span>&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;attr_1&quot;</span>&gt;</span>xml_style_one<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;attr_2&quot;</span>&gt;</span>xml_style_two<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--defStyleAttr 引用的 style--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;def_style_attr&quot;</span>&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;attr_1&quot;</span>&gt;</span>def_style_one<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;attr_2&quot;</span>&gt;</span>def_style_two<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;attr_3&quot;</span>&gt;</span>def_style_three<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--defStyleRes--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;def_style_res&quot;</span>&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;attr_1&quot;</span>&gt;</span>def_style_res_one<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;attr_2&quot;</span>&gt;</span>def_style_res_two<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;attr_3&quot;</span>&gt;</span>def_style_res_three<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;attr_4&quot;</span>&gt;</span>def_style_res_four<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上述代码添加了四种 style，对应为 View 设置属性的方式中的后四种，在添加了 style 之后，我们还需要应用 style，所以需要先创建一个如下的自定义 View：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyView</span> <span class="keyword">extends</span> <span class="title">TextView</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(context);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(context, attrs, R.attr.defStyleAttr);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(context, attrs, defStyleAttr,R.attr.defStyleAttr);</span><br><span class="line">    parse(context, attrs, defStyleAttr);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@TargetApi(VERSION_CODES.LOLLIPOP)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs, <span class="keyword">int</span> defStyleAttr, <span class="keyword">int</span> defStyleRes)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(context, attrs, defStyleAttr, defStyleRes);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">    TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.DefAttrs, defStyleAttr, R.style.def_style_res);</span><br><span class="line">    String one = typedArray.getString(R.styleable.DefAttrs_attr_1);</span><br><span class="line">    String two = typedArray.getString(R.styleable.DefAttrs_attr_2);</span><br><span class="line">    String three = typedArray.getString(R.styleable.DefAttrs_attr_3);</span><br><span class="line">    String four = typedArray.getString(R.styleable.DefAttrs_attr_4);</span><br><span class="line"></span><br><span class="line">    log(<span class="string">&quot;one = &quot;</span> + one);</span><br><span class="line">    log(<span class="string">&quot;two = &quot;</span> + two);</span><br><span class="line">    log(<span class="string">&quot;three = &quot;</span> + three);</span><br><span class="line">    log(<span class="string">&quot;four = &quot;</span> + four);</span><br><span class="line"></span><br><span class="line">    typedArray.recycle();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">    Log.i(<span class="string">&quot;MyView&quot;</span>, msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>第二个构造函数中显式调用了第三个构造函数，并设置 defStyleAttr 参数值为 R.attr.defStyleAttr。</li>
<li>parse() 获取四个属性值并进行打印。</li>
</ul>
<p>创建完自定义 View 之后，现在需要在 XML 文件中添加自定义的View：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:test</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">tools:context</span>=<span class="string">&quot;com.rookieyang.test.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">com.rookieyang.test.MyView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">test:attr_1</span>=<span class="string">&quot;xml_attr_attr1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;@style/xml_style&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>test:attr_1=&quot;xml_attr_attr1&quot; XML 中直接指定 attr_1 属性值。</li>
<li>style=&quot;<span class="citation" data-cites="style/xml_style">@style/xml_style</span>&quot; XML 中引入 style。</li>
</ul>
<h2 id="运行结果">运行结果</h2>
<p>在完成上述步骤之后就可以运行，运行之后的输出如下： <img src="http://i.imgur.com/WqaWtza.png" alt="运行结果一"> 上述代码中，XML 中直接声明 attr_1 属性值为 xml_attr_attr1，XML 中 引入的 style 中给 attr_1，attr_2 赋值为 xml_style_one，xml_style_two，defStyleAttr 给 attr_1，attr_2，attr_3 赋值为 def_style_one，def_style_two，def_style_three，defStyleRes 和 Theme 也分别为四个属性进行了赋值，而根据输出的结果在优先级上我们很容易得到以下结论： &gt; XML 中直接声明相关属性值 &gt; XML 中 引入 style &gt; defStyleAttr &gt; theme中直接指定 &gt; &gt; defStyleAttr &gt; defStyleRes</p>
<p>从第一部分可以知道由于 defStyleAttr 的存在，defStyleRes 没有生效，所以 defStyleRes 和 theme中直接指定的优先级还不能进行判断，这个时候需要将 style.xml 文件中的下列代码进行注释：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;item name=<span class="string">&quot;defStyleAttr&quot;</span>&gt;<span class="meta">@style</span>/def_style_attr&lt;/item&gt;</span><br></pre></td></tr></table></figure>
<p>或者将自定义 View 中调用第三个构造函数的代码做如下修改：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将第三个参数更改为 0</span></span><br><span class="line"><span class="keyword">this</span>(context, attrs, defStyleAttr,<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>修改之后运行能得到如下输出： <img src="http://i.imgur.com/Gp9V1qi.png" alt="运行结果二"> 可以看到当 defStyleAttr 不存在后 defStyleRes 开始生效，并且优先级要高于theme中直接指定。 所以最终结论如下： &gt; XML 中直接声明相关属性值 &gt; XML 中 引入 style &gt; defStyleAttr &gt; defStyleRes &gt; theme中直接指定 &gt; 仅在 defStyleAttr 为0或在主题中找不到时，defStyleRes 生效。</p>
<hr>
<h2 id="参考资料">参考资料</h2>
<ol type="1">
<li><span class="exturl" data-url="aHR0cDovL3d3dy5qaWFuc2h1LmNvbS9wLzA4YmUzYzA4YzU3Ng==">深度解析View构造函数中的参数defStyleAttr<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhhbzEyM2gvYXJ0aWNsZS9kZXRhaWxzLzUyMjEwNzMy">Android View 四个构造函数详解<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5qaWFuc2h1LmNvbS9wLzYxYjc5ZTdmODhmYw==">深入理解Android 自定义attr Style styleable以及其应用<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Android View</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 基础之 BroastCasts</title>
    <url>/posts/8c278f8c.html</url>
    <content><![CDATA[<h4 id="broadcasts-定义及其作用">BroadCasts 定义及其作用</h4>
<p>BroadCasts 是一种广播机制，类似于发布-订阅这种机制，当发生一些事件的时候，系统或程序就会发送（发布）一些相关的广播，而注册（订阅）了这些广播的程序就会通过广播接收器去响应这些广播。 <span id="more"></span> #### BroadCasts 的分类 1. 按作用范围来分： * 全局广播 * 本地广播 本地主要为了解决全局广播的安全性问题，由于全局广播是面向系统中所有应用的，所以当携带一些关键数据时可能会导致数据的泄漏。 2. 按接收顺序来分： * 标准广播 标准广播在发出之后，所有相关的广播接收器几乎能够一次性接收到该条广播。 * 有序广播 有序广播发出后，同一时间只有一个广播接收器能够接收到这条广播消息，只有当该广播接收器当中的处理逻辑处理完成之后，广播才能向下传递，并且优先级高的广播能够截断正在传递的广播。如果多个应用程序设置的优先级别相同，则谁先注册的广播，谁就可以优先接收到广播。</p>
<h4 id="broadcasts-的使用">BroadCasts 的使用</h4>
<p>广播机制的使用方法大体按照如下步骤：</p>
<ol type="1">
<li>创建广播接收器 Android 系统提供了一个 BroadCastReciver 的抽象类，所以需要创建自己的广播接收器，然后重写当中的 onReceive 方法，在当中编写事件的处理逻辑。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForceReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(<span class="keyword">final</span> Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(context);</span><br><span class="line">        builder.setTitle(<span class="string">&quot;提示&quot;</span>);</span><br><span class="line">        builder.setMessage(<span class="string">&quot;已经被退出&quot;</span>);</span><br><span class="line">        builder.setCancelable(<span class="keyword">false</span>);</span><br><span class="line">        builder.setPositiveButton(<span class="string">&quot;OK&quot;</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialogInterface, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">                ActivityCollector.finishActivities();</span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent(context, LoginActivity.class);</span><br><span class="line">                context.startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>注册广播 为了进行广播的接收还需要对需要接收的广播进行注册，注册方式可以分为两种： 第一种是动态注册，如果是全局广播则在 Activity 中直接调用 registerReceiver 方法即可，该方法主要接收两个参数，一个是 BroadCastReceiver，第二个则是 IntentFilter。如果是本地广播则需要借助系统提供的 LocalBroadCastManager 去进行注册，方法名与注册全局广播的方法名一致。 全局广播： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter(<span class="string">&quot;com.rookieyang.forcelogin&quot;</span>);</span><br><span class="line">forceReceiver = <span class="keyword">new</span> ForceReceiver();</span><br><span class="line">registerReceiver(forceReceiver, intentFilter);</span><br></pre></td></tr></table></figure> 本地广播： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter(<span class="string">&quot;com.rookieyang.forcelogin&quot;</span>);</span><br><span class="line">forceReceiver = <span class="keyword">new</span> ForceReceiver();</span><br><span class="line">LocalBroadcastManager localBroadcastManager = LocalBroadcastManager.getInstance(<span class="keyword">this</span>);</span><br><span class="line">localBroadcastManager.registerReceiver(forceReceiver, intentFilter);</span><br></pre></td></tr></table></figure> 第二种是静态注册，静态注册可以实现在程序未启动的情况下接收到广播，静态注册的广播是全局广播。 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">receiver</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;.BootCompleteReceiver&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:enabled</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.BOOT_COMPLETED&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure> &gt; 监听系统的开机广播是需要添加权限的，动态注册相比较于静态注册而言更为灵活，但是静态注册能够实现在应用未启动的情况下接收广播。而且动态注册的广播最后必须要取消注册。</li>
<li>发送广播 发送广播需要主要通过 Intent 传递信息，如果是是系统广播则不需要我们去编码去发送广播，如果是自定义的广播，发送标准广播则调用 sendBroadCast 方法，发送有序广播则调用 sendOrderedBroadcast 方法。如果是本地广播则和上文一致需要借助 LocalBroadCastManager 进行发送，本地广播没有有序广播。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">&quot;com.rookieyang.forcelogin&quot;</span>);</span><br><span class="line">sendBroadcast(intent);</span><br><span class="line"><span class="comment">//sendOrderedBroadcast(intent);</span></span><br><span class="line">localBroadcastManager.sendBroadcast();</span><br></pre></td></tr></table></figure></li>
<li>接收处理 接收处理在广播接收器的 onReceive 方法中进行，创建广播接收器中已经说明，在此不再赘述。</li>
<li>取消注册 静态注册的不需要我们编码去取消注册，对于动态注册的则需要编码去取消注册，如果是全局广播则调用 unregisterReceiver 方法即可，如果是本地广播则调用 LocalBroadCastManager 对象的该方法即可。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">unregisterReceiver(forceReceiver);</span><br><span class="line">localBroadcastManager.unregisterReceiver(forceReceiver);</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Android Component</tag>
      </tags>
  </entry>
  <entry>
    <title>Android启动过程简析（三）之 SystemServer 进程</title>
    <url>/posts/62e007c4.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>在<a href="/posts/32f3dbe6.html" title="Android启动过程简析（二）">Android启动过程简析（二）</a>中已经大致分析了 zygote 进程的启动过程当中所做的主要工作，本篇将继续对 SystemServer 的启动过程进行分析。<span id="more"></span></p>
<h2 id="systemserver-启动过程">SystemServer 启动过程</h2>
<p>上文说到 SystemServer 进程在 ZygoteInit.java 中被创建，然后便会在 SystemServer 进程调用 handleSystemServerProcess 方法处理 SystemServer 进程的剩余工作</p>
<p>frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleSystemServerProcess</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        ZygoteConnection.Arguments parsedArgs)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ZygoteInit.MethodAndArgsCaller </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//SystemServer 进程不需要进行Socket通信，所以关闭</span></span><br><span class="line">    closeServerSocket();</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置进程名为system_server</span></span><br><span class="line">    <span class="keyword">if</span> (parsedArgs.niceName != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Process.setArgV0(parsedArgs.niceName);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">final</span> String systemServerClasspath = Os.getenv(<span class="string">&quot;SYSTEMSERVERCLASSPATH&quot;</span>);</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这里 parsedArgs.invokeWith 为 null</span></span><br><span class="line">    <span class="keyword">if</span> (parsedArgs.invokeWith != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ClassLoader cl = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (systemServerClasspath != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//创建 SystemServer 的类加载器对象</span></span><br><span class="line">            cl = createSystemServerClassLoader(systemServerClasspath,</span><br><span class="line">                                               parsedArgs.targetSdkVersion);</span><br><span class="line">            </span><br><span class="line">            Thread.currentThread().setContextClassLoader(cl);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将剩余参数传递给 SystemServer</span></span><br><span class="line">        RuntimeInit.zygoteInit(parsedArgs.targetSdkVersion, parsedArgs.remainingArgs, cl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* should never reach here */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 handleSystemServerProcess 方法中首先会关闭掉 Socket 连接，然后会根据传递过来的参数设置进程名称，在设置完进程名称之后，由于 parseArgs 的成员 invokeWith 为 null，所以会利用 systemServerClasspath 创建对应的类加载器对象，最后会通过 RuntimeInit 的 zygoteInit 方法将剩余参数传递给 SystemServer。</p>
<h3 id="runtimeinit-分析">RuntimeInit 分析</h3>
<p>frameworks/base/core/java/com/android/internal/os/RuntimeInit.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">zygoteInit</span><span class="params">(<span class="keyword">int</span> targetSdkVersion, String[] argv, ClassLoader classLoader)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ZygoteInit.MethodAndArgsCaller </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG) Slog.d(TAG, <span class="string">&quot;RuntimeInit: Starting application from zygote&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">&quot;RuntimeInit&quot;</span>);</span><br><span class="line">    redirectLogStreams();</span><br><span class="line"></span><br><span class="line">    commonInit();</span><br><span class="line">    nativeZygoteInit();</span><br><span class="line">    applicationInit(targetSdkVersion, argv, classLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>zygoteInit 中依次调用了 nativeZygoteInit 和 applicationInit，其中前者启动了一个线程池，而后者则会调用了 SystemServer 类的 main 方法。</p>
<h4 id="启动线程池">启动线程池</h4>
<p>nativeZygoteInit 实际上对应着 com_android_internal_os_RuntimeInit_nativeZygoteInit</p>
<p>frameworks/base/core/jni/AndroidRuntime.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> JNINativeMethod gMethods[] = &#123;</span><br><span class="line">    &#123; <span class="string">&quot;nativeFinishInit&quot;</span>, <span class="string">&quot;()V&quot;</span>,</span><br><span class="line">        (<span class="keyword">void</span>*) com_android_internal_os_RuntimeInit_nativeFinishInit &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;nativeZygoteInit&quot;</span>, <span class="string">&quot;()V&quot;</span>,</span><br><span class="line">        (<span class="keyword">void</span>*) com_android_internal_os_RuntimeInit_nativeZygoteInit &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;nativeSetExitWithoutCleanup&quot;</span>, <span class="string">&quot;(Z)V&quot;</span>,</span><br><span class="line">        (<span class="keyword">void</span>*) com_android_internal_os_RuntimeInit_nativeSetExitWithoutCleanup &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_com_android_internal_os_RuntimeInit</span><span class="params">(JNIEnv* env)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">jniRegisterNativeMethods</span>(env, <span class="string">&quot;com/android/internal/os/RuntimeInit&quot;</span>,</span><br><span class="line">        gMethods, <span class="built_in">NELEM</span>(gMethods));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>继续查看 com_android_internal_os_RuntimeInit_nativeZygoteInit 可以知道最终调用了 gCurRuntime 的 onZygoteInit 方法，而 gCurRuntime 实际上是一个 AndroidRuntime 的指针</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">com_android_internal_os_RuntimeInit_nativeZygoteInit</span><span class="params">(JNIEnv* env, jobject clazz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    gCurRuntime-&gt;<span class="built_in">onZygoteInit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>onZygoteInit 的具体实现在 AndroidRuntime 的子类 AppRuntime 中，可以看到最终通过 startThreadPool 启动了线程池</p>
<p>frameworks/base/cmds/app_process/app_main.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">onZygoteInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sp&lt;ProcessState&gt; proc = ProcessState::<span class="built_in">self</span>();</span><br><span class="line">    <span class="built_in">ALOGV</span>(<span class="string">&quot;App process: starting thread pool.\n&quot;</span>);</span><br><span class="line">    proc-&gt;<span class="built_in">startThreadPool</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="调用-systemserver-的-main-方法">调用 SystemServer 的 main 方法</h4>
<p>frameworks/base/core/java/com/android/internal/os/RuntimeInit.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">applicationInit</span><span class="params">(<span class="keyword">int</span> targetSdkVersion, String[] argv, ClassLoader classLoader)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ZygoteInit.MethodAndArgsCaller </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据 argv 构建 RuntimeInit.Arguments，这里的 argv[] 实际上是 		“com.android.server.SystemServer”</span></span><br><span class="line">    <span class="keyword">final</span> Arguments args;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        args = <span class="keyword">new</span> Arguments(argv);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">        Slog.e(TAG, ex.getMessage());</span><br><span class="line">        <span class="comment">// let the process exit</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The end of of the RuntimeInit event (see #zygoteInit).</span></span><br><span class="line">    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remaining arguments are passed to the start class&#x27;s static main</span></span><br><span class="line">    invokeStaticMain(args.startClass, args.startArgs, classLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 applicationInit 方法中会对 argv 进行解析创建 RuntimeInit.Arguments 参数，然后会调用 invokeStaticMain</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeStaticMain</span><span class="params">(String className, String[] argv, ClassLoader classLoader)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ZygoteInit.MethodAndArgsCaller </span>&#123;</span><br><span class="line">    Class&lt;?&gt; cl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//获取SystemServer的Class对象</span></span><br><span class="line">        cl = Class.forName(className, <span class="keyword">true</span>, classLoader);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="string">&quot;Missing class when invoking static main &quot;</span> + className,</span><br><span class="line">                ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Method m;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//获取 main 方法</span></span><br><span class="line">        m = cl.getMethod(<span class="string">&quot;main&quot;</span>, <span class="keyword">new</span> Class[] &#123; String[].class &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="string">&quot;Missing static main on &quot;</span> + className, ex);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SecurityException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="string">&quot;Problem getting static main on &quot;</span> + className, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取方法修饰符，判断是否是入口 main 方法</span></span><br><span class="line">    <span class="keyword">int</span> modifiers = m.getModifiers();</span><br><span class="line">    <span class="keyword">if</span> (! (Modifier.isStatic(modifiers) &amp;&amp; Modifier.isPublic(modifiers))) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="string">&quot;Main method is not public and static on &quot;</span> + className);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * This throw gets caught in ZygoteInit.main(), which responds</span></span><br><span class="line"><span class="comment">     * by invoking the exception&#x27;s run() method. This arrangement</span></span><br><span class="line"><span class="comment">     * clears up all the stack frames that were required in setting</span></span><br><span class="line"><span class="comment">     * up the process.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ZygoteInit.MethodAndArgsCaller(m, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 invokeStaticMain 方法中会通过方法签名获取到 SystemServer 的 main 方法，之后会抛出 MethodAndArgsCaller 异常，然后在 ZygoteInit 的 main 方法中进行捕获，捕获之后会执行 MethodAndArgsCaller 的 run 方法，而在 run 方法中会完成对 SystemServer 的 main 方法的调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MethodAndArgsCaller 的 run 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mMethod.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Object[] &#123; mArgs &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ex);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">        Throwable cause = ex.getCause();</span><br><span class="line">        <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (RuntimeException) cause;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> Error) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (Error) cause;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ZygoteInit 捕获异常</span></span><br><span class="line"><span class="comment">//frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String argv[])</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125; <span class="keyword">catch</span> (MethodAndArgsCaller caller) &#123;</span><br><span class="line">        caller.run();</span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="systemserver-分析">SystemServer 分析</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> SystemServer().run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SystemServer 的 main 方法中创建了一个 SystemServer 对象，并调用了其 run 方法，所以继续看 run 方法部分</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//创建 SystemServer 主线程的 Looper</span></span><br><span class="line">        Looper.prepareMainLooper();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化 mSystemContext</span></span><br><span class="line">        createSystemContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 SystemServiceManager 对象</span></span><br><span class="line">        mSystemServiceManager = <span class="keyword">new</span> SystemServiceManager(mSystemContext);</span><br><span class="line">        LocalServices.addService(SystemServiceManager.class, mSystemServiceManager);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动服务</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER, <span class="string">&quot;StartServices&quot;</span>);</span><br><span class="line">        startBootstrapServices();</span><br><span class="line">        startCoreServices();</span><br><span class="line">        startOtherServices();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        Slog.e(<span class="string">&quot;System&quot;</span>, <span class="string">&quot;******************************************&quot;</span>);</span><br><span class="line">        Slog.e(<span class="string">&quot;System&quot;</span>, <span class="string">&quot;************ Failure starting system services&quot;</span>, ex);</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// For debug builds, log event loop stalls to dropbox for analysis.</span></span><br><span class="line">    <span class="keyword">if</span> (StrictMode.conditionallyEnableDebugLogging()) &#123;</span><br><span class="line">        Slog.i(TAG, <span class="string">&quot;Enabled StrictMode for system server main thread.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Loop forever.</span></span><br><span class="line">    Looper.loop();</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Main thread loop unexpectedly exited&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 run 方法中，首先调用 Looper.prepareMainLooper() 创建了当前主线程的 Looper，之后会调用 createSystemContext 初始化 mSystemContext 实例，这里的 mSystemContext 是一个 ContextImpl 实例，主要用于初始化一些 Service，最后则是启动系统各项服务。</p>
<h4 id="启动系统服务">启动系统服务</h4>
<p>从启动服务的过程中看，系统将服务分为三类：</p>
<ol type="1">
<li><p>引导服务----------startBootstrapServices()</p>
<p>Installer、ActivityManagerService、PackageManagerService 等</p></li>
<li><p>核心服务----------startCoreServices()</p>
<p>BatteryService、UsageStatsService、WebViewUpdateService</p></li>
<li><p>其它服务----------startOtherServices()</p>
<p>AlarmManagerService、VibratorService 等</p></li>
</ol>
<p>而对于服务的启动方式而言也分为三种（启动方式与服务类别并不对应）：</p>
<ol type="1">
<li><p>mSystemServiceManager.startService()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T extends SystemService&gt; <span class="function">T <span class="title">startService</span><span class="params">(Class&lt;T&gt; serviceClass)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> String name = serviceClass.getName();</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//创建Service实例</span></span><br><span class="line">        <span class="keyword">final</span> T service;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Constructor&lt;T&gt; constructor = serviceClass.getConstructor(Context.class);</span><br><span class="line">            service = constructor.newInstance(mContext);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException ex) &#123;</span><br><span class="line">            ....</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加入 List&lt;SystemService&gt; 当中</span></span><br><span class="line">        mServices.add(service);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//回调 Service 的 onStart 方法</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            service.onStart();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Failed to start service &quot;</span> + name</span><br><span class="line">                    + <span class="string">&quot;: onStart threw an exception&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> service;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从这里可以看出 startService 启动的服务都是 SystemService 的子类，启动的过程是先对服务类进行加载，加载之后进行实例化，实例化之后则会调用实例的 onStart 方法。</p></li>
<li><p>xxxService.main()</p>
<p>这种方式主要在启动以下三个服务中用到</p>
<ul>
<li><p>PackageManagerService</p></li>
<li>OtaDexoptService</li>
<li><p>WindowManagerService</p></li>
</ul>
<p>这里以 PackageManagerService 为例进行分析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PackageManagerService <span class="title">main</span><span class="params">(Context context, Installer installer,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">boolean</span> factoryTest, <span class="keyword">boolean</span> onlyCore)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Self-check for initial settings.</span></span><br><span class="line">    PackageManagerServiceCompilerMapping.checkProperties();</span><br><span class="line"></span><br><span class="line">    PackageManagerService m = <span class="keyword">new</span> PackageManagerService(context, installer,</span><br><span class="line">            factoryTest, onlyCore);</span><br><span class="line">    m.enableSystemUserPackages();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//注册启动服务</span></span><br><span class="line">    ServiceManager.addService(<span class="string">&quot;package&quot;</span>, m);</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到在 main 方法中直接创建了 PackageManagerService 的实例，然后通过 ServiceManager 进行注册启动。</p></li>
<li><p>ServiceManager.addService()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServiceManager.addService(<span class="string">&quot;scheduling_policy&quot;</span>, <span class="keyword">new</span> SchedulingPolicyService());</span><br></pre></td></tr></table></figure>
<p>ServiceManager 涉及到 Binder 暂不做分析</p></li>
</ol>
<p>上文中提到了服务的注册，对于服务的注册而言实际上分为两种：一是 ServiceManager.addService，二是 LocalServices.addService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This class is used in a similar way as ServiceManager, except the services registered here</span></span><br><span class="line"><span class="comment"> * are not Binder objects and are only available in the same process.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Once all services are converted to the SystemService interface, this class can be absorbed</span></span><br><span class="line"><span class="comment"> * into SystemServiceManager.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@hide</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalServices</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LocalServices</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ArrayMap&lt;Class&lt;?&gt;, Object&gt; sLocalServiceObjects =</span><br><span class="line">            <span class="keyword">new</span> ArrayMap&lt;Class&lt;?&gt;, Object&gt;();</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Adds a service instance of the specified interface to the global registry of local services.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">addService</span><span class="params">(Class&lt;T&gt; type, T service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (sLocalServiceObjects) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sLocalServiceObjects.containsKey(type)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Overriding service registration&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sLocalServiceObjects.put(type, service);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查看 LocalServices 的类描述可以知道 LocalServices 与 ServiceManager 用处类似，不同点在于ServiceManager 用于不同进程间获取 Service，而 LocalServices 只能够用于同一进程中获取 Service。</p>
<h2 id="总结">总结</h2>
<p>至此大概就能知道在 SystemServer 启动过程中主要做了三件事</p>
<ol type="1">
<li>开启线程池</li>
<li>创建 SystemServerManager 对象负责继承自 SystemService 的服务的创建、启动以及生命周期的管理</li>
<li>启动系统的服务</li>
</ol>
<h2 id="thanks">Thanks</h2>
<ol type="1">
<li><span class="exturl" data-url="aHR0cDovL2dpdHl1YW4uY29tLzIwMTYvMDIvMTQvYW5kcm9pZC1zeXN0ZW0tc2VydmVyLw==">Android系统启动-SystemServer上篇<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2dpdHl1YW4uY29tLzIwMTYvMDIvMjAvYW5kcm9pZC1zeXN0ZW0tc2VydmVyLTIv">Android系统启动-SystemServer下篇<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2dpdHl1YW4uY29tLzIwMTYvMTAvMDEvc3lzdGVtX3NlcnZpY2VfY29tbW9uLw==">Android系统服务的注册方式<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaXRhY2hpODUvYXJ0aWNsZS9kZXRhaWxzLzU2NjY5ODA4">Android系统启动流程（三）解析SyetemServer进程启动过程<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>SourceCode Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Android启动过程简析（四）之Lanucher的启动</title>
    <url>/posts/3c13d9e0.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>通过<a href="/posts/62e007c4.html" title="Android启动过程简析（三）">Android启动过程简析（三）</a>这篇文章我们已经大致了解了服务是如何被启动的，接着本文将会分析系统启动的最后一步，即 Launcher 的启动。<span id="more"></span></p>
<h2 id="lanucher的启动流程">Lanucher的启动流程</h2>
<p>在 SystemServer 中启动的这么多服务当中 ActivityManagerService 是负责四大组件的启动、切换、调度的，所以 Launcher 的启动与 ActivityManagerService 离不开关系</p>
<p>frameworks/base/services/java/com/android/server/SystemServer.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startOtherServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ....</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We now tell the activity manager it is okay to run third party</span></span><br><span class="line">    <span class="comment">// code.  It will call back into us once it has gotten to the state</span></span><br><span class="line">    <span class="comment">// where third party code can really run (but before it has actually</span></span><br><span class="line">    <span class="comment">// started launching the initial applications), for us to complete our</span></span><br><span class="line">    <span class="comment">// initialization.</span></span><br><span class="line">    mActivityManagerService.systemReady(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            ....</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                startSystemUi(context);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                reportWtf(<span class="string">&quot;starting System UI&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到在 startOtherServices 中调用了 mActivityManagerService 的 systemReady 方法，并在传入的 Runnable 对象中启动了 SystemUi，接着继续查看 systemReady 方法</p>
<p>frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">systemReady</span><span class="params">(<span class="keyword">final</span> Runnable goingCallback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">//第一次为false不会进入</span></span><br><span class="line">        <span class="keyword">if</span> (mSystemReady) &#123;</span><br><span class="line">            <span class="comment">// If we&#x27;re done calling all the receivers, run the next &quot;boot phase&quot; passed in</span></span><br><span class="line">            <span class="comment">// by the SystemServer</span></span><br><span class="line">            <span class="keyword">if</span> (goingCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">                goingCallback.run();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ....</span><br><span class="line">        mSystemReady = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">// Make sure we have no pre-ready processes sitting around.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mFactoryTest == FactoryTest.FACTORY_TEST_LOW_LEVEL) &#123;</span><br><span class="line">            ....</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//执行传入的Runnable对象</span></span><br><span class="line">    <span class="keyword">if</span> (goingCallback != <span class="keyword">null</span>) goingCallback.run();</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">// Only start up encryption-aware persistent apps; once user is</span></span><br><span class="line">        <span class="comment">// unlocked we&#x27;ll come back around and start unaware apps</span></span><br><span class="line">        startPersistentApps(PackageManager.MATCH_DIRECT_BOOT_AWARE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start up initial activity.</span></span><br><span class="line">        mBooting = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// Enable home activity for system user, so that the system can always boot</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//启动Lanucher的主Activity</span></span><br><span class="line">        startHomeActivityLocked(currentUserId, <span class="string">&quot;systemReady&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">        mStackSupervisor.resumeFocusedStackTopActivityLocked();</span><br><span class="line">        mUserController.sendUserSwitchBroadcastsLocked(-<span class="number">1</span>, currentUserId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 systemReady 方法中会调用 startHomeActivityLocked</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">startHomeActivityLocked</span><span class="params">(<span class="keyword">int</span> userId, String reason)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mFactoryTest == FactoryTest.FACTORY_TEST_LOW_LEVEL</span><br><span class="line">            &amp;&amp; mTopAction == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// We are running in factory test mode, but unable to find</span></span><br><span class="line">        <span class="comment">// the factory test app, so just sit around displaying the</span></span><br><span class="line">        <span class="comment">// error message and don&#x27;t try to start anything.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构建启动Lanucher主Activity的Intent对象</span></span><br><span class="line">    Intent intent = getHomeIntent();</span><br><span class="line">    ActivityInfo aInfo = resolveActivityInfo(intent, STOCK_PM_FLAGS, userId);</span><br><span class="line">    <span class="keyword">if</span> (aInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">        intent.setComponent(<span class="keyword">new</span> ComponentName(aInfo.applicationInfo.packageName, aInfo.name));</span><br><span class="line">        <span class="comment">// Don&#x27;t do this if the home app is currently being</span></span><br><span class="line">        <span class="comment">// instrumented.</span></span><br><span class="line">        aInfo = <span class="keyword">new</span> ActivityInfo(aInfo);</span><br><span class="line">        aInfo.applicationInfo = getAppInfoForUser(aInfo.applicationInfo, userId);</span><br><span class="line">        ProcessRecord app = getProcessRecordLocked(aInfo.processName,</span><br><span class="line">                aInfo.applicationInfo.uid, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (app == <span class="keyword">null</span> || app.instrumentationClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">            intent.setFlags(intent.getFlags() | Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">            <span class="comment">//启动Lanucher主Activity</span></span><br><span class="line">            mActivityStarter.startHomeActivityLocked(intent, aInfo, reason);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Slog.wtf(TAG, <span class="string">&quot;No home screen found for &quot;</span> + intent, <span class="keyword">new</span> Throwable());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>进入 startHomeActivityLocked 方法之后可以看到调用了 getHomeIntent 返回了一个 Intent，我们都知道启动一个 Activity 的信息都是通过 Intent 进行传递的，所以继续查看 getHomeIntent 看看 Intent 包含的信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Intent <span class="title">getHomeIntent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//mTopAction 是 android.intent.action.MAIN</span></span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(mTopAction, mTopData != <span class="keyword">null</span> ? Uri.parse(mTopData) : <span class="keyword">null</span>);</span><br><span class="line">    intent.setComponent(mTopComponent);</span><br><span class="line">    intent.addFlags(Intent.FLAG_DEBUG_TRIAGED_MISSING);</span><br><span class="line">    <span class="keyword">if</span> (mFactoryTest != FactoryTest.FACTORY_TEST_LOW_LEVEL) &#123;</span><br><span class="line">        intent.addCategory(Intent.CATEGORY_HOME);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> intent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 getHomeIntent 中首先创建了一个 Intent 对象，然后给这个对象增加了一个 category，category 对应的信息是 android.intent.category.HOME，查找 Lanucher3 的 AndroidManifest.xml 可以看见</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;com.android.launcher3.Launcher&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:launchMode</span>=<span class="string">&quot;singleTask&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:clearTaskOnLaunch</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:stateNotNeeded</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">&quot;@style/Theme&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:windowSoftInputMode</span>=<span class="string">&quot;adjustPan&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:screenOrientation</span>=<span class="string">&quot;nosensor&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:configChanges</span>=<span class="string">&quot;keyboard|keyboardHidden|navigation&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:resumeWhilePausing</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:taskAffinity</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:enabled</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.HOME&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.MONKEY&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这说明即将启动的 Activity 是 com.android.launcher3.Launcher，现在回到 startHomeActivityLocked 方法中，继续往下看可以知道在得到 Intent 对象之后，最后是通过 ActivityStarter 的 startHomeActivityLocked 启动了 Launcher。之后的部分由于涉及到 Lanucher 源码和 Activity 启动的细致流程，所以就暂时不做分析了。</p>
<h2 id="总结">总结</h2>
<p>通过四篇文章的分析对系统启动的过程有了一个大致的了解，但是限于水平有限，有些部分分析的比较粗糙，希望之后在水平提升之后能够对各个部分进行进一步的完善，例如：Binder、ActivityManagerService、Acitvity 的启动过程等等。 最后借用 Gityuan <span class="exturl" data-url="aHR0cDovL2dpdHl1YW4uY29tL2FuZHJvaWQv">Android系统开篇<i class="fa fa-external-link-alt"></i></span>中的一张图片说明系统启动的过程</p>
<p><img src="https://raw.githubusercontent.com/ikroal/blog-images/master/Android-start.png"></p>
<h2 id="thanks">Thanks</h2>
<ol type="1">
<li><span class="exturl" data-url="aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaXRhY2hpODUvYXJ0aWNsZS9kZXRhaWxzLzU2NjY5ODA4">Android系统启动流程（四）Launcher启动过程与系统启动流程<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>SourceCode Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Android基础之Activity</title>
    <url>/posts/2ffb109a.html</url>
    <content><![CDATA[<h2 id="activity导图">Activity导图</h2>
<p>主要内容： <img src="https://raw.githubusercontent.com/ikroal/blog-images/master/Activity-mind-mapping.png"></p>
<span id="more"></span>
<h2 id="activity-基本使用">Activity 基本使用</h2>
<ol type="1">
<li>创建活动</li>
<li>AndroidManifest.xml 的 application 标签内进行声明</li>
<li>载入布局 setContentView(R.layout.second_layout)</li>
</ol>
<h3 id="activity-跳转">Activity 跳转</h3>
<ol type="1">
<li><p>显式 Intent</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Intent(Context packageContext, Class&lt;?&gt; cls)</span></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity.class);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure> 这种指定上下文和目标活动类名的 Intent 称之为显式 Intent。</p></li>
<li><p>隐式 Intent</p>
<p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.SecondActivity&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;com.rookieyang.demo.ACTION_START&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;com.rookieyang.demo.MY_CATEGORY&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Intent implieIntent = <span class="keyword">new</span> Intent(<span class="string">&quot;com.rookieyang.demo.ACTION_START&quot;</span>);</span><br><span class="line">implieIntent.addCategory(<span class="string">&quot;com.rookieyang.demo.MY_CATEGORY&quot;</span>);</span><br><span class="line">startActivity(implieIntent);</span><br></pre></td></tr></table></figure></p>
<p>隐式 Intent 通过指定一系列更为抽象的 action 和 category 等信息，然后交由系统去分析这个 Intent，并帮我们找出合适的活动去启动。只有活动中的 &lt;action&gt; 和 &lt;category&gt; 标签完全匹配 Intent 中的 action 和 category 时，活动才能响应 Intent。</p>
<blockquote>
<p>在调用 startActivity() 方法时会自动将 android.intent.category.DEFAULT 加入到 Intent 中，所以在给 Activity 指定 category 的时候不能够去掉默认的 android.intent.category.DEFAULT，去掉之后通过隐式 Intent 将无法匹配到该 Activity。</p>
</blockquote>
<p>隐式 Intent 除了可以启动自己程序内的活动，还可以启动其他程序的活动：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">btn.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</span><br><span class="line">        intent.setData(Uri.parse(<span class="string">&quot;http://www.baidu.com&quot;</span>));</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>隐式 Intent 指定了一个系统内置的 action，通过 setData() 设置 Intent 操作的数据用以调用系统浏览器，其中 setData() 对应 &lt;intent-filter&gt; 标签内的 &lt;data&gt; 标签，用于指定当前活动能够响应什么类型的数据。&lt;data&gt; 标签中主要可以配置以下内容：</p>
<ul>
<li>android:scheme：用于指定数据的协议部分，如上例的 http 部分。</li>
<li>android:host：用于指定数据的主机名部分，如上例的 www.baidu.com 部分。</li>
<li>android:port：用于指定数据的端口部分，一般紧随主机名之后。</li>
<li>android:path：用于指定主机名和端口之后的部分，如一段网址中跟在域名之后的内容。</li>
<li>android:mimeType：用于指定可以处理的数据类型，允许使用通配符方式进行指定。</li>
</ul></li>
</ol>
<h3 id="activity-间数据传递">Activity 间数据传递</h3>
<ol type="1">
<li><p>向下一个活动传递数据</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MainActivity</span></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity.class);</span><br><span class="line">intent.putExtra(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;data&quot;</span>);</span><br><span class="line">startActivity(intent);</span><br><span class="line"><span class="comment">//SecondActivity</span></span><br><span class="line">Intent intent = getIntent();</span><br><span class="line">Toast.makeText(<span class="keyword">this</span>, intent.getStringExtra(<span class="string">&quot;data&quot;</span>), Toast.LENGTH_LONG).show();</span><br></pre></td></tr></table></figure> MainActivity 中通过 Intent 的 putExtra() 方法将数据暂存在 Intent 中，然后在 SecondActivity 中通过getIntent() 获取到启动 SecondActivity 的 Intent，之后通过 getStringExtra() 方法获取到传递的数据。如果传递的是整型数据则使用 getIntExtra() 方法。</p></li>
<li><p>返回数据给上一个活动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MainActivity</span></span><br><span class="line">btn.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity.class);</span><br><span class="line">        startActivityForResult(intent, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (requestCode) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> (resultCode == RESULT_OK) &#123;</span><br><span class="line">                Log.i(<span class="string">&quot;onActivityResult&quot;</span>, data.getStringExtra(<span class="string">&quot;data&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//SecondActivity</span></span><br><span class="line">btn.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">        intent.putExtra(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;data&quot;</span>);</span><br><span class="line">        setResult(RESULT_OK, intent);</span><br><span class="line">        finish();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>startActivityForResult(Intent intent, int requestCode)：期望在活动销毁的时候能够返回一个结果给上一个活动。</li>
<li>setResult(int resultCode, Intent data)：专门用于向上一个活动返回数据，第一个参数用于向上一个活动返回处理结果，一般只使用 RESULT_OK 和 RESULT_CANCELED。第二个参数则是把带有数据的 Intent 传递回去，然后调用 finish() 方法来销毁当前活动。</li>
<li>onActivityResult(int requestCode, int resultCode, Intent data)：第一个参数是我们启动活动传入的请求码，第二个参数是返回数据传入的返回结果，第三个参数是返回的携带数据的 Intent，由于一个活动可能调用 startActivityForResult() 启动多个活动，所以首先需要检查 requestCode 来判断数据来源，然后在通过 resultCode 来判断处理结果是否成功。</li>
</ul></li>
</ol>
<h3 id="activity-的生命周期">Activity 的生命周期</h3>
<p><img src="https://raw.githubusercontent.com/ikroal/blog-images/master/Activity-Life-Cycle.png"></p>
<ol type="1">
<li>onCreate()：活动第一次被创建的时候调用，一般在该方法中完成活动的初始化操作，比如加载布局、绑定事件等。</li>
<li>onStart()：在活动由不可见变为可见的时候调用。</li>
<li>onResume()：在活动准备好和用户进行交互的时候调用。此时活动一定位于栈顶，并且处于运行状态。</li>
<li>onPause()：在系统准备去启动或者恢复另一个活动的时候调用。我们通常会在这个方法中将一些消耗 CPU 的资源释放掉，以及保存一些关键数据，但这个方法的执行速度一定要快，不然会影响到新的栈顶活动的使用。</li>
<li>onStop()：在活动完全不可见的时候调用。如果启动的新活动是一个对话框式的活动，则 <code>onPause()</code> 会执行，而 onStop() 不会执行。</li>
<li>onDestroy()：在活动被销毁之前调用。</li>
<li>onRestart()：在活动由停止状态变为活动状态之前调用。 &gt; 以上七种方法中除了 onRestart( ) 方法，其他都是两两相对的，从而可以分为三种生存期：onCreate( ) 和 onDestory( ) 为<code>完整生存期</code>、onStart( ) 和 onStop( ) 为<code>可见生存期</code>、onResume( ) 和 onPause( ) 为<code>前台生存期</code>。 &gt; Activity 最多可能有四种状态，分别为：运行状态、暂停状态、停止状态、销毁状态。系统一般倾向于回收处于后两种状态的 Activity。</li>
</ol>
<h3 id="activity-的数据保存">Activity 的数据保存</h3>
<p>由于 Activity 处于停止状态的时候可能被系统回收，那么当用户返回被回收的 Activity 之时会面对一个空数据的 Activity。为了避免这种情况的发生，我们可以利用 onSaveInstanceState() 进行数据的保存工作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//保存</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</span><br><span class="line">   outState.putString(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;outState&quot;</span>);</span><br><span class="line">   Log.i(TAG, <span class="string">&quot;onSaveInstanceState: &quot;</span>);</span><br><span class="line">   <span class="keyword">super</span>.onSaveInstanceState(outState);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//恢复</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">   setContentView(R.layout.activity_first);</span><br><span class="line">   <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;</span><br><span class="line">     Log.i(TAG, <span class="string">&quot;onCreate: &quot;</span> + savedInstanceState.getString(<span class="string">&quot;data&quot;</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>主动销毁 Acitivity 不会触发 onSaveInstanceState()，Bundle 也可以和 Intent 结合起来传递数据。</p>
</blockquote>
<h3 id="activity-启动模式">Activity 启动模式</h3>
<p>Activity 有下列四种启动模式：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">启动模式</th>
<th style="text-align: left;">作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">standard</td>
<td style="text-align: left;">每次启动活动都会创建一个活动的实例</td>
</tr>
<tr class="even">
<td style="text-align: left;">singleTop</td>
<td style="text-align: left;">在启动活动的时候如果发现返回栈的栈顶已经是该活动，则会直接使用它，不会再创建新的活动实例</td>
</tr>
<tr class="odd">
<td style="text-align: left;">singleTask</td>
<td style="text-align: left;">在启动活动的时候如果发现返回栈中已经存在该活动，则直接使用它，并把该活动之上的所有活动统统出栈</td>
</tr>
<tr class="even">
<td style="text-align: left;">singleInstance</td>
<td style="text-align: left;">在启动活动的时候，启动一个单独的返回栈来管理该活动</td>
</tr>
</tbody>
</table>
<ul>
<li>singleInstance 的意义：假设程序中有一个活动允许其他程序调用，如果我们想实现其他程序和我们的程序可以共享这个活动的实例，就需要使用 singleInstance 模式，因为在这种模式下会有一个单独的返回栈来管理这个活动，不管是哪个应用程序来访问这个活动，都共用同一个返回栈。</li>
</ul>
<h2 id="intent-的-flags-属性">Intent 的 Flags 属性</h2>
<p>Flags 的作用有很多，有的 Flags 为可以设定 Activity 的启动模式，还有的 Flags 可以影响 Activity 的运行状态，比如 FLAG_ACTIVITY_SINGLE_TOP 和 FLAG_ACTIVITY_CLEAR_TOP。 常用的 Flags 如下：</p>
<table>
<colgroup>
<col style="width: 45%">
<col style="width: 54%">
</colgroup>
<thead>
<tr class="header">
<th>Flags</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>FLAG_ACTIVITY_NEW_TASK</td>
<td>When using this flag, if a task is already running for the activity you are now starting, then a new activity will not be started; instead, the current task will simply be brought to the front of the screen with the state it was last in.</td>
</tr>
<tr class="even">
<td>FLAG_ACTIVITY_CLEAR_TOP</td>
<td>设置该标志之后的 Activity，当启动 Activity 时，如果该 Activity 已经存在任务栈中，则不在创建新的实例，并且位于该 Activity 之上的 Activity都需要出栈<br>一般配合 FLAG_ACTIVITY_NEW_TASK 进行使用</td>
</tr>
<tr class="odd">
<td>FLAG_ACTIVITY_SINGLE_TOP</td>
<td>设置 Activity 的启动模式为 singleTop</td>
</tr>
<tr class="even">
<td>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS</td>
<td>具有该标志的 Activity 不会出现在历史 Activity 的列表中</td>
</tr>
<tr class="odd">
<td>FLAG_ACTIVITY_LAUNCH_ADJACENT</td>
<td>此标志仅用于分屏多窗口模式，新的活动将显示在上一个 Activity 的附近<br>需要与 FLAG_ACTIVITY_NEW_TASK 结合使用。 另外，如果要创建现有活动的新实例，则应同时设置 FLAG_ACTIVITY_MULTIPLE_TASK</td>
</tr>
<tr class="even">
<td>FLAG_ACTIVITY_NEW_DOCUMENT</td>
<td>该标志用于在一个以目标 Activity 为栈顶的新任务栈中打开文档</td>
</tr>
</tbody>
</table>
<ul>
<li>FLAG_ACTIVITY_NEW_TASK：设置此状态，记住以下原则，首先会查找是否存在和被启动的 Activity 具有相同的亲和性的任务栈（即 taskAffinity，注意同一个应用程序中的 activity 的亲和性在没有修改的情况下是一样的），如果有，则直接把这个栈整体移动到前台，并保持栈中的状态不变，即栈中的 activity 顺序不变，如果没有，则新建一个栈来存放被启动的 activity。</li>
<li>FLAG_ACTIVITY_LAUNCH_ADJACENT：测试发现在分屏模式下在启动目标 Activity 时，如果没有设置 FLAG_ACTIVITY_MULTIPLE_TASK ，那么当目标 Activity 已经存在于任务栈中，将不会进入分屏模式。</li>
<li>FLAG_ACTIVITY_NEW_DOCUMENT： 当单独使用时，它相当于指定 <code>documentLaunchMode =“intoExisting”</code>。当与 FLAG_ACTIVITY_MULTIPLE_TASK 一起使用时，它等同于指定 <code>documentLaunchMode =“always”</code>。</li>
</ul>
<h2 id="序列化">序列化</h2>
<h3 id="目的">目的</h3>
<p>Intent 的 putExtra() 方法中所支持的数据类型是有限的，当需要传递一些自定义对象的时候，就需要用到序列化了。</p>
<h3 id="方法">方法</h3>
<p>使用 Intent 来传递对象通常有两种实现方式：</p>
<ol type="1">
<li><p>Parcelable</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"> ...</span><br><span class="line">    </span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">     dest.writeString(name);</span><br><span class="line">     dest.writeInt(age);</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;Person&gt; CREATOR = <span class="keyword">new</span> Creator&lt;Person&gt;() &#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> Person <span class="title">createFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</span><br><span class="line">         Person person = <span class="keyword">new</span> Person();</span><br><span class="line">         person.name = source.readString();</span><br><span class="line">         person.age = source.readInt();</span><br><span class="line">         <span class="keyword">return</span> person;</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> Person[] newArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Person[size];</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Person 类实现了 Parcelable 接口用于序列化，提供了一个名为 CREATOR 的常量用于反序列化。createFromParcel() 和 writeToParcel() 的顺序需要一致。采用 Parcelable 方式进行序列化，获取对象的方法变为 getParcelableExtra()。</p></li>
<li><p>Serializable</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//MainActivity 中</span></span><br><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line">person.setAge(<span class="number">13</span>);</span><br><span class="line">person.setName(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity.class);</span><br><span class="line">intent.putExtra(<span class="string">&quot;data_person&quot;</span>, person);</span><br><span class="line">startActivity(intent);</span><br><span class="line"><span class="comment">//SecondActivity 中</span></span><br><span class="line">Person person = (Person) getIntent().getParcelableExtra(<span class="string">&quot;data_person&quot;</span>);</span><br><span class="line">Log.i(<span class="string">&quot;SecondActivity&quot;</span>, <span class="string">&quot;onCreate: &quot;</span> + person.getName());</span><br></pre></td></tr></table></figure></p>
<p>首先创建了一个 Person 类去实现 Serializable 接口，这样所有的 Person 对象就都是可序列化的了，然后在 MainActivity 中创建了一个 Person 对象，然后将对象传入 SecondActivity 中去，在 SecondActivity 中用 getParcelableExtra() 来获取对象。</p></li>
</ol>
<h2 id="实用技巧">实用技巧</h2>
<ol type="1">
<li><p>知晓当前是在哪一个活动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    Log.d(<span class="string">&quot;onCreate: &quot;</span>, getClass().getSimpleName());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> &gt; 创建一个 BaseActivity，然后让其他 Activity 继承 BaseAcitivty，那么当启动活动时就会 logcat 中打印出相应的信息。</li>
<li><p>随时随地退出程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityCollector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Activity&gt; activities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addActivity</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">    activities.add(activity);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeActivity</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">    activities.remove(activity);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">finishAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Activity activity : activities) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!activity.isFinishing()) &#123;</span><br><span class="line">        activity.finish();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> &gt; 创建一个活动的管理类，在活动的 <code>onCreate()</code> 中调用 <code>addActivity()</code> 方法保存创建的活动，在 <code>onDestroy()</code> 中调用 <code>removeActivity()</code> 方法移除马上要销毁的活动。如果需要随时随地退出程序则只需要调用 <code>finishAll()</code>。</li>
<li><p>启动活动的最佳写法</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">actionStart</span><span class="params">(Context context, String param1, String param2)</span> </span>&#123;</span><br><span class="line">  Intent intent = <span class="keyword">new</span> Intent(context, SecondActivity.class);</span><br><span class="line">  intent.putExtra(<span class="string">&quot;param1&quot;</span>, param1);</span><br><span class="line">  intent.putExtra(<span class="string">&quot;param2&quot;</span>, param2);</span><br><span class="line">  context.startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> &gt; 当活动中需要用到一些参数之时，可以采用如上方式去启动活动。那么当其他人来启动活动的时候将会非常方便。</p></li>
</ol>
<hr>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Android Activity</tag>
      </tags>
  </entry>
  <entry>
    <title>AsyncTask 总结</title>
    <url>/posts/902ef14f.html</url>
    <content><![CDATA[<h2 id="asynctask-的作用">AsyncTask 的作用</h2>
<blockquote>
<p>AsyncTask 允许对用户界面执行异步操作。 它会先阻塞工作线程中的操作，然后在 UI 线程中发布结果，而无需您亲自处理线程和/或处理程序。</p>
</blockquote>
<p>AsyncTask 基于异步消息处理机制进行实现，通过 AsyncTask 能够很简单的从子线程切换至主线程。 <span id="more"></span></p>
<h2 id="asynctask-的基本使用">AsyncTask 的基本使用</h2>
<ol type="1">
<li><p>由于 AsyncTask 是抽象类，所以首先需要创建一个继承它的子类。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAsyncTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Integer</span>, <span class="title">Boolean</span>&gt; </span></span><br></pre></td></tr></table></figure></p>
其中可以为 AsyncTask 指定三个泛型参数
<ul>
<li>Params：执行 Task 时传递的参数，在后台任务中使用，这里指定为 Void</li>
<li>Progress：指定进度单位，这里指定为 Integer</li>
<li>Result：执行完任务后返回的类型，这里指定为 Boolean</li>
</ul></li>
<li><p>重写 AsyncTask 的一些方法，主要是下面四个：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    progressDialog.show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Boolean <span class="title">doInBackground</span><span class="params">(Void... voids)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> percent = doDownload();</span><br><span class="line">        publishProgress(percent);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (percent &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... values)</span> </span>&#123;</span><br><span class="line">    progressDialog.setMessage(<span class="string">&quot;Downloaded &quot;</span> + values[<span class="number">0</span>] + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Boolean result)</span> </span>&#123;</span><br><span class="line">    progressDialog.dismiss();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line">        Toast.makeText(MainActivity.getCurrentContext(),</span><br><span class="line">            <span class="string">&quot;Download Succeeded&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Toast.makeText(MainActivity.getCurrentContext(),</span><br><span class="line">            <span class="string">&quot;Download Failed&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>onPreExecute()：任务执行之前在 UI 线程当中进行调用，通常用于进行一些界面的初始化工作，譬如显示一个进度条。</li>
<li>doInBackground(Params...)：必须实现的方法，在 onPreExecute() 方法执行完毕之后运行在子线程上，通常用于执行耗时任务，Params 参数将会传递至该方法。执行完任务之后将会通过 return 语句返回执行结果，如果 Result 设定为 Void 则可以不进行返回。同时在该方法中可以通过 publishProgress(Progress...) 方法对任务执行进度进行反馈。</li>
<li>onProgressUpdate(Progress...)：publishProgress(Progress...) 被调用之后执行在 UI 线程当中，在该方法中可以展示任务执行的进度及对进度进行更新，譬如可以对进度条进行动画处理。</li>
<li>onPostExecute(Result)：任务执行完之后的返回结果将会传递至该方法，可以利用返回的结果进行一些 UI 操作，譬如提醒任务执行的结果，该方法运行在 UI 线程中。</li>
</ul></li>
</ol>
<h2 id="asynctask-源码浅解">AsyncTask 源码浅解</h2>
<h3 id="执行过程图">执行过程图</h3>
<p><img src="https://raw.githubusercontent.com/ikroal/blog-images/master/AsyncTask-progress.png"></p>
<h3 id="执行过程">执行过程</h3>
<ol type="1">
<li>首先通过调用 execute(Params... params) 方法执行任务 内部执行了 executeOnExecutor(sDefaultExecutor, params)，sDefaultExecutor 是内部定义的 SerialExecutor 类的对象，主要的方法是 execute(final Runnable r) 用于启动一个线程。</li>
<li><p>executeOnExecutor(Executor exec, Params... params) 作为第一步中执行的方法，首先会判断任务的运行状态，如果是 PENDING 则表明没有运行，然后便会执行 onPreExecute() 方法，之后将 params 传递给 mWorker 对象，mWorker 是一个实现了 Callable 接口的 WorkerRunnable 对象，最后调用 exec.execute(mFuture) 去启动线程。其中 mWorker 和 mFuture 对象在构造函数中完成了初始化过程。mFuture 是一个实现了 RunnableFuture 接口的 FutureTask 对象，FutureTask 的 run() 方法将会调用 Callable 接口的 call() 方法。也即是说 exec.execute(mFuture) 调用了 mFuture 的 run() 方法从而调用了 mWorker 的 call() 方法。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//execute 的执行过程</span></span><br><span class="line">exec.execute(mFuture);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ArrayDeque&lt;Runnable&gt; mTasks = <span class="keyword">new</span> ArrayDeque&lt;Runnable&gt;();</span><br><span class="line">    Runnable mActive;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Runnable r)</span> </span>&#123;</span><br><span class="line">        mTasks.offer(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    r.run();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    scheduleNext();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (mActive == <span class="keyword">null</span>) &#123;</span><br><span class="line">            scheduleNext();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">scheduleNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((mActive = mTasks.poll()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            THREAD_POOL_EXECUTOR.execute(mActive);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mFuture 调用 mWorker.call() 的过程</span></span><br><span class="line">mFuture = <span class="keyword">new</span> FutureTask&lt;Result&gt;(mWorker)</span><br><span class="line"><span class="comment">//将 mWorker 保存至 mFuture 的 callable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FutureTask</span><span class="params">(Callable&lt;V&gt; callable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (callable == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">this</span>.callable = callable;</span><br><span class="line">    <span class="keyword">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (state != NEW ||</span><br><span class="line">        !U.compareAndSwapObject(<span class="keyword">this</span>, RUNNER, <span class="keyword">null</span>, Thread.currentThread()))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//callable 赋值给 c</span></span><br><span class="line">        Callable&lt;V&gt; c = callable;</span><br><span class="line">        <span class="keyword">if</span> (c != <span class="keyword">null</span> &amp;&amp; state == NEW) &#123;</span><br><span class="line">            V result;</span><br><span class="line">            <span class="keyword">boolean</span> ran;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//相当于调用 mWorker 的 call 方法</span></span><br><span class="line">                result = c.call();</span><br><span class="line">                ran = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                result = <span class="keyword">null</span>;</span><br><span class="line">                ran = <span class="keyword">false</span>;</span><br><span class="line">                setException(ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ran)</span><br><span class="line">                set(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// runner must be non-null until state is settled to</span></span><br><span class="line">        <span class="comment">// prevent concurrent calls to run()</span></span><br><span class="line">        runner = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// state must be re-read after nulling runner to prevent</span></span><br><span class="line">        <span class="comment">// leaked interrupts</span></span><br><span class="line">        <span class="keyword">int</span> s = state;</span><br><span class="line">        <span class="keyword">if</span> (s &gt;= INTERRUPTING)</span><br><span class="line">            handlePossibleCancellationInterrupt(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>执行完上述两步之后 mWorker.call() 得到了调用，任务开始启动。 在 call() 方法中调用了 doInBackground(mParams) 并将结果保存在 result 变量当中，然后在 postResult(result) 中通过 getHandler() 获取到 InternalHandler 对象，通过 obtainMessage() 方法将结果发送出去，之后在 handleMessage(Message msg) 中调用了 finish() 方法。finish() 方法中最终调用了 onPostExecute(result) 方法。 如果在 doInBackground(mParams) 调用了 publishProgress(Progress... values)，则在 publishProgress(Progress... values) 中也会通过 getHandler() 发送 Message，然后在 handleMessage(Message msg) 中调用 onProgressUpdate(Progress... values) 方法。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Result <span class="title">postResult</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</span><br><span class="line">            <span class="keyword">new</span> AsyncTaskResult&lt;Result&gt;(<span class="keyword">this</span>, result));</span><br><span class="line">    message.sendToTarget();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WorkerThread</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">publishProgress</span><span class="params">(Progress... values)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isCancelled()) &#123;</span><br><span class="line">        getHandler().obtainMessage(MESSAGE_POST_PROGRESS,</span><br><span class="line">                <span class="keyword">new</span> AsyncTaskResult&lt;Progress&gt;(<span class="keyword">this</span>, values)).sendToTarget();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">    AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</span><br><span class="line">    <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">        <span class="keyword">case</span> MESSAGE_POST_RESULT:</span><br><span class="line">            <span class="comment">// There is only one result</span></span><br><span class="line">            result.mTask.finish(result.mData[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MESSAGE_POST_PROGRESS:</span><br><span class="line">            result.mTask.onProgressUpdate(result.mData);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isCancelled()) &#123;</span><br><span class="line">        onCancelled(result);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        onPostExecute(result);</span><br><span class="line">    &#125;</span><br><span class="line">    mStatus = Status.FINISHED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
</ol>
<hr>
<p>​</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>SourceCode Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 基础之 LayoutInflater 总结</title>
    <url>/posts/63cc5c0e.html</url>
    <content><![CDATA[<h4 id="layoutinflater-的获取">LayoutInflater 的获取</h4>
<p>获取 LayoutInflater 的方式一般有三种：</p>
<ol type="1">
<li>getLayoutInflater()</li>
<li>LayoutInflater.from(Context context)</li>
<li>context.getSystemService(Context.LAYOUT_INFLATER_SERVICE)</li>
</ol>
<p>这三种获取方式本质上都是一样的</p>
<ul>
<li><p>getLayoutInflater() 通过 getWindow().getLayoutInflater() 进行获取，getWindow() 获取的是 PhoneWindow，然后 PhoneWindow 通过 mLayoutInflater = LayoutInflater.from(context) 获取 LayoutInflater。</p></li>
<li><p>LayoutInflater.from(Context context) 内部通过以下代码获取 LayoutInflater。<span id="more"></span></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LayoutInflater <span class="title">from</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    LayoutInflater LayoutInflater =</span><br><span class="line">            (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</span><br><span class="line">    <span class="keyword">if</span> (LayoutInflater == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">&quot;LayoutInflater not found.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> LayoutInflater;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
</ul>
<p><strong>结论：所以这三种方式最终都调用了 Context.getSystemService()</strong></p>
<h4 id="layoutinflater-的-inflater-方法">LayoutInflater 的 inflater 方法</h4>
<p>inflater 作为 LayoutInflater 中最常用的方法，用于从 xml 的布局文件得到一个 View 对象，加载到 Activity 用于动态创建布局。inflater 总共重载了 4 种调用方式： 1. public View inflate(<span class="citation" data-cites="LayoutRes">@LayoutRes</span> int resource, <span class="citation" data-cites="Nullable">@Nullable</span> ViewGroup root) 2. public View inflate(<span class="citation" data-cites="LayoutRes">@LayoutRes</span> int resource, <span class="citation" data-cites="Nullable">@Nullable</span> ViewGroup root, boolean attachToRoot) 3. public View inflate(XmlPullParser parser, <span class="citation" data-cites="Nullable">@Nullable</span> ViewGroup root) 4. public View inflate(XmlPullParser parser, <span class="citation" data-cites="Nullable">@Nullable</span> ViewGroup root, boolean attachToRoot)</p>
<p>对于构造函数的使用而言，有如下注意事项：</p>
<ul>
<li>root 填充的根视图</li>
<li>attachToRoot 决定是否将载入的视图附加到根视图上，如果为 false 则仅用于为 XML 中的根视图创建正确的 LayoutParams 的子类</li>
<li>前三个 inflater 方法最终都会调用第四个 inflater 方法，采用了 pull 解析</li>
<li>避免将 null 作为 ViewGroup 传入</li>
<li>当不需要将返回的 View 添加入 ViewGroup 时应该设置attachToRoot 为 false</li>
<li>避免在 View 已经被添加入 ViewGroup 时将 attachToRoot 设置为 True</li>
<li>自定义 View 时非常适合将 attachToRoot 设置为 True</li>
</ul>
<h4 id="layoutinflater-基本使用">LayoutInflater 基本使用</h4>
<p>由于 LayoutInflater 主要用于布局填充，所以主要涉及到的是 inflater 方法，inflater 返回了一个 View，其调用方式是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</span><br><span class="line">View view = inflater.inflate(R.layout.first_fragment, container, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="参考资料">参考资料</h4>
<ol type="1">
<li><span class="exturl" data-url="aHR0cDovL2Jsb2cuY2hlbmdkYXpoaS5jb20vaW5kZXgucGhwLzExMA==">深入理解 LayoutInflater.inflate()<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VvbGluX2Jsb2cvYXJ0aWNsZS9kZXRhaWxzLzEyOTIxODg5Lw==">Android LayoutInflater 原理分析，带你一步步深入了解 View (一)<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy4yY3RvLmNvbS9rZi8yMDE0MDcvMzEzMDU0Lmh0bWw=">LayoutInflater——80%的Android程序员对它并不了解甚至错误使用<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Android View</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 基础之 Service</title>
    <url>/posts/cbbb364f.html</url>
    <content><![CDATA[<h4 id="service-的含义及作用">Service 的含义及作用</h4>
<p>Service 是一个可以在后台执行长时间运行操作而不需要提供用户界面的应用组件，也就是说 Service 是为了去处理那些不需要和用户交互但又耗时的操作。但是如果 Service 只是为了执行那些耗时的操作的话，其实只用线程也可以达到同样的目的，之所以需要单独用 Service 来进行实现的原因在于 Service 相较之线程而言优先级比较高，并且 Service 通过绑定启动的时候是可控的，如果系统不是极端不够用，一般而言是不会杀死 Service，但是线程可能存在被系统回收的可能性，所以 Service 的可靠性要比线程高。<span id="more"></span> 另外关于 Service，官网上还有如下的提示： &gt; 服务在其托管进程的主线程中运行，它既不创建自己的线程，也不在单独的进程中运行（除非另行指定）。 这意味着，如果服务将执行任何 CPU 密集型工作或阻止性操作（例如 MP3 播放或联网），则应在服务内创建新线程来完成这项工作。通过使用单独的线程，可以降低发生“应用无响应”(ANR) 错误的风险，而应用的主线程仍可继续专注于运行用户与 Activity 之间的交互</p>
<h4 id="service-的生命周期">Service 的生命周期</h4>
<p>Service 的生命周期主要和服务的使用方式有关，使用服务主要分为启动和绑定两种方式，其生命周期如下图所示： <img src="https://raw.githubusercontent.com/ikroal/blog-images/master/service-life-cycle.png"></p>
<h4 id="service-的基本使用">Service 的基本使用</h4>
<ol type="1">
<li>创建服务 系统提供了一个 Service 抽象类，所以我们自己实现一个继承自 Service 的类，然后在 AndroidManifest.xml 注册即可。</li>
<li>运行服务 运行服务主要方法有两种，一种是调用 startService()，第二种则是 bindService()。实际上这两个方法可以同时调用。</li>
<li>服务中处理事件 startService 启动服务，事件的处理一般在服务的 onStartCommand 方法进行的，bindService 绑定服务之后，将会在 ServiceConnection 的 onServiceConnected 中返回一个 Binder 对象，利用返回的 Binder 对象可以调用相关的事件处理方法。</li>
<li>停止服务 服务的运行条件是服务被绑定或者被启动，所以想让服务不运行则需要破坏这两个条件，可以通过调用 stopService 和 unbindService 实现。</li>
</ol>
<hr>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Android Service</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 自定义 View 和 ViewGroup 简要总结</title>
    <url>/posts/961c13ef.html</url>
    <content><![CDATA[<h2 id="主要方法及作用">主要方法及作用</h2>
<ol type="1">
<li>自定义 ViewGroup 主要涉及的方法如下：
<ul>
<li>onMeasure() 计算 childView 的测量值以及模式，以及设置自己的宽和高。</li>
<li>onLayout() 对所有 childView 进行定位。</li>
</ul></li>
<li>自定义 View 主要涉及的方法如下：
<ul>
<li>onMeasure() 测量 View 的宽和高。</li>
<li>onDraw() 将 View 绘制到屏幕上。</li>
</ul></li>
</ol>
<span id="more"></span>
<h2 id="测量模式">测量模式</h2>
<p>onMeasure() 过程和测量模式相关，而测量模式分为三种：</p>
<ol type="1">
<li>UNSPECIFIED：父容器不对 View 有任何限制，要多大给多大。这种情况一般用于系统内部。</li>
<li>EXACTLY：父容器已经检测出 View 所需要的精确大小，这个时候 View 的最终大小就是 SpecSize 所指定的值。它对应 LayoutParams 中的 mactch_parent 和具体数值这两种模式。</li>
<li>AT_MOST 父容器指定了一个可用大小即 SpecSize，View 的大小不能大于这个值，具体值看不同 View 的具体实现。它对应于 LayoutParams 中的 wrap_content。</li>
</ol>
<h2 id="layoutparams-和-generatelayoutparams">LayoutParams 和 generateLayoutParams</h2>
<p>LayoutParams的官方文档解释如下：</p>
<blockquote>
<p>1.LayoutParams are used by views to tell their parents how they want to be laid out. -- LayoutParams 是 View 用来告诉它的父控件如何放置自己的。</p>
<p>2.The base LayoutParams class just describes how big the view wants to be for both width and height. -- 基类 LayoutParams（也就是 ViewGroup.LayoutParams）仅仅描述了这个 View 想要的宽度和高度。</p>
<p>3.There are subclasses of LayoutParams for different subclasses of ViewGroup. -- 不同 ViewGroup 的继承类对应着不同的 ViewGroup.LayoutParams 的子类。</p>
</blockquote>
<p>generateLayoutParams官方文档解释如下：</p>
<blockquote>
<p>Returns a new set of layout parameters based on the supplied attributes set. -- 根据提供的属性集返回一组新的布局参数。</p>
</blockquote>
<p>在 addView() 的执行过程当中，如果 checkLayoutParams() 检测到传递过来的 LayoutParams 不是对应布局的 LayoutParam，则会通过 generateLayoutParams() 根据你传递的 LayoutParams 的属性构造一个对应布局的 LayoutParams。</p>
<hr>
<h2 id="参考资料">参考资料</h2>
<ol type="1">
<li><span class="exturl" data-url="aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbG1qNjIzNTY1NzkxL2FydGljbGUvZGV0YWlscy8zODMzOTgxNy8=">Android 手把手教您自定义ViewGroup（一）<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5qaWFuc2h1LmNvbS9wLzJhOTM4ZTU5OGVjOA==">自定义控件知识储备-LayoutParams的那些事<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Custom View</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 自定义控件之百分比圆环</title>
    <url>/posts/a4343d1d.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>最近做一个简单的测试 APP 的时候需要将手机的存储空间使用情况显示出来，刚好看见 360 清理大师的存储空间是以百分比圆环的方式实现的，所以大致模仿了一下它的实现过程。<span id="more"></span></p>
<h2 id="效果图">效果图</h2>
<p>首先放上效果图，然后我们再根据效果图进行分析 <img src="https://raw.githubusercontent.com/ikroal/blog-images/master/ring-origin-result.png"></p>
<h2 id="实现思路">实现思路</h2>
<p>从上图我们可以看到，绘制一个这样的百分比圆环主要有涉及到三个元素：</p>
<ol type="1">
<li>背景空心圆：代表着总的进度</li>
<li>圆弧：代表着当前进度</li>
<li>文字：需要居中，表示具体的进度</li>
</ol>
<p>在了解到涉及到的元素之后，我们还需要了解绘制各个元素需要哪些参数，由于绘制都通过 onDraw 方法中的 canvas 对象，所以我们可以通过 canvas 对象的方法去确定所需要的参数。</p>
<ul>
<li>绘制圆：查看 drawCircle 可以知道总共需要四个参数：<strong>圆心 X、Y 坐标、半径长度以及画笔 Paint</strong>；</li>
<li>绘制圆弧：查看 drawArc 可以知道总共需要四个参数：<strong>Recf、圆弧的起始角度、从起始角度顺时针扫过的角度以及必须的 Paint</strong>，这里的 Recf 确定了一个矩形区域，然后确定了一个内接椭圆，而圆弧的绘制实际上是在椭圆上面进行截取；</li>
<li>绘制文本：查看 drawText 可以知道，需要四个参数：<strong>文本内容、进行绘制的 X、Y 坐标点以及Paint</strong>。</li>
</ul>
<h2 id="实现过程">实现过程</h2>
<p>在了解了绘制元素所需要的参数，这个时候就可以一步步进行绘制了：</p>
<ol type="1">
<li><p>首先是绘制圆，这里我们定义了四个参数分别表示圆心 X，Y 的坐标、半径以及绘制所需要的画笔，然后对这些参数进行初始化，最终在 onDraw 进行绘制。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RingPercentDemo</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mCircleX;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mCircleY;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mRadius;</span><br><span class="line">    <span class="keyword">private</span> Paint mCirclePaint;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RingPercentDemo</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RingPercentDemo</span><span class="params">(Context context,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Nullable</span> AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        mCircleX = <span class="number">300</span>;</span><br><span class="line">        mCircleY = <span class="number">300</span>;</span><br><span class="line">        mRadius = <span class="number">260</span>;</span><br><span class="line">        mCirclePaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        mCirclePaint.setColor(Color.BLUE);</span><br><span class="line">        mCirclePaint.setStrokeWidth(<span class="number">10</span>);</span><br><span class="line">        mCirclePaint.setStyle(Style.STROKE); <span class="comment">//绘制空心圆所以不需要填充</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line"></span><br><span class="line">        canvas.drawCircle(mCircleX, mCircleY, mRadius, mCirclePaint);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>接下来是绘制圆环，从效果图上可以看出来，圆环实际上是在圆上截取一段圆弧表示，所以绘制圆环的矩形区域可以确定下来，在确定了矩形区域之后只需要自己设定起始的角度和扫过的角度即可以绘制出在圆上的圆弧。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RingPercentDemo</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> RectF mRecF;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mStartAngle;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mSweepAngle;</span><br><span class="line">    <span class="keyword">private</span> Paint mRingPaint;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RingPercentDemo</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RingPercentDemo</span><span class="params">(Context context,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Nullable</span> AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        mRecF = <span class="keyword">new</span> RectF(mCircleX - mRadius, mCircleY - mRadius,</span><br><span class="line">            mCircleX + mRadius, mCircleY + mRadius);</span><br><span class="line">        mStartAngle = -<span class="number">90f</span>;</span><br><span class="line">        mSweepAngle = <span class="number">120f</span>;</span><br><span class="line">        mRingPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        mRingPaint.setColor(Color.RED);</span><br><span class="line">        mRingPaint.setStrokeWidth(<span class="number">20</span>);</span><br><span class="line">        mRingPaint.setStyle(Style.STROKE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">        canvas.drawArc(mRecF, mStartAngle, mSweepAngle,</span><br><span class="line">            <span class="keyword">false</span>, mRingPaint); <span class="comment">//设置为 false 不与中心点进行连接</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>最后是绘制文本，由于要绘制在圆的中心，所以文本的坐标我们首先设置为圆的中心，然后绘制的风格选为 Align.CENTER，这样文本将以设定的坐标点向两边延伸保证了 X 处于中心位置。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RingPercentDemo</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTextX;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTextY;</span><br><span class="line">    <span class="keyword">private</span> Paint mTextPaint;</span><br><span class="line">    <span class="keyword">private</span> String mTextStr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RingPercentDemo</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RingPercentDemo</span><span class="params">(Context context,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Nullable</span> AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        mTextPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        mTextPaint.setColor(Color.BLACK);</span><br><span class="line">        mTextPaint.setStyle(Style.FILL);</span><br><span class="line">        mTextPaint.setTextSize(<span class="number">40</span>);</span><br><span class="line">        mTextPaint.setTextAlign(Align.CENTER);</span><br><span class="line">        mTextPaint.setTextSize(mRadius / <span class="number">2</span>);</span><br><span class="line">        mTextX = mCircleX;</span><br><span class="line">        mTextY = mCircleY;</span><br><span class="line">        mTextStr = <span class="string">&quot;33%&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">        canvas.drawText(mTextStr, mTextX, mTextY, mTextPaint);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 实际效果图： <img src="https://i.imgur.com/9ZYvei1.jpg" alt="tips1"> 这个时候我们能够发现文本实质上不在中心位置，这是为什么呢？因为我们在设定的坐标是用于确定绘制的<strong>基准线</strong>而不是绘制的中心点，所以自然文本不可能绘制在正中心，具体可以借用下图来进行描述： <img src="https://i.imgur.com/vOewNzN.jpg"> 从这就可以很明显的看到，文本的中心和设定的坐标之间是存在一个偏移量的，所以为了使文本处于真正的中心，我们需要计算得到这个偏移量，然后将之前设定的基准线下移。在计算偏移量之前首先需要了解字体是如何进行测量的，具体如下图所示： <img src="https://i.imgur.com/xwZqHv9.jpg"> 其中 Top 表示基准线以上可绘制的最大距离（负数），Bottom 表示基准线以下可绘制的最大距离（正数），Ascent 表示基准线以上推荐的可绘制的距离，Descent 表示基准线以下推荐的可绘制的距离。 了解完这一切之后如何计算偏移量就很简单了，通过 FontMetrics 获取 Bottom 和 Top，然后通过 ((Bottom - Top) / 2) - Bottom 最终取得偏移量。代码做如下修改：</p></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RingPercentDemo</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTextX;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTextY;</span><br><span class="line">    <span class="keyword">private</span> Paint mTextPaint;</span><br><span class="line">    <span class="keyword">private</span> String mTextStr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RingPercentDemo</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RingPercentDemo</span><span class="params">(Context context,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Nullable</span> AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        FontMetrics fontMetrics = mTextPaint.getFontMetrics();</span><br><span class="line">        <span class="keyword">float</span> offsetY = ((fontMetrics.bottom - fontMetrics.top) / <span class="number">2</span>) - fontMetrics.bottom;</span><br><span class="line">        mTextY = (<span class="keyword">int</span>) (mCircleY + offsetY);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改之后的效果： <img src="https://i.imgur.com/M9hzVs4.jpg" alt="tip2"></p>
<h2 id="改进">改进</h2>
<h3 id="自定义属性">自定义属性</h3>
<p>经过上述过程，虽然圆环百分比的效果已经实现，但是跟效果图中的还是差的很远，而且也不能够灵活，所以我们需要借助自定义属性去改进我们的圆环。</p>
<ol type="1">
<li><p>首先需要在 values 文件夹下创建 attrs.xml 文件在里面声明我们需要定义的属性： <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">&quot;RingPercentDemo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">&quot;integer&quot;</span> <span class="attr">name</span>=<span class="string">&quot;radius&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">&quot;color&quot;</span> <span class="attr">name</span>=<span class="string">&quot;circleColor&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">&quot;integer&quot;</span> <span class="attr">name</span>=<span class="string">&quot;circleStrokeWidth&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">&quot;integer&quot;</span> <span class="attr">name</span>=<span class="string">&quot;circleStyle&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">&quot;color&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ringColor&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">&quot;integer&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ringStrokeWidth&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">&quot;integer&quot;</span> <span class="attr">name</span>=<span class="string">&quot;startAngle&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">&quot;integer&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sweepAngle&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">&quot;integer&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rate&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>然后在构造函数获取到自定义的属性的属性值</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RingPercentDemo</span><span class="params">(Context context,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Nullable</span> AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line"></span><br><span class="line">        TypedArray typedArray = context.obtainStyledAttributes(</span><br><span class="line">            attrs, R.styleable.RingPercentDemo);</span><br><span class="line"></span><br><span class="line">        mRadius = typedArray.getInteger(R.styleable.RingPercentDemo_radius, <span class="number">60</span>);</span><br><span class="line">        mCircleColor = typedArray.getColor(</span><br><span class="line">            R.styleable.RingPercentDemo_circleColor, Color.GREEN);</span><br><span class="line">        mCircleStrokeWidth = typedArray.getInteger(</span><br><span class="line">            R.styleable.RingPercentDemo_circleStrokeWidth, <span class="number">5</span>);</span><br><span class="line">        mCircleStyle = typedArray.getInteger(</span><br><span class="line">            R.styleable.RingPercentDemo_circleStyle, <span class="number">0</span>);</span><br><span class="line">        mRingColor = typedArray.getColor(</span><br><span class="line">            R.styleable.RingPercentDemo_ringColor, Color.RED);</span><br><span class="line">        mRingStrokeWidth = typedArray.getColor(</span><br><span class="line">            R.styleable.RingPercentDemo_ringStrokeWidth, <span class="number">10</span>);</span><br><span class="line">        mStartAngle = typedArray.getInteger(</span><br><span class="line">            R.styleable.RingPercentDemo_startAngle, -<span class="number">90</span>);</span><br><span class="line">        mSweepAngle = typedArray.getInteger(</span><br><span class="line">            R.styleable.RingPercentDemo_sweepAngle, <span class="number">90</span>);</span><br><span class="line">        mRate = typedArray.getInteger(R.styleable.RingPercentDemo_rate, <span class="number">100</span>);</span><br><span class="line">        typedArray.recycle();</span><br><span class="line"></span><br><span class="line">        init();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>在获取到这些属性值之后只需要给对应的 Paint 和变量设置对应的值即可。</p></li>
</ol>
<h3 id="固定圆心和动态变化">固定圆心和动态变化</h3>
<ol type="1">
<li><p>圆心的位置我们希望能够一直处于 View 的中心，所以需要重写 onMeasure 方法，在 onMeasure 方法通过获取 View 的高度和宽度得到了 View 的中心点坐标，从而使得圆心一直在 View 的中心。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">    setMeasuredDimension(measuse(widthMeasureSpec), measuse(heightMeasureSpec));</span><br><span class="line"></span><br><span class="line">    mCircleX = getMeasuredWidth() / <span class="number">2</span>;</span><br><span class="line">    mCircleY = getMeasuredHeight() / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断设定的圆是否超出显示范围，如果超出需要缩小</span></span><br><span class="line">    <span class="keyword">if</span> (mCircleX &lt; mRadius) &#123;</span><br><span class="line">        mRadius = mCircleX - mCircleStrokeWidth - mRingStrokeWidth;</span><br><span class="line">        mTextPaint.setTextSize(mRadius / <span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mCircleY &lt; mRadius) &#123;</span><br><span class="line">        mRadius = mCircleY - mCircleStrokeWidth - mRingStrokeWidth;</span><br><span class="line">        mTextPaint.setTextSize(mRadius / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FontMetrics fontMetrics = mTextPaint.getFontMetrics();</span><br><span class="line">    <span class="keyword">int</span> offsetY = (<span class="keyword">int</span>) (((fontMetrics.bottom - fontMetrics.top)) / <span class="number">2</span> - fontMetrics.bottom);</span><br><span class="line">    mTextX = mCircleX;</span><br><span class="line">    mTextY = mCircleY + offsetY;</span><br><span class="line"></span><br><span class="line">    mRecF = <span class="keyword">new</span> RectF(mCircleX - mRadius, mCircleY - mRadius,</span><br><span class="line">        mCircleX + mRadius, mCircleY + mRadius);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>在解决了圆心的问题之后，还需要为圆弧提供动态变化的效果，这里可以通过不断重绘达成目标。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line"></span><br><span class="line">    canvas.drawCircle(mCircleX, mCircleY, mRadius, mCirclePaint);</span><br><span class="line">    canvas.drawArc(mRecF, mStartAngle, mCurrentAngle, <span class="keyword">false</span>, mRingPaint);</span><br><span class="line">    canvas.drawText(mTextStr, mTextX, mTextY, mTextPaint);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mCurrentAngle &lt; mSweepAngle) &#123;</span><br><span class="line">        mCurrentAngle += <span class="number">3.6</span>;</span><br><span class="line">        mTextStr = mCurrentAngle * <span class="number">100</span> / <span class="number">360</span> + <span class="string">&quot;%&quot;</span>;</span><br><span class="line">        postInvalidateDelayed(mRate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
</ol>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZpcnN0ZHJlYW0xMC9SaW5nUGVyY2VudA==">相关测试工程<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="总结">总结</h2>
<p>涉及到 View 的绘制需要对元素进行拆分，然后进行单独处理，这样思路会比较清晰</p>
<h2 id="thanks">Thanks</h2>
<ol type="1">
<li><span class="exturl" data-url="aHR0cDovL3d3dy5jbmJsb2dzLmNvbS9zbGdrYWlmYS9wLzcxMDEyOTcuaHRtbA==">android canvas drawText()文字居中<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbnVnb25nYWhvdTExMC9hcnRpY2xlL2RldGFpbHMvNDkxNTkxODk=">Android自定义控件之百分比圆环进度条<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Custom View</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 TabLayout 和 ToolBar 实现滑动标签页</title>
    <url>/posts/e7af30cb.html</url>
    <content><![CDATA[<p>最近在实现便签滑动页的时候突然发现 ActionBar 已经不被官方推荐使用，比较好的一个方法就是利用 ToolBar 和 TabLayout 来实现，以下是实现步骤：<span id="more"></span></p>
<ul>
<li>TalLayout 是 Android Support Design 中的一个控件，在使用之前需要在 build.gradle 文件中添加<code>compile'com.android.support:design:23.2.0'</code> 才能够正常使用。</li>
<li><p>对 values 中的 style 文件进行设置以屏蔽 Activity 的 ActionBar，让主题继承于 NoActionBar，如果需要改变 Acitivity 的背景颜色设置 <code>windowBackground</code> 即可： <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Base application theme. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;AppTheme&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;Theme.AppCompat.NoActionBar&quot;</span>&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;colorPrimary&quot;</span>&gt;</span>@color/material_blue_grey_800<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--Status bar color--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;colorPrimaryDark&quot;</span>&gt;</span>@color/accent_material_light<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--Window color--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;colorAccent&quot;</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>由于需要实现标签页的滑动效果所以需要用到 ViewPager ，加上 TabLayout 和 TooBar 基本的布局如下： <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/topToolBar&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingTop</span>=<span class="string">&quot;@dimen/bar_top_padding&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.TabLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/tabLayout&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_below</span>=<span class="string">&quot;@id/topToolBar&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:tabSelectedTextColor</span>=<span class="string">&quot;#3da6a2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:tabTextColor</span>=<span class="string">&quot;#817f7f&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">android.support.design.widget.TabLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/viewPager&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_below</span>=<span class="string">&quot;@id/tabLayout&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">android.support.v4.view.ViewPager</span>&gt;</span></span><br></pre></td></tr></table></figure> 其中 TabLayout 中<code>tabSelectedTextColor</code> 用于设置选中Tab的字体颜色，<code>tabTextColor</code> 用于设置未选中的Tab字体的颜色，Toolbar 中设置 <code>paddingTop</code> 主要用于4.4中沉浸式状态栏的适配，防止 ToolBar 和状态栏重合。</p></li>
<li>之后是为 ToolBar 设置各种属性创建 FramePagerAdapter，对 ViewPager 和 TabLayout 设置监听事件： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bar_Activity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    Toolbar topToolBar;</span><br><span class="line">    TabLayout tabLayout;</span><br><span class="line">    ViewPager viewPager;</span><br><span class="line">    FragmentPagerAdapter pagerAdapter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_bar_);</span><br><span class="line"></span><br><span class="line">        init();</span><br><span class="line">        topToolBar.setTitle(<span class="string">&quot;BarDemo&quot;</span>);</span><br><span class="line">        setSupportActionBar(topToolBar);</span><br><span class="line">        <span class="comment">/*设置状态栏为透明*/</span></span><br><span class="line">        WindowManager.LayoutParams layoutParams = getWindow().getAttributes();</span><br><span class="line">        layoutParams.flags = (WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS | layoutParams.flags);</span><br><span class="line">        getSupportActionBar().setDisplayHomeAsUpEnabled(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//遍历FragmentPagerAdapter为TabLayout添加Tab</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pagerAdapter.getCount(); i++) &#123;</span><br><span class="line">            tabLayout.addTab(</span><br><span class="line">                    tabLayout.newTab().setText(pagerAdapter.getPageTitle(i)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//为ViewPager设置适配器</span></span><br><span class="line">        viewPager.setAdapter(pagerAdapter);</span><br><span class="line">        <span class="comment">//为viewPager设置监听事件，当frame改变时更改Tab</span></span><br><span class="line">        viewPager.addOnPageChangeListener(</span><br><span class="line">                <span class="keyword">new</span> TabLayout.TabLayoutOnPageChangeListener(tabLayout));</span><br><span class="line">        <span class="comment">//为tabLayout设置监听事件，当选中tab的时候切换frame</span></span><br><span class="line">        tabLayout.setOnTabSelectedListener(<span class="keyword">new</span> TabLayout.OnTabSelectedListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTabSelected</span><span class="params">(TabLayout.Tab tab)</span> </span>&#123;</span><br><span class="line">                viewPager.setCurrentItem(tab.getPosition());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTabUnselected</span><span class="params">(TabLayout.Tab tab)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTabReselected</span><span class="params">(TabLayout.Tab tab)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        topToolBar.setNavigationIcon(R.drawable.ic_account_circle_white_24dp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        topToolBar = (Toolbar) findViewById(R.id.topToolBar);</span><br><span class="line">        tabLayout = (TabLayout) findViewById(R.id.tabLayout);</span><br><span class="line">        viewPager = (ViewPager) findViewById(R.id.viewPager);</span><br><span class="line">        topToolBar.setBackgroundColor(Color.parseColor(<span class="string">&quot;#1aae98&quot;</span>));</span><br><span class="line">        tabLayout.setBackgroundColor(Color.GRAY);</span><br><span class="line">        <span class="comment">//创建针对ViewPager的FragmentPagerAdapter</span></span><br><span class="line">        pagerAdapter = <span class="keyword">new</span> FragmentPagerAdapter(getSupportFragmentManager()) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">                Fragment tabFragment = <span class="keyword">new</span> TabFragment();</span><br><span class="line">                Bundle args = <span class="keyword">new</span> Bundle();</span><br><span class="line">                args.putInt(TabFragment.FLAG_TAB, position + <span class="number">1</span>);</span><br><span class="line">                tabFragment.setArguments(args);</span><br><span class="line">                <span class="keyword">return</span> tabFragment;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> CharSequence <span class="title">getPageTitle</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">switch</span> (position) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">&quot;tab1&quot;</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">&quot;tab2&quot;</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">&quot;tab3&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置 toolBar 右上角的菜单项</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        getMenuInflater().inflate(R.menu.menu, menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>最后看下 menu 文件 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">&quot;@+id/search_item&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">&quot;search&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/ic_search_white_24dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:actionViewClass</span>=<span class="string">&quot;android.support.v7.widget.SearchView&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">&quot;ifRoom|collapseActionView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure> 最终实现效果如图所示： <img src="http://i.imgur.com/0Al9ghD.gif"></p></li>
</ul>
<hr>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Custom View</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 视图设计用户界面</title>
    <url>/posts/e40a645f.html</url>
    <content><![CDATA[<h4 id="基本视图">基本视图</h4>
<ol type="1">
<li><code>ToggleButton</code>，<code>RadioButton</code>，<code>RadioGroup</code>，<code>AutoCompleteTextView</code></li>
<li><p><code>ToggleButton</code> 用一个灯光指示器来显示选中/未选中状态 <span id="more"></span> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ToggleButton</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/toggle1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_below</span>=<span class="string">&quot;@id/rdbGp1&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></p></li>
<li><code>RadioButton</code> 和 <code>RaidoGroup</code>
<ul>
<li><code>RadioButton</code> 有两个状态：选中或未选中。</li>
<li><code>RaidoGroup</code> 用来把一个或多个 <code>RaidoButton</code> 视图组合在一起，从而只允许一个 <code>RaidoButton</code> 被选中。 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RadioGroup</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/rdbGp1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;fill_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_below</span>=<span class="string">&quot;@id/star&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">RadioButton</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/rdb1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Option 1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">RadioButton</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/rdb2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Option 2&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RadioGroup</span>&gt;</span></span><br></pre></td></tr></table></figure> 视图效果如下： <img src="http://i.imgur.com/DymvRLO.png"></li>
</ul></li>
<li><p><code>AutoCompleteTextView</code>：与 <code>EditText</code> 类似，输入时提供候选项 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">AutoCompleteTextView</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:id</span>=<span class="string">&quot;@+id/txtCountries&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_alignParentStart</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_below</span>=<span class="string">&quot;@+id/textView&quot;</span> /&gt;</span>    </span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayAdapter&lt;String&gt; adapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>, android.R.layout.simple_dropdown_item_1line,presidents);<span class="comment">//创建容器</span></span><br><span class="line">AutoCompleteTextView textView = (AutoCompleteTextView) findViewById(R.id.txtCountries);</span><br><span class="line">   textView.setThreshold(<span class="number">3</span>);</span><br><span class="line">   textView.setAdapter(adapter);<span class="comment">//设置候选项</span></span><br></pre></td></tr></table></figure></p>
<p>视图效果：</p>
<p><img src="http://i.imgur.com/QVPfnAW.png"></p></li>
<li><p><code>CheckBox</code>，<code>RadioButton</code> 视图事件</p>
<ul>
<li><p><code>CheckBox</code>：需将 <code>onClick()</code> 方法的参数类型转换为一个<code>CheckBox</code> ，然后检查 <code>isCheckBox()</code> 方法来确定其是否被选中</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CheckBox checkBox = (CheckBox)findViewById(R.id.chkAutosave);</span><br><span class="line">checkBox.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (((CheckBox) v).isChecked())</span><br><span class="line">          DisplayToast(<span class="string">&quot;CheckBox is checked&quot;</span>);</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">      DisplayToast(<span class="string">&quot;CheckBox is unchecked&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></li>
<li><p><code>RadioButton</code>：需要使用 <code>RadioGroup</code> 的 <code>setOnCheckedChangeListener()</code> 方法注册一个回调函数, 以便该组中的被选中的 <code>RadioButton</code> 发生变化的时候调用。</p>
<h2 id="section"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RadioGroup radioGroup = (RadioGroup)findViewById(R.id.rdbGp1);</span><br><span class="line">radioGroup.setOnCheckedChangeListener(<span class="keyword">new</span> OnCheckedChangeListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCheckedChanged</span><span class="params">(RadioGroup group, <span class="keyword">int</span> checkedId)</span> </span>&#123;</span><br><span class="line">   RadioButton rb1 = (RadioButton) findViewById(R.id.rdb1);</span><br><span class="line">            <span class="keyword">if</span> (rb1.isChecked()) &#123;</span><br><span class="line">                 DisplayToast(<span class="string">&quot;Option 1 checked&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 DisplayToast(<span class="string">&quot;Option 2 checked&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></h2></li>
</ul></li>
</ol>
<h4 id="列表视图">列表视图</h4>
<ol type="1">
<li><code>ListView</code>,<code>Spinner</code>
<ul>
<li><p><code>ListView</code>：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">setListAdapter(<span class="keyword">new</span> ArrayAdapter&lt;String&gt;(</span><br><span class="line"><span class="keyword">this</span>,android.R.layout.simple_list_item_checked, presidents));<span class="comment">//设置列表项</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onListItemClick</span><span class="params">(ListView parent, View v, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line"> Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;you have selected:&quot;</span> + presidents[position], Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>getListView()</code> 获取当前的列表视图，只有当前 <code>Activity</code> 继承 <code>ListAcitvity</code> 时才能用。</p></li>
<li><p><code>Spinner</code>：</p>
<p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Spinner</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:id</span>=<span class="string">&quot;@+id/spinner&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:drawSelectorOnTop</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>设置列表和判断选择</p>
<h2 id="section-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> Spinner spinner = (Spinner) findViewById(R.id.spinner);</span><br><span class="line"> ArrayAdapter&lt;String&gt; adapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>,</span><br><span class="line">android.R.layout.simple_spinner_item, prisidents);</span><br><span class="line"> spinner.setAdapter(adapter);<span class="comment">//设置列表项</span></span><br><span class="line"> spinner.setOnItemSelectedListener(<span class="keyword">new</span> OnItemSelectedListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemSelected</span><span class="params">(AdapterView&lt;?&gt; parent, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> index = parent.getSelectedItemPosition();</span><br><span class="line">  Toast.makeText(BasicViews6Activity.<span class="keyword">this</span>, <span class="string">&quot;you have selected item :&quot;</span> + prisidents[index], Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNothingSelected</span><span class="params">(AdapterView&lt;?&gt; parent)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> &#125;);<span class="comment">//判断哪一项被选择了</span></span><br></pre></td></tr></table></figure></h2></li>
</ul></li>
</ol>
<h4 id="特殊碎片">特殊碎片</h4>
<ol type="1">
<li><p><code>ListFragment</code>，<code>DialogFrament</code>，<code>PerferenceFragment</code> 要使用 <code>ListFragment</code> 首先需要创建一个 <code>ListFragment</code> 的类 (<code>fragmnet1</code>)，创建一个关于 <code>fragment1</code> 的视图，在 Activity 的 Layout 中声明碎片。在 Activity 中显示于 <code>fragment1</code> 的视图，可以使用 <code>FragmentManger</code> 和 <code>FragmentTransaction</code> 类；</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FragmentManager fragmentManager = getFragmentManager();</span><br><span class="line">FragmentTransaction fragmentTransaction =</span><br><span class="line">  fragmentManager.beginTransaction();</span><br><span class="line">Fragment1 fragment1 = <span class="keyword">new</span> Fragment1();</span><br><span class="line">fragmentTransaction.replace(android.R.id.content,fragment1);</span><br><span class="line">fragmentTransaction.addToBackStack(<span class="keyword">null</span>);</span><br><span class="line">fragmentTransaction.commit();</span><br></pre></td></tr></table></figure></p>
<p><code>PerferenceFragment</code> 中 <code>PreferenceCategory</code> 用于创建类别<br> <code>PreferenceScreen</code> 用于显示一个 <code>PerferenceFragmnet</code> 界面</p></li>
</ol>
<hr>
<h4 id="练习">练习</h4>
<ol type="1">
<li>访问放在 Strings.xml 文件中的字符串资源<br> <code>getResources()</code><br>
</li>
<li><p>获取当前日期</p>
<h2 id="section-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Calendar today = Calendar.getInstance();</span><br><span class="line">yr = today.get(Calendar.YEAR);</span><br><span class="line">month = today.get(Calendar.MONTH);</span><br><span class="line">day = today.get(Calendar.DAY_OF_MONTH);</span><br></pre></td></tr></table></figure></h2></li>
</ol>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Android View</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 进阶之 Binder 浅解</title>
    <url>/posts/c234d605.html</url>
    <content><![CDATA[<h4 id="什么是-binder">什么是 Binder</h4>
<p>Binder 是 Android 中一种跨进程通信（IPC）方式。<span id="more"></span> #### Binder 的原理 Binder通信采用C/S架构，从组件视角来说，包含 Client、Server、ServiceManager 以及 binder 驱动，其中 ServiceManager 用于管理系统中的各种服务。架构图如下所示： <img src="https://raw.githubusercontent.com/ikroal/blog-images/master/binder-principle.png"></p>
<ul>
<li>此处的 Service Manager 是指 Native 层的 ServiceManager（C++）</li>
<li>注册服务(addService)：Server 进程要先注册 Service 到 ServiceManager。该过程：Server 是客户端，ServiceManager 是服务端。</li>
<li>获取服务(getService)：Client 进程使用某个 Service 前，须先向 ServiceManager 中获取相应的 Service。该过程：Client 是客户端，ServiceManager 是服务端。</li>
<li>使用服务：Client 根据得到的 Service 信息建立与 Service 所在的 Server 进程通信的通路，然后就可以直接与 Service 交互。该过程：Client 是客户端，Server 是服务端。</li>
</ul>
<h4 id="binder-的结构">Binder 的结构</h4>
<p>在学习 Binder 的结构的时候，可以利用 AIDL 去生成 Binder，这里我们首先需要创建一个实现了 Parcelable 接口的 Book 类，然后在 main 文件夹下创建 AIDL 文件夹，分别创建 Book.aidl、IBookManager.aidl。三个文件的代码分别如下： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Book.java</span></span><br><span class="line"><span class="keyword">package</span> com.rookieyang.aidltest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Parcel;</span><br><span class="line"><span class="keyword">import</span> android.os.Parcelable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by firstdream on 2017/9/4.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mBookId;</span><br><span class="line">    <span class="keyword">private</span> String mBookName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(<span class="keyword">int</span> mBookId, String mBookName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mBookId = mBookId;</span><br><span class="line">        <span class="keyword">this</span>.mBookName = mBookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel parcel, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        parcel.writeInt(mBookId);</span><br><span class="line">        parcel.writeString(mBookName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;Book&gt; CREATOR = <span class="keyword">new</span> Creator&lt;Book&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Book <span class="title">createFromParcel</span><span class="params">(Parcel parcel)</span> </span>&#123;</span><br><span class="line">            Book book = <span class="keyword">new</span> Book(parcel.readInt(), parcel.readString());</span><br><span class="line">            <span class="keyword">return</span> book;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Book[] newArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Book[size];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Book.aidl</span></span><br><span class="line"><span class="keyword">package</span> com.rookieyang.aidltest;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare any non-default types here with import statements</span></span><br><span class="line"></span><br><span class="line">parcelable Book;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IBookManager.aidl</span></span><br><span class="line"><span class="keyword">package</span> com.rookieyang.aidltest;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要导入 Book 类</span></span><br><span class="line"><span class="keyword">import</span> com.rookieyang.aidltest.Book;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare any non-default types here with import statements</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IBookManager</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Demonstrates some basic types that you can use as parameters</span></span><br><span class="line"><span class="comment">     * and return values in AIDL.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addBook</span><span class="params">(in Book book)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在经过上述的过程之后，点击编译即可生成 Binder 文件，以 IBookManager.aidl 生成的 IBookManager.java 为例， IBookManager.java 中定义了一个继承自 IInterface 的 IBookManager 接口，在 IBookManager 内包含了继承自 Binder 实现了 IBookManager 接口的内部类 Stub 和 实现了 IBookManager 接口的 Stub 的内部类 Proxy。整体结构如下图所示： <img src="https://raw.githubusercontent.com/ikroal/blog-images/master/IBookManager.png"> 下面针对 IBookManager.java 进行具体的分析：</p>
<ul>
<li>IBookManager 接口，这个接口与在 IBookManager.aidl 中一致
<ul>
<li>getBookList()</li>
<li>addBook(Book book)</li>
</ul></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBookManager</span> <span class="keyword">extends</span> <span class="title">IInterface</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Demonstrates some basic types that you can use as parameters</span></span><br><span class="line"><span class="comment">     * and return values in AIDL.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(Book book)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Stub 类
<ul>
<li>DESCRIPTOR</li>
<li>Binder 的唯一标识，一般用当前 Binder 的类名表示</li>
<li>TRANSACTION_getBookList 和 TRANSACTION_addBook</li>
<li>两个id用于标识在transact过程中客户端所请求的到底是哪个方法</li>
<li>asInterface(IBinder obj)</li>
<li>用于将服务端的 Binder 对象转换成客户端所需的 AIDL 接口类型的对象，这种转换过程是区分进程的，如果客户端和服务端位于同一进程，那么此方法返回的就是服务端的 Stub 对象本身，否则返回的是系统封装后的 Stub.proxy 对象。</li>
<li>asBinder</li>
<li>此方法用于返回当前 Binder 对象。</li>
<li>onTransact</li>
<li>这个方法运行在服务端中的 Binder 线程池中，当客户端发起跨进程请求时，远程请求会通过系统底层封装后交由此方法来处理。</li>
<li>服务端通过 code 可以确定客户端所请求的目标方法是什么，接着从 data 中取出目标方法所需的参数（如果目标方法有参数的话），然后执行目标方法。当目标方法执行完毕后，就向 reply 中写入返回值（如果目标方法有返回值的话），onTransact 方法的执行过程就是这样的。</li>
</ul></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Stub</span> <span class="keyword">extends</span> <span class="title">Binder</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">    <span class="title">IBookManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DESCRIPTOR = <span class="string">&quot;com.rookieyang.binderdemo.IBookManager&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Construct the stub at attach it to the interface.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stub</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.attachInterface(<span class="keyword">this</span>, DESCRIPTOR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Cast an IBinder object into an IBookManager interface,</span></span><br><span class="line"><span class="comment">     * generating a proxy if needed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IBookManager <span class="title">asInterface</span><span class="params">(IBinder obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((obj == <span class="keyword">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</span><br><span class="line">        <span class="keyword">if</span> (((iin != <span class="keyword">null</span>) &amp;&amp; (iin <span class="keyword">instanceof</span> IBookManager))) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((IBookManager) iin);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IBookManager.Stub.Proxy(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, Parcel data, Parcel reply,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">int</span> flags)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (code) &#123;</span><br><span class="line">            <span class="keyword">case</span> INTERFACE_TRANSACTION: &#123;</span><br><span class="line">                reply.writeString(DESCRIPTOR);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> TRANSACTION_getBookList: &#123;</span><br><span class="line">                data.enforceInterface(DESCRIPTOR);</span><br><span class="line">                List&lt;Book&gt; _result = <span class="keyword">this</span>.getBookList();</span><br><span class="line">                reply.writeNoException();</span><br><span class="line">                reply.writeTypedList(_result);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> TRANSACTION_addBook: &#123;</span><br><span class="line">                data.enforceInterface(DESCRIPTOR);</span><br><span class="line">                Book _arg0;</span><br><span class="line">                <span class="keyword">if</span> ((<span class="number">0</span> != data.readInt())) &#123;</span><br><span class="line">                    <span class="comment">//反序列化</span></span><br><span class="line">                    _arg0 = Book.CREATOR.createFromParcel(data);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    _arg0 = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">this</span>.addBook(_arg0);</span><br><span class="line">                reply.writeNoException();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code, data, reply, flags);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_getBookList = (IBinder.FIRST_CALL_TRANSACTION + <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_addBook = (IBinder.FIRST_CALL_TRANSACTION + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Proxy 类
<ul>
<li>getBookList</li>
<li>这个方法运行在客户端，当客户端远程调用此方法时，它的内部实现是这样的：首先创建该方法所需要的输入型 Parcel 对象 _data 、输出型 Parcel 对象 _reply 和返回值对象 List；然后把该方法的参数信息写入 _data 中（如果有参数的话）；接着调用 transact 方法来发起 RPC（远程过程调用）请求，同时当前线程挂起；然后服务端的 onTransact 方法会被调用，直到 RPC 过程返回后，当前线程继续执行，并从 _reply 中取出 RPC 过程的返回结果；最后返回 _reply 中的数据。</li>
<li>addBook</li>
<li>这个方法运行在客户端，它的执行过程和 getBookList 是一样的，addBook 没有返回值，所以它不需要从 _reply 中取出返回值。</li>
</ul></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">IBookManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IBinder mRemote;</span><br><span class="line"></span><br><span class="line">    Proxy(IBinder remote) &#123;</span><br><span class="line">        mRemote = remote;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mRemote;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInterfaceDescriptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DESCRIPTOR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Demonstrates some basic types that you can use as parameters</span></span><br><span class="line"><span class="comment">     * and return values in AIDL.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        Parcel _data = Parcel.obtain();</span><br><span class="line">        Parcel _reply = Parcel.obtain();</span><br><span class="line">        java.util.List&lt;Book&gt; _result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            _data.writeInterfaceToken(DESCRIPTOR);</span><br><span class="line">            mRemote.transact(Stub.TRANSACTION_getBookList, _data, _reply, <span class="number">0</span>);</span><br><span class="line">            _reply.readException();</span><br><span class="line">            _result = _reply.createTypedArrayList(Book.CREATOR);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            _reply.recycle();</span><br><span class="line">            _data.recycle();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(Book book)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        Parcel _data = Parcel.obtain();</span><br><span class="line">        Parcel _reply = Parcel.obtain();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            _data.writeInterfaceToken(DESCRIPTOR);</span><br><span class="line">            <span class="keyword">if</span> ((book != <span class="keyword">null</span>)) &#123;</span><br><span class="line">                _data.writeInt(<span class="number">1</span>);</span><br><span class="line">                book.writeToParcel(_data, <span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                _data.writeInt(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            mRemote.transact(Stub.TRANSACTION_addBook, _data, _reply, <span class="number">0</span>);</span><br><span class="line">            _reply.readException();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            _reply.recycle();</span><br><span class="line">            _data.recycle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="binder-的工作机制">Binder 的工作机制</h4>
<p><img src="https://raw.githubusercontent.com/ikroal/blog-images/master/binder-execute.png"> &gt; 以上述为例，客户端调用 getBookList 方法时，在方法内部定义了 Parcel 对象，然后通过调用 transact 发起远程请求，服务器端接收到后调用 onTransact 方法，根据传递过来的 Code 进行相应的处理，将结果写入 Parcel 对象当中，处理完成之后在 客户端的 transact 将结果取出来并返回。</p>
<h4 id="binder-使用的一些注意点">Binder 使用的一些注意点</h4>
<p>Binder 一般和 Service 配合使用，作为 bindService 执行时的返回，最后在 ServiceConnect 当中获取返回的 Binder： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> ServiceConnection serviceConnection = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> </span>&#123;</span><br><span class="line">        mCalcAidl = ICalcAIDL.Stub.asInterface(iBinder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> </span>&#123;</span><br><span class="line">        mCalcAidl = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure> &gt; 不同进程时返回的 iBinder 是 ICalcAIDL.Stub.Proxy，而相同进程中则是 ICalcAIDL.Stub。是返回 Stub 还是返回 Proxy 在底层已经做了判断，不是在 onServiceConnected 方法中进行的判断</p>
<p>在服务中使用时，定义的 AIDL 文件包名必须相同，不然将无法找到对应的 AIDL，从而导致无法进行通信，并且使用时需要通过 ICalcAIDL.Stub 实现在 AIDL 中定义的接口，从而为客户端提供服务。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ICalcAIDL.Stub mBinder = <span class="keyword">new</span> Stub() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x - y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="总结">总结</h4>
<blockquote>
<p>粗略的说，Client 通过 Binder 当中的 Proxy 进行了 IPC 的请求，而 Server 则通过 Stub 当中的 onTransact 对跨进程请求进行处理，之所以能进行跨进程请求的原因在于底层能够通过可序列化的数据，上述的 Book 类实现了 Parcelable 接口，而基本类型是被看作可序列化的，所以这些数据在底层能够进行传输，自然就可以通过 Binder 完成 IPC。</p>
</blockquote>
<hr>
<h4 id="参考">参考</h4>
<ol type="1">
<li>Android 开发艺术探索-IPC 机制</li>
<li><span class="exturl" data-url="aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbG1qNjIzNTY1NzkxL2FydGljbGUvZGV0YWlscy8zODQ2MTA3OS8=">Android aidl Binder框架浅析<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3dlaXNodS5tZS8yMDE2LzAxLzEyL2JpbmRlci1pbmRleC1mb3ItbmV3ZXIv">Binder学习指南<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android IPC</tag>
      </tags>
  </entry>
  <entry>
    <title>HorizontalScrollView 和 ViewPager 触控冲突解决</title>
    <url>/posts/3dd05df.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>当 HorizontalScrollView 和 ViewPager 一起使用的时候会出现滑动冲突的问题<span id="more"></span></p>
<h2 id="解决过程">解决过程</h2>
<p>要了解 HorizontalScrollView 和 ViewPager 触控冲突的原因，首先需要了解Android 触摸事件处理的的机制，在了解后可以知道，当 HorizontalScrollView 内层嵌套使用 ViewPager 时，由于触摸事件被 HorizontalScrollView 的 <code>onInterceptTouchEvent()</code> 拦截导致事件不能向下层传递，所以当滑动屏幕时，HorizontalScrollView 可以正常滑动，但是 ViewPager 却不能正常滑动，而这个时候我们期望的是边缘滑动时，HorizontalScrollView 响应事件，非边缘滑动时，ViewPager 响应事件，为了达到这一目的我们需要重写 HorizontalScrollView 的 <code>onInterceptTouchEvent()</code> 函数，具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">    mXPoint = ev.getRawX();</span><br><span class="line">    <span class="keyword">if</span> (mXPoint &gt; <span class="number">100</span> &amp;&amp; mXPoint &lt; mMenuWidth) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(ev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过限定滑动的屏幕范围决定是否事件在这一层被处理，在这样处理之后 HorizontalScrollView 和 ViewPager 都能正确响应了，但是当 HorizontalScrollView 滑动至终点时，屏幕中间的部分却不能够正确响应 HorizontalScrollView 的滑动事件，所以我们需要做进一步处理，判断 HorizontalScrollView 是否滑动至终点，所以在 <code>onTouchEvent</code> 事件中利用一个 <code>flag</code> 的标志位去判断是否滑动至终点，具体代码如下： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> action = ev.getAction();</span><br><span class="line">    <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">            <span class="keyword">int</span> scollX = getScrollX();</span><br><span class="line">            <span class="keyword">if</span> (scollX &gt; mMenuHaltWidth) &#123;                    　</span><br><span class="line">                <span class="keyword">this</span>.scrollTo(mMenuWidth, <span class="number">0</span>);</span><br><span class="line">                sMenuFlag = <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;                    </span><br><span class="line">                <span class="keyword">this</span>.scrollTo(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                sMenuFlag = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(ev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 　<code>onInterceptTouchEvent()</code> 函数判断条件变为：<br> 　<code>if (mXPoint &gt; 100 &amp;&amp; mXPoint &lt; mMenuWidth &amp;&amp; sMenuFlag == false)</code></p>
<h2 id="最终效果">最终效果</h2>
<p><img src="http://i.imgur.com/Dz86zGW.gif"></p>
<hr>
<h2 id="参考资料">参考资料</h2>
<ol type="1">
<li><span class="exturl" data-url="aHR0cDovL3d3dy4yY3RvLmNvbS9rZi8yMDE0MTIvMzYzMTI4Lmh0bWw=" title="Android 控件的触摸事件传递与处理">Android 控件的触摸事件传递与处理<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5jbmJsb2dzLmNvbS96aHV5cDEwMTUvcC80NTc5Mzc0Lmh0bWw=" title="Android 触摸事件处理机制">Android 触摸事件处理机制<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Android Problem</tag>
      </tags>
  </entry>
  <entry>
    <title>onOptionsItemSelected() 返回值的理解</title>
    <url>/posts/c9eff4b4.html</url>
    <content><![CDATA[<p>首先查看官方 API 的解释：</p>
<blockquote>
<p>This hook is called whenever an item in your options menu is selected. The default implementation simply returns false to have the normal processing happen (calling the item's Runnable or sending a message to its Handler as appropriate). You can use this method for any items for which you would like to do processing without those other facilities.</p>
</blockquote>
<span id="more"></span>
<p>也就是说当点击 OptionsMenu 中的 Item 时，默认会返回 false，这个时候将会处理 item 关联的 Runnable 或发送一条 message 给它的 Handler。 为了弄清楚返回 false 时可能会发生什么做了如下测试：</p>
<ol type="1">
<li><p>测试一</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (item.getItemId()) &#123;</span><br><span class="line">        <span class="keyword">case</span> R.id.add_item:</span><br><span class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;Add&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.remove_item:</span><br><span class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;Remove&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">            item.setActionView(R.layout.progress);</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity.class);</span><br><span class="line">            item.setIntent(intent);</span><br><span class="line">            Log.i(TAG, <span class="string">&quot;onOptionsItemSelected: Remove&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;re&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> &gt; 上述代码中给 item 关联了一个 Intent 用于跳转到 SecondActivity，如果返回为 true 则点击 item 时不会跳转到 SecondActivity，如果返回 false 则会跳转到 SecondActivity。</p></li>
<li>测试二
<ul>
<li><p>创建一个 Fragment</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu, MenuInflater inflater)</span> </span>&#123;</span><br><span class="line">    inflater.inflate(R.menu.main, menu);</span><br><span class="line">    <span class="keyword">super</span>.onCreateOptionsMenu(menu, inflater);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (item.getItemId()) &#123;</span><br><span class="line">      <span class="keyword">case</span> R.id.remove_item:</span><br><span class="line">        Toast.makeText(getContext(), <span class="string">&quot;Fragment Remove&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        Toast.makeText(getContext(), <span class="string">&quot;Fragment&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Nullable</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, <span class="meta">@Nullable</span> ViewGroup container,</span></span></span><br><span class="line"><span class="params"><span class="function">      Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    setHasOptionsMenu(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> inflater.inflate(fragment_layout, container, <span class="keyword">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 上述创建了一个自定义的 Fragment 类，并添加了 OptionMenu 的点击事件。</p></li>
<li><p>在之前的 Activity 的布局文件中添加 Fragment</p>
<p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/fragment&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;com.rookieyang.demo.MyFragment&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:layout</span>=<span class="string">&quot;@layout/fragment_layout&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p></li>
</ul>
<blockquote>
<p>在完成上述步骤之后点击 remove 的 item，由于 Activity 中的 onOptionsItemSelected() 返回了false，导致事件没有被消费就会向下传递给 Fragment，进而执行 Fragment 中的 item 的点击事件，所以能够看到屏幕上将会显示 <code>Fragment Remove</code> 而不是 <code>Remove</code>。</p>
</blockquote></li>
</ol>
<p>补：OptionMenu 的 Item 自定义的点击事件优先级要高于 onOptionsItemSelected()。</p>
<hr>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Android Problem</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 14.04下AVD的创建以及闪退问题</title>
    <url>/posts/37766bd1.html</url>
    <content><![CDATA[<p>在 Ubuntu 14.04 下创建 Android 虚拟机时可能会出现下列错误：<br></p>
<blockquote>
<p>An error occurred while creating the AVD. See idea.log for details</p>
</blockquote>
<p>在网上查找之后很多人建议使用 sudo apt-get install lib32stdc++6 这条命令，但是实际上采用这条命令去安装会出现依赖冲突的问题，所以需要借助 sudo aptitude -f install lib32stdc++6 去解决依赖问题，这条语句使用一次可能并不能解决问题，实际当中我运行了三次才解决了依赖的冲突的问题，每一次运行的时候依次选择 no-&gt;yes-&gt;yes。具体要运行几次，必须看 lib32stdc++6 库是否安装成功。<span id="more"></span></p>
<p>在经过上述的操作之后，虽然 AVD 可能能成功创建，但实际可能还是无法启动，无法启动的原因可能是需要安装 Intel's KVM，具体步骤可以参考<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3V3LWl0LWFjYS9zcGFjZXNjb3V0LWFuZHJvaWQvd2lraS8xLi1TZXR0aW5nLVVwLUFuZHJvaWQtU3R1ZGlvLW9uLVVidW50dSNpbnN0YWxsLWludGVscy1rdm0tZm9yLWJldHRlci1hdmQtcGVyZm9ybWFuY2U=">Setting Up Android Studio on Ubuntu<i class="fa fa-external-link-alt"></i></span>当中的 Install Intel's KVM for Better AVD Performance 部分，在这部分当中只需做到第七步即可，由于我使用的 AndroidStudio 2.3，无法找到第八步所说的选项。</p>
<p>在安装好所需要的一切库之后，接下来的步骤如下： 1. 创建虚拟机，记下虚拟机名称 2. 进入到 Sdk 路径下的 tools 目录，执行以下指令 &gt; sudo chmod +x emulator &gt; ./emulator -avd 虚拟机名称 -qemu -m 2047 -enable-kvm</p>
<p>在经过上述的两个步骤之后基本上是能够成功启动了的。</p>
<hr>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Android Problem</tag>
      </tags>
  </entry>
  <entry>
    <title>DialogFragment 实现TimePickerDialog</title>
    <url>/posts/2ff58f36.html</url>
    <content><![CDATA[<p>在实现 <code>onCreateDialog(int id)</code> 发现方法已过时，新的方法是 DialogFragment，FragmentManager <span id="more"></span></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimePickerFragment</span> <span class="keyword">extends</span> <span class="title">DialogFragment</span> <span class="keyword">implements</span> <span class="title">TimePickerDialog</span>.<span class="title">OnTimeSetListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hour, minute;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TimePickerDialog(getActivity(), <span class="keyword">this</span>, hour, minute, <span class="keyword">false</span>);<span class="comment">//返回一个TimePickerDialog</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimeSet</span><span class="params">(TimePicker view, <span class="keyword">int</span> hourOfDay, <span class="keyword">int</span> minuteOfHour)</span> </span>&#123;</span><br><span class="line">        hour = hourOfDay;</span><br><span class="line">        minute = minuteOfHour;</span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;hh:mm aa&quot;</span>);</span><br><span class="line">        Date date;</span><br><span class="line">        Calendar calendar = Calendar.getInstance();<span class="comment">//Date构造方法过时，Calendar转Date</span></span><br><span class="line">        calendar.set(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,hour,minute);</span><br><span class="line">        date = calendar.getTime();</span><br><span class="line">        String strDate = simpleDateFormat.format(date);</span><br><span class="line"></span><br><span class="line">        Toast.makeText(getActivity(), <span class="string">&quot;you have selected&quot;</span> + strDate,</span><br><span class="line">                Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>显示 Dialog <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DialogFragment dialogFragment = <span class="keyword">new</span> TimePickerFragment();</span><br><span class="line">dialogFragment.show(getSupportFragmentManager(),<span class="string">&quot;timePicker&quot;</span>);</span><br></pre></td></tr></table></figure></p>
<hr>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Android View</tag>
      </tags>
  </entry>
  <entry>
    <title>Giraph 环境搭建</title>
    <url>/posts/a2b96c30.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>本文主要介绍了 Giraph 的环境搭建过程</p>
<span id="more"></span>
<h2 id="运行模式">运行模式</h2>
<p>Giraph 是基于 Hadoop 开发的上层应用，因此其运行模式取决于 Hadoop 的运行模式。关于 Hadoop 的运行模式请参照 <a href="/posts/fed3b37a.html" title="Hadoop基础之搭建环境">Hadoop基础之搭建环境</a> 一文。</p>
<h2 id="搭建过程">搭建过程</h2>
<p>本次环境搭建基于 Hadoop 2.5.1 以及 Giraph 1.2.0，系统环境是 Ubuntu 18.04，JDK 版本是 openjdk8。</p>
<ol type="1">
<li><p>配置 Hadoop 的环境</p>
<p>首先下载 <span class="exturl" data-url="aHR0cHM6Ly9hcmNoaXZlLmFwYWNoZS5vcmcvZGlzdC9oYWRvb3AvY29yZS9oYWRvb3AtMi41LjEvaGFkb29wLTIuNS4xLnRhci5neg==">Hadoop 2.5.1<i class="fa fa-external-link-alt"></i></span>，然后参考 <a href="/posts/fed3b37a.html" title="Hadoop基础之搭建环境">Hadoop基础之搭建环境</a> 完成配置，这里为了简单起见仅使用了默认的 Standalone 模式。</p></li>
<li><p>配置 Giraph</p>
<p>下载 <span class="exturl" data-url="aHR0cDovL2FwYWNoZS5taXJyb3JzLmx1Y2lkbmV0d29ya3MubmV0L2dpcmFwaC9naXJhcGgtMS4yLjAvZ2lyYXBoLWRpc3QtMS4yLjAtaGFkb29wMi1iaW4udGFyLmd6">Giraph 1.2.0<i class="fa fa-external-link-alt"></i></span>，然后进行解压即可。</p></li>
<li><p>配置环境变量</p>
<p>为了更好使用 Giraph ，需要配置如下三个环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">Setting Hadoop</span></span><br><span class="line">export HADOOP_HOME=&quot;/your_path/hadoop-2.5.1&quot;</span><br><span class="line">export HADOOP_CONF_DIR=&quot;$HADOOP_HOME/etc/hadoop&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">Setting Giraph</span></span><br><span class="line">export GIRAPH_HOME=&quot;/your_path/giraph-1.2.0-hadoop2-for-hadoop-2.5.1&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>验证环境</p>
<ul>
<li><p>在 Giraph 同级目录下创建 input 文件夹，然后在 input 文件夹内创建 tiny_graph.txt 文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir input</span><br><span class="line">cd input </span><br><span class="line">touch tiny_graph.txt</span><br><span class="line">vim tiny_graph.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">在文件中输入以下数据，其格式为 [source_id,source_value,[[dest_id, edge_value],...]]，如 [0,0,[[1,1],[3,3]]] 表示顶点序号为 0，顶点值为 0，存在序号 0 到 序号 1 的边，值为 1，存在序号 0 到序号 3 的边，值为 3。</span></span><br><span class="line">[0,0,[[1,1],[3,3]]]</span><br><span class="line">[1,0,[[0,1],[2,2],[3,1]]]</span><br><span class="line">[2,0,[[1,2],[4,4]]]</span><br><span class="line">[3,0,[[0,3],[1,1],[4,4]]]</span><br><span class="line">[4,0,[[3,4],[2,4]]]</span><br></pre></td></tr></table></figure></li>
<li><p>在 Giraph 的同级目录下执行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">GIRAPH_HOME/bin/giraph <span class="variable">$GIRAPH_HOME</span>/giraph-examples-1.2.0-hadoop2.jar org.apache.giraph.examples.SimpleShortestPathsComputation -vif org.apache.giraph.io.formats.JsonLongDoubleFloatDoubleVertexInputFormat -vip ./input/tiny_graph.txt -vof org.apache.giraph.io.formats.IdWithValueTextOutputFormat -op ./output/shortestpaths -w 1 -ca giraph.SplitMasterWorker=<span class="literal">false</span></span></span><br></pre></td></tr></table></figure>
<p>这行命令实质是向 Hadoop 提交一个 Job，giraph-examples-1.2.0-hadoop2.jar 是提交的 jar 文件，SimpleShortestPathsComputation 表示 Giraph 将会运行的计算类。其余的各项参数含义为：</p>
<ul>
<li><p>-vif</p>
<p>用于指定输入数据的格式</p></li>
<li><p>-vip</p>
<p>用于指定输入数据的路径，可以看到这里指定了前一步中创建的 tiny_graph.txt 文件</p></li>
<li><p>-vof</p>
<p>用于指定输出格式</p></li>
<li><p>-op</p>
<p>用于指定输出路径，这里指定的路径是 input 同级目录下的 output 文件夹下的 shortestpaths 文件夹</p></li>
<li><p>-w</p>
<p>用于指定 worker 的数量，这里由于在本地运行只能指定为 1 个</p></li>
<li><p>-ca</p>
<p>表明指定参数为自定义的参数，这里指定 giraph.SplitMasterWorker 为 false，表明不区分 Master 和 Worker（本地运行必须指定）。更多的自定义参数请参考 <span class="exturl" data-url="aHR0cHM6Ly9naXJhcGguYXBhY2hlLm9yZy9vcHRpb25zLmh0bWw=">🔗<i class="fa fa-external-link-alt"></i></span></p></li>
</ul></li>
<li><p>查看结果</p>
<p>运行结束之后进入 output/shortestpaths 将会看到输出文件 part-m-00000，其内容为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0	1.0</span><br><span class="line">1	0.0</span><br><span class="line">2	2.0</span><br><span class="line">3	1.0</span><br><span class="line">4	5.0</span><br></pre></td></tr></table></figure></li>
</ul>
<p>这里的验证是针对 Standalone 模式而言，如果需要在 Pseudo-Distributed 和 Full-Distributed 模式下进行验证，只需要把相应的输入文件上传到 HDFS，然后更改执行命令中的输入路径和输出路径即可。</p></li>
</ol>
<h2 id="thanks">Thanks</h2>
<ol type="1">
<li><span class="exturl" data-url="aHR0cDovL2dpcmFwaC5hcGFjaGUub3JnL3F1aWNrX3N0YXJ0Lmh0bWw=">Quick Start<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Giraph</category>
      </categories>
      <tags>
        <tag>Deploy</tag>
      </tags>
  </entry>
  <entry>
    <title>Giraph 简介</title>
    <url>/posts/24b5ab82.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>本文主要阐述了 Giraph 由来及其作用，并根据 Giraph 的系统架构和计算模型简要介绍了 Giraph 的运行流程。</p>
<span id="more"></span>
<h2 id="什么是-giraph">什么是 Giraph</h2>
<p>Giraph 是 Google 于 2010 年发布的论文 <span class="exturl" data-url="aHR0cHM6Ly93d3cucmVzZWFyY2hnYXRlLm5ldC9wcm9maWxlL0phbWVzX0RlaG5lcnQvcHVibGljYXRpb24vMjIxMjU3MzgzX1ByZWdlbF9BX3N5c3RlbV9mb3JfbGFyZ2Utc2NhbGVfZ3JhcGhfcHJvY2Vzc2luZy9saW5rcy8wMGI3ZDUzN2M2MTU4MjFmYTQwMDAwMDAucGRm">Pregel: a system for large-scale graph processing<i class="fa fa-external-link-alt"></i></span> 的开源实现。Giraph 是以 Hadoop 为基础开发的上层应用，其系统架构和计算模型与 Pregel 保持了一致。同时也在 Pregel 模型上增加了一些新的特性，如：out-of-core computation、edge-oriented input 等。Giraph 的目的是为了解决大规模图的分布式计算问题。通过隐藏分布式和并行计算的细节以及提供一套用于描述图算法的 API，Giraph 不仅拥有了很好的可扩展性，还降低了分布式图计算的使用门槛。</p>
<h2 id="系统架构">系统架构</h2>
<!--![](Giraph简介/Giraph_Architecture.png)-->
<p>上图蓝色部分标识了 Giraph 的系统架构，可以看到 Giraph 实质上还是一个 Master/Slave 的架构，主要由三个部分构成：</p>
<ul>
<li><p>Master</p>
<p>Master 实质上运行在 Hadoop 的 MapTask 上， 其主要作用是对输入图进行分区、协调 Worker 的活动、维护一份存活的 Worker 列表（包括 Worker 的标识符、地址信息等）以及更新 Job 的状态。</p></li>
<li><p>Worker</p>
<p>与 Master 一样，Worker 也运行在 Hadoop 的 MapTask 上，其主要作用是维护已分配图的状态。</p></li>
<li><p>Zookeeper</p>
<p>在 Giraph 中 Zookeeper 的主要作用是 Master 选举、命名服务以及协调服务。图中显示的 Zookeeper 是外置状态，但实际上如果不给 Giraph 提供外置 Zookeeper，那么 Giraph 将会在 Master 所在节点上自行启动一个 Zookeeper 来提供服务。</p></li>
</ul>
<h2 id="计算模型">计算模型</h2>
<!--![](Giraph简介/Giraph_Computation_Model.png)-->
<p>上图显示了 Giraph 的整个计算模型，主要由输入、一系列 Superstep 迭代计算、输出构成，其中这些 Superstep 被称之为 BSP(Bulk Synchronous Parallelism) 模型。</p>
<h3 id="bsp-模型">BSP 模型</h3>
<p>BSP 模型是一个块同步并行模型，其由许多个 Superstep 组成。对于 BSP 模型而言，其在 Superstep 内的操作是并行的，但在两个 Superstep 之间则是由一个同步操作进行隔离的。也就是说 Superstep(N + 1) 会等待 Superstep(N) 执行完成之后才会开始。</p>
<!--![](Giraph简介/Giraph_Bsp.png)-->
<p>上图显示了 Superstep 的结构图，一个 Superstep 由<strong>局部计算</strong>、<strong>通讯</strong>、<strong>栅栏同步</strong> 三个部分构成。可以看到即使有部分的计算比较快，但最终还是会在栅栏同步这里停下等待其余的计算完成。在图计算中应用这种模型的好处是：可以解决图计算的同步问题，同步模型有利于推断程序语义（即利于编程），并且消除了死锁和数据竞争的问题。</p>
<h3 id="计算过程">计算过程</h3>
<p><img src="/posts/24b5ab82/Giraph_Compute_Progress.png"></p>
<p>上图展示了一个计算图中顶点最大值的过程，其中深色的顶点表示本次 Superstep 结束之后将自己标记为不活跃状态（即不再需要进行计算），当所有顶点均处于不活跃状态的时候即表明计算结束。下面针对各个 Superstep 进行分析：</p>
<ul>
<li><p>Superstep0</p>
<p>Superstep0 时所有的顶点处于活跃状态并沿出边发送其顶点值</p></li>
<li><p>Superstep1</p>
<p>Superstep1 时每个顶点处理 Superstep0 发来的顶点值，第一、四个顶点[从左往右计数]发现有更大的顶点值 6，所以更新其顶点值为 6 ，并沿出边发送更新之后的顶点值。而第二、三个顶点发现并没有比它们顶点值更大的顶点值，因此两个顶点将自身标记为不活跃状态。</p></li>
<li><p>Superstep2</p>
<p>Superstep2 时由于第二个顶点收到了 Superstep1 发送过来的顶点值，所以系统会将第二个顶点标记为活跃状态然后去处理接收到的顶点值，但第二个顶点依旧发现没有比它更大的顶点值，所以会再次标记自己为不活跃状态。第一、四个顶点由于没有接收到 Superstep1 发来的顶点值，所以会将其标记为不活跃状态。第三个顶点在处理 Superstep1 发来的顶点值时，发现了比它更大的顶点值 6，所以会进行更新然后沿出边发送更新之后的顶点值。</p></li>
<li><p>Superstep3</p>
<p>Superstep3 阶段只有第二、四顶点接收到了 Superstep2 发来的顶点值，所以跟 Superstep2 中处理方式一致，系统先标记为这两个顶点为活跃状态，顶点比较接收的顶点值之后将自身标记为不活跃状态。至于第一、四顶点因为处于不活跃状态且没有收到上一个超步接收到的顶点值，所以不会进行处理从而依旧保持不活跃状态。至此整个计算过程就结束了。</p></li>
</ul>
<h2 id="运行流程">运行流程</h2>
<p>在了解了 Giraph 的系统架构和计算模型之后，这里简单介绍一下 Giraph 的整个运行流程：</p>
<ol type="1">
<li>Giraph 向 Hadoop 提交 Job 之后，Zookeeper 将会选出一个 MapTask 作为 Giraph 的 Master，其余的 MapTask 则作为 Worker。然后这些 Worker 会通过 Zookeeper 命名服务找到 Master，并向 Master 进行注册。</li>
<li>Master 将会对输入图进行分区，并发送分区信息给 Worker，Woker 会对分区进行读取，期间可能会发生 Worker 之间的分区交换。</li>
<li>之后 Master 会开始协调 Worker 迭代执行 Superstep，Worker 将会在 Superstep 中完成顶点的计算过程，直到所有的顶点处于不活跃状态之后结束计算。</li>
<li>在计算结束之后，Giraph 将会根据用户指定的格式输出结果。</li>
</ol>
<h2 id="总结">总结</h2>
<p>上述简要介绍了 Giraph 的核心知识，即架构和计算模型。但除此之外，Giraph 中还有重要的优化和容错机制尚未介绍，这些都需要后续学习的时候进行整理分析。</p>
<h2 id="thanks">Thanks</h2>
<ol type="1">
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucmVzZWFyY2hnYXRlLm5ldC9wcm9maWxlL0phbWVzX0RlaG5lcnQvcHVibGljYXRpb24vMjIxMjU3MzgzX1ByZWdlbF9BX3N5c3RlbV9mb3JfbGFyZ2Utc2NhbGVfZ3JhcGhfcHJvY2Vzc2luZy9saW5rcy8wMGI3ZDUzN2M2MTU4MjFmYTQwMDAwMDAucGRm">Pregel: a system for large-scale graph processing<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jc2hpaG9uZy5naXRodWIuaW8vMjAxOC8wNS8zMC9QcmVnZWwlRUYlQkMlODglRTUlOUIlQkUlRTglQUUlQTElRTclQUUlOTclRUYlQkMlODklRTYlOEElODAlRTYlOUMlQUYlRTUlOEUlOUYlRTclOTAlODYv">Pregel（图计算）技术原理<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cudHdibG9ncy5uZXQvYS81YjhhYjUzZDJiNzE3NzVkMWNlOGJhNzQvemgtY24=">BSP模型的相关讲解<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vQllSYW5zL3AvNDY4MjI4Mi5odG1s">从BSP模型到Apache Hama<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXJhcGguYXBhY2hlLm9yZy9pbnRyby5odG1s">Introduction to Apache Giraph<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Giraph</category>
      </categories>
      <tags>
        <tag>Introduction</tag>
      </tags>
  </entry>
  <entry>
    <title>Giraph 编程实践及源码编译调试</title>
    <url>/posts/72593b40.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>本文主要总结了如何利用 Giraph 提供的 API 实现图计算编程，并说明了将 Giraph 源码导入 IDEA 进行调试的过程。</p>
<span id="more"></span>
<h2 id="编程实践">编程实践</h2>
<p>本部分通过实现最短路径算法说明 Giraph 的编程流程</p>
<ol type="1">
<li><p>创建 Maven 工程</p>
<p><img src="/posts/72593b40/maven-1.png"></p>
<p><img src="/posts/72593b40/maven-2.png"></p></li>
<li><p>添加相关依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加 Giraph 依赖--&gt;</span>&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.giraph<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>giraph-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.0-hadoop2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--添加 Hadoop 依赖--&gt;</span>&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建 ShortestPathComputation 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.giraph.edge.Edge;</span><br><span class="line"><span class="keyword">import</span> org.apache.giraph.graph.BasicComputation;</span><br><span class="line"><span class="keyword">import</span> org.apache.giraph.graph.Vertex;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.DoubleWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.FloatWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShortestPathComputation</span> <span class="keyword">extends</span> <span class="title">BasicComputation</span>&lt;<span class="title">LongWritable</span>, <span class="title">DoubleWritable</span>,</span></span><br><span class="line"><span class="class">        <span class="title">FloatWritable</span>, <span class="title">DoubleWritable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要计算最短路径的源顶点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SOURCE_VERTEX = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表示节点不可达</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> UNREACHABLE = Double.MAX_VALUE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> vertex 待处理的顶点</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> messages vertex 接收到的来自其余顶点的 message</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">(Vertex&lt;LongWritable, DoubleWritable, FloatWritable&gt; vertex,</span></span></span><br><span class="line"><span class="params"><span class="function">                        Iterable&lt;DoubleWritable&gt; messages)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (getSuperstep() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//超步 0 时源顶点最短路径设置为 0，其余顶点设置为不可达，并且源顶点需要向其它顶点发送最短距离message</span></span><br><span class="line">            <span class="keyword">if</span> (vertex.getId().get() == SOURCE_VERTEX) &#123;</span><br><span class="line">                vertex.setValue(<span class="keyword">new</span> DoubleWritable(<span class="number">0</span>));</span><br><span class="line">                sendDist(vertex);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                vertex.setValue(<span class="keyword">new</span> DoubleWritable(UNREACHABLE));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//遍历处理从其余顶点收到的 message，</span></span><br><span class="line">            <span class="comment">// 查看 message 中传递的最短距离是否小于当前的最短距离，如果是则进行更新</span></span><br><span class="line">            <span class="keyword">for</span> (DoubleWritable message : messages) &#123;</span><br><span class="line">                <span class="keyword">if</span> (message.get() &lt; vertex.getValue().get()) &#123;</span><br><span class="line">                    vertex.setValue(message);</span><br><span class="line">                    sendDist(vertex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//主动将顶点置于不活跃状态，如果顶点收到 message，系统会将顶点再度激活</span></span><br><span class="line">        vertex.voteToHalt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送顶点 vertex 到其邻接顶点的最短距离</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendDist</span><span class="params">(Vertex&lt;LongWritable,</span></span></span><br><span class="line"><span class="params"><span class="function">            DoubleWritable, FloatWritable&gt; vertex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Edge&lt;LongWritable, FloatWritable&gt; edge : vertex.getEdges()) &#123;</span><br><span class="line">            <span class="keyword">double</span> distance = vertex.getValue().get() + edge.getValue().get();</span><br><span class="line">            sendMessage(edge.getTargetVertexId(), <span class="keyword">new</span> DoubleWritable(distance));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ShortestPathComputation 继承了 BasicComputation，对于 BasicComputation 中指定的四个类型参数，其含义依次为</p>
<ul>
<li><p>Vertex id</p></li>
<li><p>Vertex data</p></li>
<li><p>Edge data</p></li>
<li><p>Message</p></li>
</ul>
<p>整个计算的过程可以总结为：</p>
<ol type="1">
<li>Superstep 0 的时候进行初始化，然后源头顶点向邻接顶点发送可能的最短路径 message</li>
<li>下一 Superstep 邻接顶点处理接收到的 message 然后和顶点值进行比较，如果 message 小于顶点值则对顶点值进行更新，并向邻接顶点发送可能的最短路径 message。</li>
<li>重复 <code>2</code> 直到所有的顶点处于不活跃状态，最后结束计算进行输出。</li>
</ol></li>
<li><p>提交验证</p>
<p>验证部分基于 Pseudo-Distributed 模式的 Hadoop 进行</p>
<ul>
<li><p>上传测试文件到 HDFS</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$HADOOP_HOME/<span class="built_in">bin</span>/hdfs dfs -put giraph_data.txt &lt;your_input_path&gt;/shortestpath</span><br><span class="line"><span class="comment">#giraph_data 中的数据，格式为 [source_id,source_value,[[dest_id, edge_value],...]]，</span></span><br><span class="line"><span class="comment"># 如 [0,0,[[1,1],[3,3]]] 表示顶点序号为 0，顶点值为 0，存在序号 0 到 序号 1 的边，值为 1，存在序号 0 到序号 3 的边，值为 3。</span></span><br><span class="line">[<span class="number">0</span>,<span class="number">100</span>,[[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">3</span>]]]</span><br><span class="line">[<span class="number">1</span>,<span class="number">20</span>,[[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">1</span>]]]</span><br><span class="line">[<span class="number">2</span>,<span class="number">90</span>,[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">4</span>,<span class="number">4</span>]]]</span><br><span class="line">[<span class="number">3</span>,<span class="number">50</span>,[[<span class="number">0</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">4</span>,<span class="number">4</span>]]]</span><br><span class="line">[<span class="number">4</span>,<span class="number">80</span>,[[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">4</span>]]]</span><br></pre></td></tr></table></figure></li>
<li><p>将工程打包为 jar 文件，并提交到 Hadoop</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">HADOOP_HOME/bin/hadoop jar Examples.jar org.apache.giraph.GiraphRunner com.ikroal.shortestpath.ShortestPathComputation -vif org.apache.giraph.io.formats.JsonLongDoubleFloatDoubleVertexInputFormat -vip &lt;your_input_path&gt;/giraph_data.txt -vof org.apache.giraph.io.formats.IdWithValueTextOutputFormat -op &lt;your_output&gt;/shortestpaths -w 1</span></span><br></pre></td></tr></table></figure>
<p>提交任务的过程基本与一般的提交过程一致，只是还额外指定了 Giraph 运行所需要的参数，对于相关参数的解释请参考 <a href="/posts/a2b96c30.html" title="Giraph 环境搭建">Giraph 环境搭建</a> 。</p></li>
<li><p>查看结果</p>
<p>运行之后将会在输出路径下看到输出文件，其内容为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0	0.0</span><br><span class="line">1	1.0</span><br><span class="line">2	3.0</span><br><span class="line">3	2.0</span><br><span class="line">4	6.0</span><br></pre></td></tr></table></figure></li>
</ul></li>
</ol>
<h3 id="总结">总结</h3>
<p>Giraph 的编程过程可以总结为：</p>
<ul>
<li><p>继承 BasicComputation，实现 compute 方法</p>
<p>compute 方法主要完成顶点的计算更新和必要的消息发送</p></li>
<li><p>命令行提交 Job</p>
<p>由于系统已经提供了 GiraphRunner 的主类，所以大部分情况下用户不需要编写 Job 的配置和提交过程，但是如果 GiraphRunner 不满足用户需求，用户也可以自定义主类然后命令行提交的时候进行指定</p></li>
</ul>
<p>以上仅仅说明了最基本的 Giraph 编程过程，但如果想要实现性能最优的图计算过程，则还需要考虑编程过程中利用 <code>Aggregators</code> 和 <code>Combiners</code> 机制，相关示例可以参考 giraph 源码的 giraph-examples 部分。</p>
<h2 id="源码编译调试">源码编译调试</h2>
<h3 id="环境要求">环境要求</h3>
<p>Giraph 源码的编译调试要求 Java 1.8、Maven 3 以上版本以及 Hadoop2.5.1</p>
<h3 id="导入源码">导入源码</h3>
<ol type="1">
<li><p>下载源码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/apache/giraph.git</span><br></pre></td></tr></table></figure></li>
<li><p>编译源码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn -Phadoop_2 -DskipTests clean package</span><br></pre></td></tr></table></figure>
<p>成功后将会输出</p>
<p><img src="/posts/72593b40/build-success.png"></p></li>
<li><p>使用 IDEA 打开 giraph 源码目录</p>
<p>在 Maven 的 Profies 页面选择 hadoop2 ( 默认是 hadoop1 )</p>
<p><img src="/posts/72593b40/select_hadoop2.png"></p></li>
</ol>
<h3 id="增加自定义入口">增加自定义入口</h3>
<p>Giraph 提供了一个位于 giraph-core/src/main/java/org/apache/giraph 下的入口类 GiraphRunner。但该类比较繁琐并且不能自动删除输出文件，不太利于本地调试阅读 Giraph 的源码。因此最好是增加一个自定义的入口类。</p>
<ul>
<li><p>在 org.apache.giraph 包下创建 custom 包</p></li>
<li><p>在 custom 包下创建用于测试的 Shortestpath 类（内容与编程实践部分一致）</p></li>
<li><p>在 custom 包下创建自定义入口类 CustomRunner</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.giraph.conf.GiraphConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.apache.giraph.conf.GiraphConstants;</span><br><span class="line"><span class="keyword">import</span> org.apache.giraph.io.formats.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.giraph.job.GiraphJob;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输入路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String INPUT_PATH = <span class="string">&quot;giraph-core/src/main/resources/input/graph_data.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String OUTPUT_PATH = <span class="string">&quot;giraph-core/src/main/resources/output/shortestPath&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        GiraphConfiguration conf = <span class="keyword">new</span> GiraphConfiguration(<span class="keyword">new</span> Configuration());</span><br><span class="line">        conf.setComputationClass(Shortestpath.class);</span><br><span class="line">        <span class="comment">//设置输入和输出格式</span></span><br><span class="line">        conf.setVertexInputFormatClass(JsonLongDoubleFloatDoubleVertexInputFormat.class);</span><br><span class="line">        conf.setVertexOutputFormatClass(IdWithValueTextOutputFormat.class);</span><br><span class="line">        <span class="comment">//设置本地运行模式</span></span><br><span class="line">        conf.setLocalTestMode(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//设置 worker 配置</span></span><br><span class="line">        conf.setWorkerConfiguration(<span class="number">1</span>, <span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="comment">//可选，如果要学习 Checkpoint 机制应该设置</span></span><br><span class="line">        conf.setCheckpointFrequency(<span class="number">4</span>);</span><br><span class="line">        GiraphConstants.SPLIT_MASTER_WORKER.set(conf, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        GiraphJob job = <span class="keyword">new</span> GiraphJob(conf, Shortestpath.class.getSimpleName());</span><br><span class="line">        <span class="comment">//设置输入和输出路径</span></span><br><span class="line">        GiraphTextInputFormat.setVertexInputPath(conf, <span class="keyword">new</span> Path(INPUT_PATH));</span><br><span class="line">        GiraphTextOutputFormat.setOutputPath(job.getInternalJob(), <span class="keyword">new</span> Path(OUTPUT_PATH));</span><br><span class="line">        <span class="comment">//删除之前的输出</span></span><br><span class="line">        deletePath(OUTPUT_PATH, <span class="keyword">true</span>);</span><br><span class="line">        job.run(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于删除输出目录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path 目录路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deletePath</span><span class="params">(String path, <span class="keyword">boolean</span> isDirectory)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            <span class="comment">//本地目录递归删除</span></span><br><span class="line">            <span class="keyword">if</span> (isDirectory) &#123;</span><br><span class="line">                File[] subFiles = file.listFiles();</span><br><span class="line">                <span class="keyword">for</span> (File subFile : subFiles) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (subFile.isFile()) &#123;</span><br><span class="line">                        subFile.delete();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        deletePath(subFile.getPath(), <span class="keyword">true</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            file.delete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在 resources 文件夹创建 input 文件夹并放入编程实践中的测试数据 graph_data.txt</p></li>
<li><p>验证</p>
<p>修改配置并运行如果在 resources 文件夹下看到输出文件，证明添加自定义入口成功，此时可以进行断点调试</p>
<p><img src="/posts/72593b40/editConf.png"></p></li>
</ul>
<h3 id="问题">问题</h3>
<ol type="1">
<li><p>运行时提示 TestYarnJob 中的 MiniYARNCluster 缺失问题</p>
<p>对于 Test 部分的内容因为不影响源码阅读，可以将出错部分注释掉</p></li>
</ol>
<h2 id="thanks">Thanks</h2>
<ol type="1">
<li><span class="exturl" data-url="aHR0cDovL2dpcmFwaC5hcGFjaGUub3JnL2ludHJvLmh0bWw=">Introduction to Apache Giraph<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2dpcmFwaC5hcGFjaGUub3JnL2J1aWxkLmh0bWw=">Building and Testing<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Giraph</category>
      </categories>
      <tags>
        <tag>SourceCode Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop 基础之 HDFS 入门</title>
    <url>/posts/abb7faac.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>本文主要介绍了 HDFS 的体系架构以及其执行流程，并给出了读写操作的编程实例，希望对 HDFS 有个初步的认识。</p>
<span id="more"></span>
<h2 id="简介">简介</h2>
<p>HDFS (Hadoop Distributed File System) 是一个运行在商业 PC 上的分布式文件系统，其设计思想源自于 Google 2003 年发布的论文 <span class="exturl" data-url="aHR0cHM6Ly9haS5nb29nbGUvcmVzZWFyY2gvcHVicy9wdWI1MQ==">The Google File System<i class="fa fa-external-link-alt"></i></span> 。HDFS的主要目的是为了解决大规模数据存储和管理的问题。</p>
<h2 id="体系架构">体系架构</h2>
<p><img src="/posts/abb7faac/HDFS-Structure.png"></p>
<p>上图表明 HDFS 是一个标准的 master/slave 架构，主要由三个部分构成：</p>
<ol type="1">
<li>NameNode（master 节点）
<ul>
<li>元数据（MetaData）的管理，其中元数据由<strong>文件路径名</strong>、<strong>数据块ID</strong>以及<strong>存储位置</strong>等信息构成</li>
<li>管理 HDFS 的名字空间。</li>
</ul></li>
<li>SecondaryNameNode
<ul>
<li>定期合并 NameNode 的 edit logs（对文件系统的改动序列） 到 fsimage（对整个文件系统的快照），并拷贝修改后的 fsimage 到 NameNode。</li>
<li>提供一个 NameNode 的检查点（切忌认为是 NameNode 的备份），可用于 NameNode 的故障恢复。</li>
</ul></li>
<li>DataNode（slave 节点）
<ul>
<li>提供文件存储和进行数据块操作。</li>
<li>周期性的向 NameNode 汇报块信息。</li>
</ul></li>
</ol>
<p>这里对图中出现的一些概念进行说明：</p>
<ol type="1">
<li><p>Replication（副本）</p>
<p>为了保证数据的高可用，HDFS 会对写入的数据进行冗余存储，默认情况下会保存 3 份。</p></li>
<li><p>Blocks</p>
<p>Block 是最基本的存储和操作单位（默认情况下为 128M），这里的 Block 不是指物理 Block ，而是指文件系统的 Block，其大小一般是物理 Block 的整数倍。</p></li>
</ol>
<h2 id="执行流程">执行流程</h2>
<h3 id="读文件">读文件</h3>
<p><img src="/posts/abb7faac/HDFS-Read.jpg"></p>
<p>读文件的过程可以概括为：</p>
<ol type="1">
<li>Client 向 NameNode 发起请求获取文件数据块位置信息</li>
<li>Client 按照数据块距 Client 的远近依次进行连接然后读取数据</li>
</ol>
<h3 id="写文件">写文件</h3>
<p><img src="/posts/abb7faac/HDFS-Write.jpg"></p>
<p>写文件的过程可以概括为：</p>
<ol type="1">
<li>Client 向 NameNode 发起写文件的请求获得可写的 DataNode 列表等信息</li>
<li>Client 根据 HDFS 设定的分块大小对文件进行分块</li>
<li>Client 和 NameNode 分配的 DataNode 构成 pipeline 并进行数据写入</li>
<li>写入完成之后，NameNode 接收来自 DataNode 的消息进行元数据的更新</li>
</ol>
<h2 id="常用命令">常用命令</h2>
<h3 id="文件操作">文件操作</h3>
<ol type="1">
<li><p>列出文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -ls &lt;path&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>创建目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -mkdir &lt;path&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>上传文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -put &lt;localsrc&gt; &lt;dst&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>输出文件内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -cat &lt;src&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>文件复制到本地</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -get &lt;src&gt; &lt;localdst&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>删除文件和目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -rm &lt;src&gt;</span><br><span class="line">hdfs dfs -rmdir &lt;dir&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="管理">管理</h3>
<ol type="1">
<li><p>查看统计信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfsadmin -report</span><br></pre></td></tr></table></figure></li>
<li><p>进入和退出安全模式（该模式不允许文件系统有任何修改）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfsadmin -safemode enter</span><br><span class="line">hdfs dfsadmin -safemode leave</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="编程实例">编程实例</h2>
<ol type="1">
<li><p>IDEA 新建 Maven 项目</p>
<p><img src="/posts/abb7faac/maven-create.png"></p>
<p>勾选相关选项后，点击 next 填入项目相关信息即可</p></li>
<li><p>pom.xml 中添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span> //根据 Hadoop 版本进行选择</span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-hdfs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>读写文件</p>
<p>创建 Sample 类编写相应的读写函数</p>
<ul>
<li><p>Sample 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataInputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataOutputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ikroal</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sample</span> </span>&#123;</span><br><span class="line">    <span class="comment">//默认的 HDFS 地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_FS = <span class="string">&quot;hdfs://localhost:9000&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PATH = DEFAULT_FS + <span class="string">&quot;/tmp/demo.txt&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_FILE = <span class="string">&quot;demo.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        FileSystem fs = <span class="keyword">null</span>;</span><br><span class="line">        conf.set(<span class="string">&quot;fs.defaultFS&quot;</span>, DEFAULT_FS); <span class="comment">//配置 HDFS 地址</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fs = FileSystem.get(conf);</span><br><span class="line">            write(fs, DEFAULT_FILE, PATH);</span><br><span class="line">            read(fs, PATH);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fs != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fs.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>write 函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 进行文件写入</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> inputPath 待写入文件路径</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> outPath HDFS 的写入路径</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(FileSystem fileSystem, String inputPath, String outPath)</span> </span>&#123;</span><br><span class="line">    FSDataOutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">    FileInputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        outputStream = fileSystem.create(<span class="keyword">new</span> Path(outPath)); <span class="comment">//获得 HDFS 的写入流</span></span><br><span class="line">        inputStream = <span class="keyword">new</span> FileInputStream(inputPath); <span class="comment">//读取本地文件</span></span><br><span class="line">        <span class="keyword">int</span> data;</span><br><span class="line">        <span class="keyword">while</span> ((data = inputStream.read()) != -<span class="number">1</span>) &#123; <span class="comment">//写入操作</span></span><br><span class="line">            outputStream.write(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (outputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                outputStream.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                inputStream.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>read 函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 进行文件读取</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> path HDFS 上待读取文件路径</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(FileSystem fileSystem, String path)</span> </span>&#123;</span><br><span class="line">    FSDataInputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        inputStream = fileSystem.open(<span class="keyword">new</span> Path(path)); <span class="comment">//获取 HDFS 读取流</span></span><br><span class="line">        reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</span><br><span class="line">        String content;</span><br><span class="line">        <span class="keyword">while</span> ((content = reader.readLine()) != <span class="keyword">null</span>) &#123; <span class="comment">//读取并输出到控制台</span></span><br><span class="line">            System.out.println(content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                inputStream.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                reader.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>在工程文件夹的根目录下创建计划上传的文件（这里是 demo.txt），填入 Hello World！</p></li>
<li><p>启动 Hadoop 然后运行程序查看结果</p>
<p>通过 http://localhost:50070/explorer.html#/ 可以查看写入结果</p>
<p><img src="/posts/abb7faac/write.png"></p>
<p>控制台则会输出上传文件的内容</p>
<p><img src="/posts/abb7faac/read.png"></p></li>
</ol>
<h2 id="thanks">Thanks</h2>
<ol type="1">
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY29kZU9mTGlmZS9wLzUzNzUxMjAuaHRtbA==">初步掌握HDFS的架构及原理<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JpbmdkdWFubGJkL2FydGljbGUvZGV0YWlscy81MTkxNDU1MCN0MjM=">深入理解HDFS：Hadoop分布式文件系统<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3doZHhqYncvYXJ0aWNsZS9kZXRhaWxzLzgxMDcyMjA3">HDFS读写流程（史上最精炼详细）<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcWluZ3l1bnpvbmcvcC84NTQ4ODA2Lmh0bWw=">Hadoop学习之路（十一）HDFS的读写详解<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>HDFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop 基础之搭建环境</title>
    <url>/posts/fed3b37a.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>本文主要介绍了 Hadoop 的三种运行模式以及配置的方式。</p>
<span id="more"></span>
<h2 id="运行模式">运行模式</h2>
<p>Hadoop 的运行模式分为三种：</p>
<ol type="1">
<li>Standalone（本地模式/单机模式/local模式） 该模式下没有任何守护进程，用户程序和 Hadoop 程序运行在同一个 Java 进程，使用的文件系统是本地文件系统而不是分布式文件系统，此模式下一般用于本地调试。</li>
<li>Pseudo-Distributed（伪集群模式） 在<strong>单机</strong>上模拟集群模式，各守护进程运行在单独的 Java 进程当中，使用的文件系统是 HDFS</li>
<li>Fully-Distributed（集群模式） 守护进程运行在集群上，使用的文件系统也是 HDFS</li>
</ol>
<h2 id="配置过程">配置过程</h2>
<p>本次配置基于 Hadoop2.9.2，其中 Standalone 在 CentOS 7.2 系统下进行配置， Pseudo-Distributed 模式在 MacOS 10.14.4 上进行配置，Fully-Distributed 模式在腾讯云主机上进行配置，集群由两台云主机组成，分别运行 Ubuntu 14.04.1 和 CentOS 7.2 系统。</p>
<h3 id="环境准备">环境准备</h3>
<ul>
<li><p>Java 7/8 Hadoop 2.7.x to 2.x 支持 Java 7/8，其它 Hadoop 版本支持的 Java 版本请点击 <span class="exturl" data-url="aHR0cHM6Ly9jd2lraS5hcGFjaGUub3JnL2NvbmZsdWVuY2UvZGlzcGxheS9IQURPT1AvSGFkb29wK0phdmErVmVyc2lvbnM=">🔗<i class="fa fa-external-link-alt"></i></span> 进行查询 下载：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install java-1.8.0-openjdk-devel //centos 安装 Java8，ubuntu 下需要用 apt-get 进行安装</span><br></pre></td></tr></table></figure>
<p>配置环境变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">vi .bash_profile</span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/jre-1.8.0-openjdk.i386</span><br><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure></li>
<li><p>ssh 和 rsync: 用 <code>ssh</code> 和 <code>rsync</code> 命令测试后发现 Centos 本身就有，所以无须进行安装。</p></li>
<li><p>Hadoop</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo wget http://mirror.bit.edu.cn/apache/hadoop/common/hadoop-2.9.2/hadoop-2.9.2.tar.gz</span><br><span class="line">tar -zxvf hadoop-2.9.2.tar.gz</span><br></pre></td></tr></table></figure>
<p>这里的下载地址最好根据云主机所在的区域进行选择，如果是国内的云主机最好使用国内的镜像地址，这样下载会快很多。</p></li>
</ul>
<h3 id="standalone-模式">Standalone 模式</h3>
<p>下载解压之后的 Hadoop 默认就是 Standalone 模式，可直接运行 wordcount 进行测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir input //hadoop 的同级目录创建</span><br><span class="line">cp hadoop-2.9.2/LICENSE.txt input/</span><br><span class="line"></span><br><span class="line">hadoop-2.9.2/bin/hadoop jar  hadoop-2.9.2/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.9.2.jar wordcount input output //运行 wordcount</span><br><span class="line">cat output/part-r-00000 //查看结果</span><br></pre></td></tr></table></figure>
<p>同时再开一个终端在作业运行的时候输入 jps 查看进程</p>
<p><img src="https://raw.githubusercontent.com/ikroal/blog-images/master/hadoop-standalone.png"></p>
<p>可以看到 Standalone 模式下 Hadoop 只会启动 RunJar 进程来运行整个作业</p>
<h3 id="pseudo-distributed-模式">Pseudo-Distributed 模式</h3>
<ol type="1">
<li><p>修改 etc/hadoop/core-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  <span class="comment">&lt;!--配置访问 nameNode 的 URI--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="comment">&lt;!--指定临时目录，MapReduce 和 HDFS 的许多路径配置依赖此路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改 etc/hadoop/hdfs-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="comment">&lt;!--配置文件的副本数量--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span>    <span class="comment">&lt;!--关闭防火墙--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置免密登录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh localhost 测试能否免密登录（如果能够则跳过以下操作）</span><br><span class="line">ssh-keygen -t rsa -P &#x27;&#x27; -f ~/.ssh/id_rsa</span><br><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line">chmod 0600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></li>
<li><p>修改 etc/hadoop/hadoop-env.sh（如果提示找不到 JAVA_HOME）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/jvm/jre-1.8.0-openjdk.i386 //上面配置的 JAVA_HOME 好像没起作用</span><br></pre></td></tr></table></figure></li>
<li><p>格式化 HDFS</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/hdfs namenode -format</span><br></pre></td></tr></table></figure></li>
<li><p>启动 HDFS</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sbin/start-dfs.sh</span><br></pre></td></tr></table></figure>
<p>启动后输入 jps 看到以下进程即成功，这个时候可以通过 http://localhost:50070/ 访问 NameNode</p>
<p><img src="https://raw.githubusercontent.com/ikroal/blog-images/master/hdfs%E8%BF%9B%E7%A8%8B.png"></p></li>
<li><p>运行 wordcount</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/hdfs dfs -mkdir /user</span><br><span class="line">bin/hdfs dfs -mkdir /user/&lt;username&gt;</span><br><span class="line">bin/hdfs dfs -mkdir /user/&lt;username&gt;/input</span><br><span class="line">bin/hdfs dfs -put LICENSE.txt /user/&lt;username&gt;/input //创建文件夹并上传文件</span><br><span class="line">bin/hadoop jar  share/hadoop/mapreduce/hadoop-mapreduce-examples-2.9.2.jar wordcount input output //运行 wordcount</span><br><span class="line">bin/hdfs dfs -cat output/part-r-00000 //显示结果</span><br></pre></td></tr></table></figure>
<p>在另一终端输入 jps 可以看到运行时的以下进程 <img src="https://raw.githubusercontent.com/ikroal/blog-images/master/Pseudo-Distributed.png"></p>
<p>依旧是用 RunJar 提交，只是读取和写入采用了 HDFS。</p></li>
<li><p>通过 YARN 执行 Job（可选配置，不过为了更接近真实集群还是建议配置）</p>
<ul>
<li><p>修改 etc/hadoop/mapred-site.xml</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp etc/hadoop/mapred-site.xml.template etc/hadoop/mapred-site.xml</span><br><span class="line">vi etc/hadoop/mapred-site.xml</span><br></pre></td></tr></table></figure>
<p>增加以下内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="comment">&lt;!--表明运行在 YARN 上--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改 etc/hadoop/yarn-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="comment">&lt;!--设置resourcemanager的hostname--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>localhost<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="comment">&lt;!--指定 nodemanager 获取数据的方式--&gt;</span> </span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>启动 YARN</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sbin/start-yarn.sh</span><br></pre></td></tr></table></figure>
<p>启动成功后可以通过 http://localhost:8088/ 访问 ResourceManager 节点，并且输入 jps 会显示以下进程</p>
<p><img src="https://raw.githubusercontent.com/ikroal/blog-images/master/yarn-process.png"></p>
<p>其中 ResourceManager 和 NodeManager 是属于 YARN 的进程。</p></li>
<li><p>重复 <code>7</code> 的操作，输入 jps 查询进程</p>
<p><img src="https://raw.githubusercontent.com/ikroal/blog-images/master/yarn-run-process.png"></p>
<p>可以看到新增加了 YarnChild 进程和 MRAppMaster 进程，之所以有两个 YarnChild 进程是因为输入文件夹中存在两个文本文件，这说明了 MapReduce 是通过创建<strong>多个进程并行</strong>计算的。</p></li>
</ul></li>
</ol>
<h3 id="fully-distributed-模式">Fully-Distributed 模式</h3>
<p>集群包括两个节点，节点名分别为 master 和 slave，master 和 slave 的节点配置过程基本一致，以下是配置过程（两个节点差异配置会进行注明，建议先配置好 master 节点的 Hadoop，然后用 scp 命令复制到 slave 节点进行修改。）：</p>
<ol type="1">
<li><p>修改 <strong>/etc/hosts</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">152.136.76.12 master //腾讯云公网ip</span><br><span class="line">94.191.43.137 slave</span><br></pre></td></tr></table></figure></li>
<li><p>免密登录（<strong>⚠️两个节点的登录名必须一致，这里都为 root</strong>）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">master 节点配置本机免密登录以及移动公钥到子节点</span><br><span class="line">ssh-keygen -t rsa -P &#x27;&#x27; -f ~/.ssh/id_rsa</span><br><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line">chmod 0600 ~/.ssh/authorized_keys</span><br><span class="line">scp ~/.ssh/id_rsa.pub root@slave:~/</span><br><span class="line"></span><br><span class="line">slave 节点配置 master 节点免密登录</span><br><span class="line">cat ~/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line">chmod 600  ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></li>
<li><p>修改 etc/hadoop/core-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  <span class="comment">&lt;!--配置访问 nameNode 的 URI--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="comment">&lt;!--指定临时目录，MapReduce 和 HDFS 的许多路径配置依赖此路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改 etc/hadoop/hdfs-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="comment">&lt;!--配置文件的副本数量--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span>    <span class="comment">&lt;!--关闭防火墙--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>slave:50090<span class="tag">&lt;/<span class="name">value</span>&gt;</span> 	<span class="comment">&lt;!-- 指定secondarynamenode位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改 etc/hadoop/mapred-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="comment">&lt;!--表明运行在 YARN 上--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改 etc/hadoop/yarn-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="comment">&lt;!--设置resourcemanager的hostname--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>master<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="comment">&lt;!--指定 nodemanager 获取数据的方式--&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改 etc/hadoop/hadoop-env.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/jvm/jre-1.8.0-openjdk.i386 //master 和 slave 填入各自路径</span><br><span class="line">export HADOOP_LOG_DIR=/root/hadoop/hadoop-2.9.2/logs //可以自己选定</span><br></pre></td></tr></table></figure></li>
<li><p>修改 etc/hadoop/mapred-env.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/jvm/jre-1.8.0-openjdk.i386</span><br></pre></td></tr></table></figure></li>
<li><p>修改 etc/hadoop/yarn-env.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/jvm/jre-1.8.0-openjdk.i386 </span><br><span class="line">export YARN_LOG_DIR=/root/hadoop/hadoop-2.9.2/logs</span><br></pre></td></tr></table></figure></li>
<li><p>修改 etc/hadoop/slaves</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">master</span><br><span class="line">slave</span><br></pre></td></tr></table></figure></li>
<li><p>启动 HDFS 和 YARN</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/hdfs namenode -format //首次运行时格式化</span><br><span class="line">sbin/start-dfs.sh</span><br><span class="line">sbin/start-yarn.sh</span><br></pre></td></tr></table></figure>
<p>在 master 和 slave 节点分别输入 jps 后有</p>
<p><img src="https://raw.githubusercontent.com/ikroal/blog-images/master/master.png"></p>
<p><img src="https://raw.githubusercontent.com/ikroal/blog-images/master/slave.png"></p>
<p>此时可以通过 http://152.136.76.12:8080 (ip 为 master 的公网 ip) 以及 http://152.136.76.12:50070 分别访问 HDFS 的 web 界面和 YARN 的 web 界面，可以看到 HDFS 下有一个 slave 节点，YARN 下有两个节点</p>
<p><img src="https://raw.githubusercontent.com/ikroal/blog-images/master/HDFS-node.png"></p>
<p><img src="https://raw.githubusercontent.com/ikroal/blog-images/master/YARN-node.png"></p></li>
<li><p>运行 wordcount（与伪分布式中一致）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/hdfs dfs -mkdir /user</span><br><span class="line">bin/hdfs dfs -mkdir /user/&lt;username&gt;</span><br><span class="line">bin/hdfs dfs -mkdir /user/&lt;username&gt;/input</span><br><span class="line">bin/hdfs dfs -put LICENSE.txt /user/&lt;username&gt;/input </span><br><span class="line">bin/hadoop jar  share/hadoop/mapreduce/hadoop-mapreduce-examples-2.9.2.jar wordcount input output</span><br><span class="line">bin/hdfs dfs -cat output/part-r-00000</span><br></pre></td></tr></table></figure>
<p>继续用 jps 查看两台主机的进程</p>
<p><img src="https://raw.githubusercontent.com/ikroal/blog-images/master/master-run.png"></p>
<p><img src="https://raw.githubusercontent.com/ikroal/blog-images/master/salve-run.png"></p>
<p>可以看到集群模式中的进程与伪集群模式中的进程没有区别，唯一的区别在于进程在不同的主机上运行。</p></li>
</ol>
<h2 id="错误">错误</h2>
<p>这里主要记录配置过程中遇到的一部分错误</p>
<ol type="1">
<li><p>Container exited with a non-zero exit code 1. Error file: prelaunch.err.</p>
<p>该错误是在腾讯云主机上配置的伪集群模式运行 wordcount 时出现的，尝试了网上的一些办法都没有解决。最后采用自己电脑配置再运行一遍成功，可能是因为云主机的配置问题。</p></li>
<li><p>在 YARN 上运行 Java.net.ConnectException: Connection refused</p>
<p>可能是防火墙的原因，根据 <span class="exturl" data-url="aHR0cDovL3d3dy5hYm91dHl1bi5jb20vdGhyZWFkLTIwMTUzLTEtMS5odG1s">🔗<i class="fa fa-external-link-alt"></i></span> 中的提示解决</p></li>
<li><p>无法外网访问VM中的 Hadoop YARN 的8088端口</p>
<p>无法通过云主机 ip:8088 访问 YARN 的 Web 页面时，不妨通过 <code>netstat -nlp | grep java</code> 查看当前提供 web 服务的端口，如果 ip 是 127.0.0.1 证明存在问题，需要修改 hosts，具体过程见 <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZG9uZ3hpdWNhaS9wLzk2NDE5NjIuaHRtbA==">🔗<i class="fa fa-external-link-alt"></i></span>。</p></li>
<li><p>slave: bash: line 0: cd: /root/hadoop/hadoop-2.9.2: No such file or directory</p>
<p>配置集群模式时出现，主要原因是手动配置 slave 时 Hadoop 存放路径与 master 不一致，只需要将 slave 的 Hadoop 放在与 master 的同一路径下即可解决。</p></li>
</ol>
<h2 id="thanks">Thanks</h2>
<ol type="1">
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8yZDg1MThiMTllZTU=">Hadoop完全分布式部署<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhbmdqbDM4L2FydGljbGUvZGV0YWlscy83NTgzMzc0">Hadoop三种模式介绍<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NDQyNTUzL2FydGljbGUvZGV0YWlscy83ODcxMDE3MA==">hadoop的三种运行模式区别及配置详解<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Deploy</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop 基础之生态圈</title>
    <url>/posts/2b10faae.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>本文主要目的是介绍 Hadoop 的基本架构以及衍生出来的各种工具，以期对 Hadoop 有个整体的认识。</p>
<span id="more"></span>
<h2 id="hadoop-生态系统">Hadoop 生态系统</h2>
<p>Hadoop 生态系统是指以 <strong>分布式的文件系统 HDFS</strong>、<strong>分布式的计算框架 MapReduce</strong> 以及<strong>资源管理器 YARN</strong>为基础构成的分布式数据处理系统，其结构图如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/ikroal/blog-images/master/Hadoop%E6%9E%B6%E6%9E%84%E5%9B%BE2.0.png"></p>
<p>下面将对图中各项组件做一个介绍</p>
<h3 id="hdfs">HDFS</h3>
<p>HDFS 是 Google 于 2003 发表的 分布式文件系统 GFS 论文的开源实现版本，主要目的是使用普通商业电脑解决大量数据的存储以及读取速度问题，在 GFS 出现之前一般主要在<strong>单台计算机</strong>用 RAID 来提高数据存储量和读取速度。但是采用 RAID 一方面成本比较高（需求太高时可能只有超级计算机才能满足），另一方面数据量过大时可能超级计算机也无法满足需求。所以这个时候就需要采取<strong>分布式</strong>的方式去满足扩大存储（多台机器多个磁盘）和增加读取速度的需求（多台机器可以同时读）。</p>
<h3 id="mapreduce">MapReduce</h3>
<p>MapReduce 是一个分布式的计算框架，在 MapReduce 出现之前就已经有了分布式计算这个概念。但是大多数分布式计算只能专门用于处理一类运算，而 Google 在大量实践中总结出了一个通用的编程模型： <code>map</code> 和 <code>reduce</code>。其中 <code>map</code> 是指分开计算的过程，而 <code>reduce</code> 是指合并结果的过程。而在这一编程模型添加的一系列机制和操作构成了 MapReduce。MapReduce 大大降低了分布式计算的门槛，对于开发人员而言只需要编写一系列 <code>map</code> 和 <code>reduce</code> 函数即可完成所需的分布式计算过程。</p>
<h3 id="yarn">YARN</h3>
<p>YARN 是一个资源管理框架，主要作用是负责集群的资源调度和作业任务管理。YARN 的出现源于 Hadoop 不能满足统一使用集群资源的需求，因为 Hadoop1 中集群的资源调度和任务管理与 MapReduce 的执行过程是耦合在一起的，而后续出现的 Spark、Storm 等分布式计算系统其架构和执行过程与 MapReduce 不同，无法直接向 Hadoop 申请集群资源。所以为了实现集群资源的统一管理，在 Hadoop2 中对 MapReduce 进行了一个解耦，抽离出了 YARN 这个框架。</p>
<h3 id="zookeeper">ZooKeeper</h3>
<p>Zookeeper 主要作用是提供一个分布式、高可用的协调服务，解决分布式环境下的数据管理问题：统一命名，状态同步，集群管理，配置同步等。</p>
<h3 id="pig">Pig</h3>
<p>虽然 MapReduce 极大的简化了分布式计算编程的门槛，但是 Yahoo 的工程师依然觉得 MapReduce 编程太过麻烦，所以他们便开发了 Pig 这个脚本语言用于描述对大数据集的操作。这样就可以通过编译 Pig 脚本生成对应的 MapReduce 程序。</p>
<h3 id="hive">Hive</h3>
<p>为了方便使用 SQL 的工程师使用 MapReduce，Facebook 的工程师开发了 Hive，通过 Hive 熟悉数据库的工程师可以无门槛的使用 MapReduce。</p>
<h3 id="mahout">Mahout</h3>
<p>Mahout 的主要目标是创建一些可扩展的机器学习领域经典算法的实现，旨在帮助开发人员更加方便快捷地创建智能应用程序。Mahout 现在已经包含了聚类、分类、推荐引擎（协同过滤）和频繁集挖掘等广泛使用的数据挖掘方法。</p>
<h3 id="tez">Tez</h3>
<p>Tez 是 Apache 最新开源的支持 DAG 作业的计算框架，它直接源于 MapReduce 框架，核心思想是将 Map 和 Reduce 两个操作进一步拆分，即 Map 被拆分成 Input、Processor、Sort、Merge和Output， Reduce 被拆分成 Input、Shuffle、Sort、Merge、Processor 和 Output 等。</p>
<h3 id="hase">Hase</h3>
<p>HBase 是一个建立在 HDFS 之上，面向列的针对结构化数据的可伸缩、高可靠、高性能、分布式和面向列的动态模式数据库。</p>
<h3 id="flume">Flume</h3>
<p>Cloudera 开源的日志收集系统，具有分布式、高可靠、高容错、易于定制和扩展的特点。</p>
<h3 id="sqoop">Sqoop</h3>
<p>Sqoop 是 SQL-to-Hadoop 的缩写，主要用于传统数据库和 Hadoop 之前传输数据。数据的导入和导出本质上是Mapreduce 程序，充分利用了 MR 的并行化和容错性。</p>
<h3 id="ambari">Ambari</h3>
<p>Ambari 的作用来说，就是创建、管理、监视 Hadoop 的集群，是为了让 Hadoop 以及相关的大数据软件更容易使用的一个 web 工具。</p>
<h2 id="总结">总结</h2>
<p>总的来说 HDFS 、MapReduce 以及 YARN 是 Hadoop 的核心组件，而我们学习 Hadoop 最好从核心组件开始学习其原理机制，再逐渐往上层进行了解。</p>
<h2 id="thanks">Thanks</h2>
<ol type="1">
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1X2JlbGlmL2FydGljbGUvZGV0YWlscy84MzA1ODc5OA==">Hadoop生态圈总结——大数据<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pjYl9kYXRhL2FydGljbGUvZGV0YWlscy84MDQwMjQxMQ==">hadoop生态圈各个组件简介<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZ3JpZG1peC9wLzUxMDI2OTQuaHRtbA==">大数据技术Hadoop入门理论系列之一----hadoop生态圈介绍<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly90aW1lLmdlZWtiYW5nLm9yZy9jb2x1bW4vaW50cm8vMTMz">从0开始学大数据---极客时间<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 线程简述</title>
    <url>/posts/c25ef220.html</url>
    <content><![CDATA[<h4 id="线程的作用">线程的作用</h4>
<blockquote>
<p>线程（英语：Thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</p>
</blockquote>
<p>简而言之，线程的存在是为了实现程序的并发操作，提高执行效率。 <span id="more"></span></p>
<h4 id="线程的生命周期">线程的生命周期</h4>
<p><img src="https://raw.githubusercontent.com/ikroal/blog-images/master/thread-life-cycle.png"> 线程的主要生命周期如上图所示，主要分为五个状态：</p>
<ol type="1">
<li>新建态（New）：Java 中使用 new 关键字创建线程之后，这时线程即处于新建态。</li>
<li>就绪态（Runnable）：在线程调用 start() 方法之后，线程即处于就绪态。</li>
<li>运行态（Running）：当就绪态的线程获得 CPU 并且开始执行 run() 方法之后，线程就会处于运行状态。</li>
<li>阻塞态（Blocked）：在处于运行态的线程调用了 sleep() 或 wait() 又或者是调用了一个阻塞式的 IO 方法之后，线程将会处于阻塞状态。</li>
<li>死亡态（Dead）：在线程中的 run() 方法执行完毕、线程抛出异常、调用线程的 stop() 这几种情形下线程将会进入死亡态。</li>
</ol>
<h4 id="线程的实现方法">线程的实现方法</h4>
<p>Java 中线程的实现主要是通过 Thread 类和 Runnable 接口。</p>
<ol type="1">
<li><p>通过 Thread 类实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/** do some things **/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>通过 Runnable 接口实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/** do some things **/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(myThread);</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>相对而言第二种方式更为合理一些，第二种方式创建的线程类只实现了 Runnable 接口，还可以再继承其它的父类。</p>
</blockquote>
<hr>
<h4 id="参考资料">参考资料</h4>
<p><span class="exturl" data-url="aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbnNfY29kZS9hcnRpY2xlL2RldGFpbHMvMTcxNjEyMzc=">【Java并发编程】之六：Runnable和Thread实现多线程的区别（含代码）<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Thread</tag>
      </tags>
  </entry>
  <entry>
    <title>控件添加右键菜单项</title>
    <url>/posts/119a065e.html</url>
    <content><![CDATA[<h2 id="以-jlist-控件为例">以 JList 控件为例</h2>
<p>首先控件需要添加鼠标的监听事件 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mUserList.addMouseListener(<span class="keyword">new</span> MouseAdapter() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseReleased</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.mouseReleased(e);</span><br><span class="line">        showPopup(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure> <span id="more"></span> <code>showPopup()</code> 显示菜单的功能 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showPopup</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.isPopupTrigger() &amp;&amp; mUserList.getSelectedIndex() != -<span class="number">1</span></span><br><span class="line">            &amp;&amp; !mUserList.getSelectedValue().equals(<span class="string">&quot;管理员&quot;</span>)) &#123;</span><br><span class="line">        Object selected = mUserName.getElementAt(mUserList.getSelectedIndex());</span><br><span class="line">        popupMenu.show(e.getComponent(), e.getX(), e.getY());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <code>e.isPopupTrigger()</code> 检测是否是右键，<code>mUserList.getSelectedIndex()</code> 防止在列表空白处点击</p>
<hr>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>AWT</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 基础之集合框架(一)：集合框架</title>
    <url>/posts/501d57d1.html</url>
    <content><![CDATA[<h2 id="问题">问题</h2>
<p>集合类应该是平时使用的非常频繁的类了，但是对其内部构成却一直不太清晰，所以希望通过本篇文章尝试去理解集合框架的整体设计以及集合存在的必要性。在开始分析之前首先让我们思考以下问题：</p>
<ol type="1">
<li>集合存在的意义，集合和数组的区别</li>
<li>集合框架的设计意图</li>
<li>集合的常用操作<span id="more"></span></li>
</ol>
<h2 id="集合存在的意义以及与数组的区别">集合存在的意义以及与数组的区别</h2>
<p>想要了解 Java 为什么会设计集合，就得先明白集合的出现解决了什么问题，关于这一问题「Java 编程思想」中是这么描述的</p>
<blockquote>
<p>如果一个程序中只包含固定数量的且其生命周期都是已知的对象，那么这是一个非常简单的程序。 通常，程序总是根据运行时才知道的某些条件去创建新对象。在此之前，不会知道所需对象的数量，甚至不知道确切的类型。</p>
</blockquote>
<p>所以之所以需要集合是因为在编程的过程中会需要保存<strong>数量不定</strong>、<strong>类型不定</strong>的数据。</p>
<p>针对<strong>数量不定</strong>考虑下面这种情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String STOP_FLAG = <span class="string">&quot;s&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String collection[] = <span class="keyword">new</span> String[COUNT];</span><br><span class="line">        System.out.println(<span class="string">&quot;输入即将保存的数据&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!(collection[i] = scanner.next()).equals(STOP_FLAG)) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; collection.length; i++) &#123;</span><br><span class="line">            System.out.print(collection[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>作为一个简单的输入程序，采用数组的形式去保存用户的输入，当用户的输入超过数组可容纳的数量的时候便会抛出异常，这个问题如何解决呢？一种方式是将数组的数量分配的足够大，但是采取这种方式极有可能浪费内存空间。另一种方式则是动态扩展大小，通过动态扩展大小既能够容纳足够多的元素，又能够节约内存空间。而集合正具备动态扩展大小这一特性，所以在这种情况下，集合就体现出了它的作用。 至于<strong>类型不定</strong>，考虑另一种情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rookieyang.collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataArray</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String datas[];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataArray</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        datas = <span class="keyword">new</span> String[COUNT];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//也可自行对数组进行动态扩展，这里只是测试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addData</span><span class="params">(String data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            datas[index] = data;</span><br><span class="line">            index++;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;超出最大的存储范围&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.rookieyang.collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataCollection</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; datas;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addData</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        datas.add(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出对于数组而言在动态添加数据会略显麻烦，而且只能保存 String 类型数据，但对于采用集合而言，使用起来不仅简单而且其扩展性也强，我们可以根据自己的需求决定集合中保存何种类型数据，这就实现了代码的复用。 对于集合和数组而言，其主要区别如下</p>
<ul>
<li>数组是静态的，一个数组实例具有固定的大小，集合是动态的，可以根据实际需要动态扩展大小</li>
<li>数组既可以保存基本类型，也可保存引用类型，集合只能保存引用类型，在保存基本类型的时候会自动装箱</li>
</ul>
<h2 id="集合整体框架分析">集合整体框架分析</h2>
<p><img src="https://raw.githubusercontent.com/ikroal/blog-images/master/collections-all-structure.png"></p>
<p>首先看下集合的整体框架图，对于集合而言主要分为两个部分：Collection 和 Map，其中 Collection 主要保存的是单个元素，而 Map 则可以将某些对象与其它一些对象存在的关系用 key-value 方式保存下来。接下来我们将就这两个部分展开分析。</p>
<h3 id="collection-接口">Collection 接口</h3>
<h4 id="结构分析">结构分析</h4>
<p>这里为了方便分析只展示了接口的继承结构</p>
<p><img src="https://raw.githubusercontent.com/ikroal/blog-images/master/collection-structure.png"></p>
<p>首先查看 Iterable</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function">Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">for</span> (T t : <span class="keyword">this</span>) &#123;</span><br><span class="line">            action.accept(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Spliterator&lt;T&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Spliterators.spliteratorUnknownSize(iterator(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Itrable 接口中拥有一个 iterator 方法以及两个 1.8 添加的默认方法：</p>
<ul>
<li>iterator：返回一个迭代器用于遍历</li>
<li>forEach：根据给定的 action 处理每个元素</li>
<li>spliterator：提供了一个用于并行遍历的迭代器，由于这里主要探讨结构设计，所以暂且不展开说明</li>
</ul>
<p>看到这里我产生了第一个疑问，为什么 Collection 不直接继承 Iterator 接口，而需要用 Iterable 进行包装之后再继承呢？ 这里假设存在一个 CustomizeCollection 接口在包含了 Collection 接口方法的基础上继承了 Iterator 接口而不是 Iterable（或者是直接包含了 Collection 接口方法以及 Iterator 接口方法），那么当我们实现 CustomizeCollection 接口的时候所得到的 CustomizeClass 类结构将如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/ikroal/blog-images/master/customizeClass.png"> 可以看到如果想实现 CustomizeCollection 则必须要实现 Iterator 接口方法，很显然采用这种方式可能导致在不同的 CustomizeCollection 接口实现类中存在相同的 Itrator 接口方法实现（遍历这一操作某些时候可能是通用的），这样一来就降低了<strong>代码的复用性</strong>，另外从<strong>单一职责</strong>的角度来考虑，CustomizeCollection 接口中揉合了集合元素的管理功能以及迭代器的功能，而采用 Iterable 包装之后则可以将这两个功能进行一定程度上的分割。</p>
<p>接着从 Collection 又延展出三个接口，这三个接口是对集合功能的具体化：</p>
<ul>
<li>Set 表示的是无序、不存在重复元素的集合</li>
<li>List 表示的是一种有序、可重复元素的集合</li>
<li>Queue 表示的是一种队列，其实队列也是一种有序的集合，但之所以会单独设计出一个接口的原因在于，Queue 接口去除了很多不需要的功能，使得接口本身更符合<strong>单一职责</strong>以及<strong>接口隔离</strong>原则。</li>
</ul>
<h4 id="功能分析">功能分析</h4>
<p>Collection 接口的功能大致概括如下（暂不介绍 1.8 引入的默认方法）</p>
<ul>
<li>增加
<ul>
<li>boolean add(E e) 增加单元元素</li>
<li>boolean addAll(Collection&lt;? extends E&gt; c) 增加集合 c 的元素</li>
</ul></li>
<li>删除
<ul>
<li>boolean remove(Object o) 移除元素</li>
<li>boolean removeAll(Collection&lt;?&gt; c) 移除集合 c 的元素</li>
<li>void clear() 清空集合</li>
</ul></li>
<li>查询
<ul>
<li>boolean contains(Object o) 查询集合是否存在元素 o</li>
<li>boolean containsAll(Collection&lt;?&gt; c)查询当前集合是否存在集合 c 中的所有元素</li>
<li>boolean isEmpty() 查询是否集合为空</li>
<li>int size() 查询集合的大小</li>
</ul></li>
<li>其它
<ul>
<li>Iterator<E> iterator() 返回迭代器</E></li>
<li>boolean retainAll(Collection&lt;?&gt; c) 取当前集合和集合 c 的交集</li>
</ul></li>
</ul>
<p>Set 接口与 Colleciton 接口定义的方法完全一致</p>
<p>List 接口在 Collectiion 接口基础上新增了一些与索引有关的方法</p>
<ul>
<li>增加
<ul>
<li>void add(int index, E element) 在 index 处插入元素</li>
</ul></li>
<li>删除
<ul>
<li>E remove(int index) 删除 index 处的元素</li>
</ul></li>
<li>修改
<ul>
<li>E set(int index, E element) 修改 index 的元素为 element</li>
</ul></li>
<li>查询
<ul>
<li>E get(int index) 获取 index 处的元素</li>
<li>int indexOf(Object o) 获取元素 o 第一次出现的 index</li>
<li>int lastIndexOf(Object o) 获取元素 o 最后一次出现的 index</li>
</ul></li>
<li>其它
<ul>
<li>ListIterator<E> listIterator() 返回 ListIterator 类型的迭代器</E></li>
<li>ListIterator<E> listIterator(int index) 返回从 index 开始的 ListIterator 类型的迭代器</E></li>
</ul></li>
</ul>
<p>Queue 接口新增的方法如下</p>
<ul>
<li>出队
<ul>
<li>E peek() 出队但是不删除元素，在队列为空的时候返回 null</li>
<li>E element() 出队但是不删除元素，在队列为空的时候抛出异常</li>
<li>E poll() 出队并且删除元素，在队列为空的时候返回null</li>
<li>E remove() 出队并且删除元素，在队列为空的时候抛出异常</li>
</ul></li>
<li>入队
<ul>
<li>boolean offer(E e)</li>
</ul></li>
</ul>
<h3 id="map-接口">Map 接口</h3>
<h4 id="结构分析-1">结构分析</h4>
<p>Map 是一个单一的接口，并没有在此基础上进行扩展，但在 Map 接口的内部有一个 Entry 接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function">K <span class="title">getKey</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function">V <span class="title">getValue</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function">V <span class="title">setValue</span><span class="params">(V value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到 Entry 里面封装的都是和 Map 中元素有关的操作，这一接口主要用来规定 Map 中用来存储 key-value 所需要提供的功能</p>
<h4 id="功能分析-1">功能分析</h4>
<p>Map 接口的功能大致如下：</p>
<ul>
<li>增加或修改
<ul>
<li>V put(K key, V value) 存储 key 和 value，如果 key 已经存在则会将原来的 value 替换为新的 value</li>
<li>void putAll(Map&lt;? extends K, ? extends V&gt; m) 将 m 中的 key 和 value 添加到当前 Map 中</li>
</ul></li>
<li>删除
<ul>
<li>V remove(Object key) 移除指定的 key 以及关联的 value</li>
<li>void clear() 清空 Map</li>
</ul></li>
<li>查找
<ul>
<li>V get(Object key) 获取 key 关联的 value</li>
<li>boolean containsKey(Object key) 判断当前 Map 是否包含指定的 key</li>
<li>boolean containsValue(Object value) 判断当前Map 是否包含指定的 value</li>
<li>boolean isEmpty() 判断当前 Map 是否为空</li>
<li>int size() 获取当前 Map 的大小</li>
</ul></li>
<li>其它
<ul>
<li>Set<K> keySet() 将 key 生成 Set 集合</K></li>
<li>Collection<V> values() 将 value 生成集合</V></li>
<li>Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet() 将 Map 中保存的元素生成 Set 集合，一般用于遍历集合</li>
</ul></li>
</ul>
<p>从 Map 接口所提供的方法来看，大部分方法其实与 Collection 接口中无异，只是在 Collection 中是对单个元素进行操作，但是在 Map 接口中是对 key-value 这种关联元素进行操作。</p>
<h2 id="总结">总结</h2>
<p>Java 集合框架以 Colleciton 和 Map 为基础，高度抽象了对单个元素以及键值对的操作，而在此基础上为了减轻业务开发难度，集合框架又提供了多个实现类以供使用，尽管看起来错综复杂，但是只要了解核心的接口之间的继承关系便可对集合框架有个较为清晰的认识。</p>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 下 Excel 的读取与写入</title>
    <url>/posts/35be2f4f.html</url>
    <content><![CDATA[<h4 id="前言">前言</h4>
<p>前段时间需要将 MySql 的数据导出到指定格式的 Excel 表格中去，由于是基于 Python3.5 的程序，所以最后选定了 <code>xlrd</code> 库来进行 Excel 的读取操作，写入操作则由 <code>xlsxwriter</code> 和 <code>xlutils</code> 库来进行，其中 <code>xlutils</code> 用于对 Excel 文件的追加。 <span id="more"></span></p>
<h4 id="excel-文件的读取">Excel 文件的读取</h4>
<ol type="1">
<li>打开 Excel 文件<br> <code>workbook = xlrd.open_workbook(r'查询条件.xlsx')</code></li>
<li>获取所有 sheet<br> <code>workbook.sheet_names()</code></li>
<li>根据sheet索引或者名称获取 sheet 内容<br> <code>sheet1 = workbook.sheet_by_index(0)  # sheet索引从0开始</code><br> <code>sheet1 = data.sheet_by_name(u'Sheet1')#通过名称获取</code></li>
<li>获取 <code>sheet1</code> 的行数<br> <code>sheet1.nrows</code></li>
<li>获取 <code>sheet1</code> 的列数<br> <code>sheet1.ncols</code></li>
<li>获取指定行列的值<br> <code>sheet1.row(row)[col].value</code></li>
</ol>
<h4 id="excel-文件的写入追加">Excel 文件的写入追加</h4>
<ol type="1">
<li>创建 Excel 文件<br> <code>workbook = xlsxwriter.Workbook(year + title + &quot;.xls&quot;)</code></li>
<li>增加 Sheet<br> <code>worksheet = workbook.add_worksheet()</code></li>
<li><p>写入数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">worksheet.write(<span class="string">&#x27;A1&#x27;</span>, <span class="string">&#x27;tag&#x27;</span>)</span><br><span class="line">worksheet.write(<span class="string">&#x27;B1&#x27;</span>, <span class="string">&#x27;文章名字&#x27;</span>)</span><br><span class="line">sheet_write.write(rows, <span class="number">0</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">workbook.close()</span><br></pre></td></tr></table></figure></li>
<li><p>追加数据<br> 追加之前需要将 <code>xlutils.copy</code> 导入到工程中，首先用 <code>xlrd</code> 打开旧的 Excel 文件，然后利用 <code>xlutils.copy</code> 中的 copy() 方法复制已经存在的数据，最终在原有数据的基础上进行写入。具体代码如下：</p>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入模块</span></span><br><span class="line"><span class="keyword">from</span> xlutils.copy <span class="keyword">import</span> copy</span><br><span class="line"><span class="comment">#打开文件</span></span><br><span class="line">resultwork = xlrd.open_workbook(year + title + <span class="string">&quot;.xls&quot;</span>)</span><br><span class="line"><span class="comment">#获取行数</span></span><br><span class="line">sheet1 = resultwork.sheet_by_index(<span class="number">0</span>)</span><br><span class="line">rows = sheet1.nrows</span><br><span class="line"><span class="comment">#追加数据，保存</span></span><br><span class="line">old_excel = copy.copy(resultwork)</span><br><span class="line">sheet_write = old_excel.get_sheet(<span class="number">0</span>)</span><br><span class="line">sheet_write.write(rows, <span class="number">0</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">old_excel.save(year + title + <span class="string">&quot;.xls&quot;</span>)</span><br></pre></td></tr></table></figure></p></li>
</ol>
<hr>
<h4 id="参考资料">参考资料</h4>
<ol type="1">
<li><span class="exturl" data-url="aHR0cDovL3hsc3h3cml0ZXIucmVhZHRoZWRvY3MuaW8vaW5kZXguaHRtbCM=">xlsxwriter 文档<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5qYjUxLm5ldC9hcnRpY2xlLzYzNDk3Lmh0bQ==">Python中使用第三方库xlutils来追加写入Excel文件示例<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Python Library</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 下 BeautifulSoup 的基本使用</title>
    <url>/posts/3693c682.html</url>
    <content><![CDATA[<h2 id="beautifulsoup-简介">BeautifulSoup 简介</h2>
<p>BeautifulSoup 是一个可以从 HTML 或 XML 文件中提取数据的 Python 库.<span id="more"></span></p>
<h2 id="库的安装">库的安装</h2>
<p>库的安装参考此篇文章 <a href="/posts/b2073700.html" title="requests 库的使用">requests 库的使用</a></p>
<h2 id="基本使用">基本使用</h2>
<ol type="1">
<li><p>导入 BeautifulSoup<br> <code>from bs4 import BeautifulSoup</code></p></li>
<li><p>创建文档对象<br> <code>soup = BeautifulSoup(html文档, 'html.parser')</code><br> 配合 Python 内置的 html 解析器，将 html 文档传入 BeautifulSoup 构造方法。</p></li>
<li>获取数据<br>BeautifulSoup提供了如下几种方式搜索文档获取数据：
<ul>
<li><code>find_all()</code> 全文搜索<br> 返回文档中所有符合要求的数据。</li>
<li><code>find()</code> 单次搜索<br> 返回文档中第一个符合要求的数据。</li>
<li><code>select()</code> CSS选择器查找<br> <code>soup.select(&quot;td[align] &gt; a[target=_blank]&quot;)</code></li>
</ul>
<p><code>find_all()</code> 中可以通过 <code>limit</code> 参数限制结果数量，如：<br> <code>soup.find_all(&quot;a&quot;, limit=2)</code><br> 同时上述的 <code>find_all()</code> 和 <code>find()</code> 也可配合 CSS 选择器进行使用，如：<br> <code>titleList = soup.find_all(&quot;a&quot;, &#123;&quot;class&quot;: &quot;fz14&quot;&#125;)</code></p></li>
</ol>
<hr>
<h2 id="参考资料">参考资料</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY3J1bW15LmNvbS9zb2Z0d2FyZS9CZWF1dGlmdWxTb3VwL2JzNC9kb2MvaW5kZXguemguaHRtbA==">BeautifulSoup 文档<i class="fa fa-external-link-alt"></i></span> ​</p>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Python Library</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 下 Flask 结合 Neo4j 构建管理系统（一）</title>
    <url>/posts/7bdd0062.html</url>
    <content><![CDATA[<h4 id="简介">简介</h4>
<blockquote>
<p>Flask 是一个使用 Python 编写的轻量级 Web 应用框架。其 WSGI 工具箱采用 Werkzeug ，模板引擎则使用 Jinja2 。</p>
</blockquote>
<h4 id="安装">安装</h4>
<p>在终端中输入 <code>sudo pip install Flask</code> 即可进行安装（如果不想进行全局安装，请参考官方文档）。<span id="more"></span></p>
<h4 id="创建文件夹">创建文件夹</h4>
<p>首先需要创建如下结构的文件夹：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/flaskr</span><br><span class="line">    /static</span><br><span class="line">    /templates</span><br></pre></td></tr></table></figure>
<ul>
<li>flaskr 是工程文件夹名</li>
<li>static 是用于放置 css 和 javascript 文件的文件夹</li>
<li>templates 是放置网页模板的文件夹</li>
<li>如果用 PyCharm 开发，在创建 templates 文件夹后需要按住快捷键 <code>Command + ,</code> 在 Project→Project Structure，选择 templates 文件夹后点击 <code>Mark as</code> 中的 <code>Templates</code></li>
</ul>
<h4 id="测试">测试</h4>
<p>在 flaskr 目录下创建 <code>app.py</code> 的文件，输入如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>
<ul>
<li><code>app = Flask(__name__)</code> 创建一个该类的实例，第一个参数是应用模块或者包的名称。 如果你使用单一的模块（如本例），你应该使用 <strong>name</strong> ，因为模块的名称将会因其作为单独应用启动还是作为模块导入而有不同（ 也即是 '<strong>main</strong>' 或实际的导入名）。这是必须的，这样 Flask 才知道到哪去找模板、静态文件等等。</li>
<li><code>__name__</code> 指当前的模块名，当模块直接运行时，<code>__name__</code> 为 <code>__main__</code>，当模块被导入运行时，<code>__name__</code> 为模块名字。</li>
<li>route() 装饰器告诉 Flask 什么样的URL 能触发我们的函数，函数的名字也在生成 URL 时被特定的函数采用，这个函数返回我们想要显示在用户浏览器中的信息。</li>
</ul>
<h4 id="运行结果">运行结果</h4>
<p>运行之后进入 <code>http://localhost:5000</code> 可以看到如下结果： <img src="https://raw.githubusercontent.com/ikroal/blog-images/master/Flask-run.png"></p>
<hr>
<h4 id="参考资料">参考资料</h4>
<p><span class="exturl" data-url="aHR0cDovL2RvY3Muamlua2FuLm9yZy9kb2NzL2ZsYXNrL2luZGV4Lmh0bWw=">Flask 文档<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 下 Flask 结合 Neo4j 构建管理系统（三）</title>
    <url>/posts/6d54fe8.html</url>
    <content><![CDATA[<h4 id="需求">需求</h4>
<p>核心需求如下： * 管理系统登录 * 从 Neo4j 中获取数据信息图形化显示出来 * 节点的关系查询及溯源查询 * 对 Neo4j 进行节点的增删改 <span id="more"></span></p>
<h4 id="管理系统登录">管理系统登录</h4>
<p>首先需要在工程目录下创建 <code>login.html</code> 和 <code>models.py</code>，前者为登录界面用于测试与 Neo4j 的连接，后者是一个用户类用于处理用户的各项操作。 <img src="http://i.imgur.com/yJzMEx8.png" alt="结构"></p>
<p>本次连接采用了 Py2neo v3 库，安装可以通过 pip 安装：<code>pip install py2neo</code><br> 安装成功之后在 <code>models.py</code> 文件输入如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> passlib.handlers <span class="keyword">import</span> bcrypt</span><br><span class="line"><span class="keyword">from</span> py2neo <span class="keyword">import</span> authenticate, Graph, Node</span><br><span class="line"></span><br><span class="line">authenticate(<span class="string">&quot;localhost:7474&quot;</span>, <span class="string">&quot;neo4j&quot;</span>, <span class="string">&quot;yy0758jyl&quot;</span>)</span><br><span class="line">graph = Graph()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, username</span>):</span></span><br><span class="line">        self.username = username</span><br><span class="line">        user_data = self.find()</span><br><span class="line">        <span class="comment">#获取登录用户标签</span></span><br><span class="line">        <span class="keyword">if</span> user_data:</span><br><span class="line">            self.label = user_data[<span class="string">&#x27;label&#x27;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.label = <span class="string">&quot;User&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span>(<span class="params">self</span>):</span></span><br><span class="line">        user = &#123;&#125;</span><br><span class="line">        data_user = graph.find_one(<span class="string">&quot;User&quot;</span>, <span class="string">&quot;username&quot;</span>, self.username)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data_user:</span><br><span class="line">            data_admin = graph.find_one(<span class="string">&quot;Admin&quot;</span>, <span class="string">&quot;username&quot;</span>, self.username)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data_admin:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(user)</span><br><span class="line">                user[<span class="string">&#x27;username&#x27;</span>] = data_admin[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">                user[<span class="string">&#x27;password&#x27;</span>] = data_admin[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">                user[<span class="string">&#x27;label&#x27;</span>] = <span class="string">&#x27;Admin&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            user[<span class="string">&#x27;username&#x27;</span>] = data_user[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">            user[<span class="string">&#x27;password&#x27;</span>] = data_user[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">            user[<span class="string">&#x27;label&#x27;</span>] = <span class="string">&#x27;User&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> user</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">register</span>(<span class="params">self, password</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.find():</span><br><span class="line">            user = Node(<span class="string">&quot;User&quot;</span>, username=self.username, password=bcrypt.encrypt(password))</span><br><span class="line">            graph.create(user)</span><br><span class="line">            cypher = <span class="string">&#x27;MATCH (admin:Admin) MATCH(user:User &#123;username:\&#x27;&#x27;</span> + self.username + <span class="string">&#x27;\&#x27;&#125;) CREATE (admin)-[manage:Manage]-&gt;(user)&#x27;</span></span><br><span class="line">            graph.run(</span><br><span class="line">                <span class="string">&#x27;MATCH (admin:Admin) MATCH(user:User &#123;username:\&#x27;&#x27;</span> + self.username + <span class="string">&#x27;\&#x27;&#125;) CREATE (admin)-[manage:Manage]-&gt;(user)&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">verify_pass</span>(<span class="params">self, password</span>):</span></span><br><span class="line">        user = self.find()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> bcrypt.verify(password, user[<span class="string">&quot;password&quot;</span>])</span><br></pre></td></tr></table></figure>
<ul>
<li><code>authenticate()</code> 用于连接 Neo4j 数据库，三个参数依次是地址，用户名，密码。</li>
<li><code>find(self)</code> 用户查找用户。</li>
<li><code>register(self, password)</code> 注册用户。</li>
<li><code>verify_pass(self, password)</code> 登录验证。</li>
</ul>
<p><code>app.py</code> 代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&#x27;sugarsugar&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;registeruser&quot;</span> <span class="keyword">in</span> request.form:</span><br><span class="line">            username = request.form[<span class="string">&#x27;registeruser&#x27;</span>]</span><br><span class="line">            password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> username <span class="keyword">or</span> <span class="keyword">not</span> password:</span><br><span class="line">                flash(<span class="string">&#x27;请输入用户名和密码&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                user = User(username)</span><br><span class="line">                <span class="built_in">print</span>(user)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> user.register(password):</span><br><span class="line">                    flash(<span class="string">&#x27;一个用户已经存在&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    flash(<span class="string">&#x27;注册成功&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">            password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line"></span><br><span class="line">            user = User(username)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> username <span class="keyword">or</span> <span class="keyword">not</span> password:</span><br><span class="line">                flash(<span class="string">&#x27;请输入用户名和密码&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> user.verify_pass(password):</span><br><span class="line">                flash(<span class="string">&#x27;无效登录&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                session[<span class="string">&quot;username&quot;</span>] = user.username</span><br><span class="line">                session[<span class="string">&#x27;label&#x27;</span>] = user.label</span><br><span class="line">                <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;main_view&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li><code>app.secret_key</code> 由于使用了 Session 所以必须要设置该项值。</li>
<li><code>flash()</code> 用于向网页发送信息。</li>
</ul>
<h4 id="数据查询">数据查询</h4>
<p>在测试完登录功能之后，首先在 <code>templates</code> 文件夹下创建 <code>view.html</code> 文件，作为登录后跳转的页面： <img src="http://i.imgur.com/nzrPu1G.png" alt="主页面"> 执行查询后相应的前端代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> query = $(<span class="string">&quot;#search&quot;</span>).find(<span class="string">&quot;input[name=condition]&quot;</span>).val();</span><br><span class="line">        <span class="keyword">var</span> flag = $(<span class="string">&quot;#search&quot;</span>).find(<span class="string">&quot;input[name=trace]&quot;</span>).prop(<span class="string">&#x27;checked&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="literal">true</span> &amp;&amp; query == <span class="string">&quot;ebay&quot;</span>) &#123;</span><br><span class="line">            alert(<span class="string">&quot;不可为根节点&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $.get(<span class="string">&quot;/search&quot;</span> , &#123;<span class="attr">q</span>: query, <span class="attr">f</span> : flag&#125;,</span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(data.nodes.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    update(data.nodes, data.links);</span><br><span class="line">                    update_static(data.nodes);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    alert(<span class="string">&quot;查询结果为空&quot;</span>);</span><br><span class="line">            &#125;, <span class="string">&quot;json&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $(<span class="string">&quot;#search&quot;</span>).submit(search);</span><br><span class="line">    search();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>后台处理代码：</p>
<ul>
<li><p><code>app.py</code> 代码：</p>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/search&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_search</span>():</span></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">      q = request.args.get(<span class="string">&#x27;q&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">      f = request.args.get(<span class="string">&#x27;f&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">except</span> KeyError:</span><br><span class="line">      <span class="keyword">return</span> []</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">      user = User(session.get(<span class="string">&quot;username&quot;</span>))</span><br><span class="line">      results = user.search_graph(q, f)</span><br><span class="line">      <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure></p></li>
<li><p><code>models.py</code> 代码：</p>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_graph</span>(<span class="params">self, condition, flag=<span class="literal">False</span></span>):</span></span><br><span class="line">    nodes = []</span><br><span class="line">    rels = []</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="comment">#关系查询</span></span><br><span class="line">    query = <span class="string">&quot;MATCH (m)&lt;-[:BELONG]-(a) WHERE m.name CONTAINS \&#x27;&quot;</span> + condition + <span class="string">&quot;\&#x27; or a.name CONTAINS \&#x27;&quot;</span> + condition + \</span><br><span class="line">            <span class="string">&quot;\&#x27; RETURN properties(m) as start_node, labels(m) as labels, &quot;</span> \</span><br><span class="line">            <span class="string">&quot;collect(properties(a)) as cast,collect(labels(a)) as cast_labels&quot;</span></span><br><span class="line">    <span class="comment">#溯源查询</span></span><br><span class="line">    query_trace = <span class="string">&quot;Match (n) WHERE n.name contains \&#x27;&quot;</span> + condition + \</span><br><span class="line">                  <span class="string">&quot;\&#x27; MATCH path = shortestPath( (m:Website)-[:BELONG*..5]-(n) )&quot;</span> \</span><br><span class="line">                  <span class="string">&quot; where labels(n)=&#x27;Sort&#x27; or labels(n)=&#x27;GOODS&#x27;&quot;</span> \</span><br><span class="line">                  <span class="string">&quot; RETURN nodes(path) AS nodes, EXTRACT(node IN nodes(path) | ID(node)) AS ids &quot;</span> \</span><br><span class="line">                  <span class="string">&quot;,EXTRACT(node IN nodes(path) | labels(node)) AS labels&quot;</span></span><br><span class="line">    results = graph.run(query)</span><br><span class="line">    <span class="keyword">if</span> flag == <span class="string">&quot;true&quot;</span> <span class="keyword">and</span> condition:</span><br><span class="line">        nodes_act = []</span><br><span class="line">        rels_act = []</span><br><span class="line">        <span class="keyword">for</span> node_trace, id_trace, label_trace <span class="keyword">in</span> graph.run(query_trace):</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> node_ori <span class="keyword">in</span> node_trace:</span><br><span class="line">                node_act = &#123;&#125;</span><br><span class="line">                node_keys = <span class="built_in">list</span>(node_ori.keys())</span><br><span class="line">                <span class="keyword">for</span> key <span class="keyword">in</span> node_keys:</span><br><span class="line">                    node_act[key] = node_ori.get(key)</span><br><span class="line">                node_act[<span class="string">&#x27;label&#x27;</span>] = label_trace[j][<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    target_act = nodes_act.index(node_act)</span><br><span class="line">                    j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">except</span> ValueError:</span><br><span class="line">                    target_act = <span class="built_in">len</span>(nodes_act)</span><br><span class="line">                    nodes_act.append(node_act)</span><br><span class="line">                    j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> j &lt; <span class="built_in">len</span>(node_trace):</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        source_act = nodes_act.index(self.get_node(node_trace[j], label_trace[j]))</span><br><span class="line">                    <span class="keyword">except</span> ValueError:</span><br><span class="line">                        source_act = <span class="built_in">len</span>(nodes_act)</span><br><span class="line">                    rels_act.append(&#123;<span class="string">&quot;source&quot;</span>: source_act, <span class="string">&quot;target&quot;</span>: target_act&#125;)</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;nodes&quot;</span>: nodes_act, <span class="string">&quot;links&quot;</span>: rels_act&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> start_nodes, start_labels, end_nodes, end_labels <span class="keyword">in</span> results:</span><br><span class="line">        keys = <span class="built_in">list</span>(start_nodes.keys())</span><br><span class="line">        node = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> keys:</span><br><span class="line">            node[key] = start_nodes.get(key)</span><br><span class="line">        node[<span class="string">&#x27;label&#x27;</span>] = start_labels[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            target = nodes.index(node)</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            nodes.append(node)</span><br><span class="line">            target = i</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> end_node, label <span class="keyword">in</span> <span class="built_in">zip</span>(end_nodes, end_labels):</span><br><span class="line">            end_keys = <span class="built_in">list</span>(end_node.keys())</span><br><span class="line">            end = &#123;&#125;</span><br><span class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> end_keys:</span><br><span class="line">                end[key] = end_node.get(key)</span><br><span class="line">            end[<span class="string">&#x27;label&#x27;</span>] = label[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                source = nodes.index(end)</span><br><span class="line">            <span class="keyword">except</span> ValueError:</span><br><span class="line">                nodes.append(end)</span><br><span class="line">                source = i</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            rels.append(&#123;<span class="string">&quot;source&quot;</span>: source, <span class="string">&quot;target&quot;</span>: target&#125;)</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;nodes&quot;</span>: nodes, <span class="string">&quot;links&quot;</span>: rels&#125;)</span><br></pre></td></tr></table></figure></p></li>
<li><p>数据的可视化采用 d3.js，具体过程参考<a href="/posts/42f7685.html" title="d3.js 绘制力导向图">d3.js 绘制力导向图</a>，返回的数据格式限定为 Json 格式，nodes 保存节点信息，links 保存节点关系：</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;nodes&quot;: [&#123;&#x27;label&#x27;: &#x27;Website&#x27;, &#x27;name&#x27;: &#x27;ebay&#x27;&#125;, &#123;&#x27;label&#x27;: &#x27;Sort&#x27;, &#x27;name&#x27;: &#x27;Health &amp; Beauty&#x27;&#125;, &#123;&#x27;label&#x27;: &#x27;Sort&#x27;, &#x27;name&#x27;: &#x27;Musical Instruments &amp; Gear&#x27;&#125;],</span><br><span class="line"> &quot;links&quot;:[&#123;&#x27;target&#x27;: 0, &#x27;source&#x27;: 1&#125;, &#123;&#x27;target&#x27;: 0, &#x27;source&#x27;: 2&#125;]&#125;</span><br></pre></td></tr></table></figure></p></li>
</ul>
<p>查询效果： <img src="http://i.imgur.com/sg9rkGt.png" alt="查询效果"></p>
<hr>
<h4 id="参考资料">参考资料</h4>
<p><span class="exturl" data-url="aHR0cDovL3B5Mm5lby5vcmcvdjMvaW5kZXguaHRtbCM=">Py2neo v3 Handbook<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Flask</tag>
        <tag>Neo4j</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 下 Flask 结合 Neo4j 构建管理系统（二）</title>
    <url>/posts/4bcbecba.html</url>
    <content><![CDATA[<h4 id="neo4j-简介">Neo4j 简介</h4>
<blockquote>
<p>Neo4j 是一个高性能的，NOSQL 图形数据库，它将结构化数据存储在网络上而不是表中。它是一个嵌入式的、基于磁盘的、具备完全的事务特性的 Java 持久化引擎，但是它将结构化数据存储在网络(从数学角度叫做图)上而不是表中。</p>
</blockquote>
<span id="more"></span>
<h4 id="安装">安装</h4>
<p>进入<span class="exturl" data-url="aHR0cHM6Ly9uZW80ai5jb20vZG93bmxvYWQv">Neo4j 下载地址<i class="fa fa-external-link-alt"></i></span>选择社区版进行下载安装。</p>
<h4 id="使用">使用</h4>
<p>Neo4j 提供了 Cypher 查询语言对数据库数据进行操作，在使用 Neo4j 之前必须先了解 Cypher，可以参考官方提供了一些例程和开发文档： <span class="exturl" data-url="aHR0cHM6Ly9uZW80ai5jb20vZGV2ZWxvcGVyL2N5cGhlci1xdWVyeS1sYW5ndWFnZS8=">Intro to Cypher<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly9uZW80ai5jb20vZG9jcy9kZXZlbG9wZXItbWFudWFsLzMuMS8=">The Neo4j Developer Manual v3.1<i class="fa fa-external-link-alt"></i></span> 第一个介绍了 Cypher 的一些基本概念方便去理解 Cypher 语言，第二个则是一份开发者文档，详细介绍了各操作的含义以及一些示例语句。 在了解 Cypher 后，就可以利用 Neo4j 控制台做一些基本的查询测试： * 首先需要开启服务器： <img src="https://raw.githubusercontent.com/ikroal/blog-images/master/Neo4j-start.png"> * 在开启服务器后进入 <code>http://localhost:7474</code> 第一次进入需要设置密码 * 在主界面中选择 <code>Jump into code</code>，之后选择 <code>Movie Graph</code> 中的 Create a graph，则可以看到一个 Neo4j 官方提供的构造数据图的代码，点击之后运行即可。 <img src="https://raw.githubusercontent.com/ikroal/blog-images/master/neo4j-main.png"> <img src="https://raw.githubusercontent.com/ikroal/blog-images/master/neo4j-execute.png"> <img src="https://raw.githubusercontent.com/ikroal/blog-images/master/neo4j-result.png"></p>
<ul>
<li><p>在创建了数据图之后，点击左侧的第一个导航栏，可以看见数据图的各项信息。</p>
<p><img src="https://raw.githubusercontent.com/ikroal/blog-images/master/neo4j-slidebar.png"></p></li>
<li><p>查询 这里以查询节点 <code>name</code> 属性为 Audrey Tautou 到节点 <code>title</code> 属性为 As Good as It Gets 且节点关系为 <code>ACTED_IN</code> 间隔不超过 5 的最短路径为例，在输入框中输入如下代码：</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MATCH (you &#123;name:&quot;Audrey Tautou&quot;&#125;)</span><br><span class="line">MATCH (expert &#123;title:&quot;As Good as It Gets&quot;&#125;)</span><br><span class="line">MATCH path = shortestPath( (you)-[:ACTED_IN*..5]-(expert) )</span><br><span class="line">RETURN path</span><br></pre></td></tr></table></figure> 运行之后结果如下： <img src="https://raw.githubusercontent.com/ikroal/blog-images/master/query-result.png"></p></li>
</ul>
<hr>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Neo4j</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 下 Flask 结合 Neo4j 构建管理系统（四）</title>
    <url>/posts/b1f8568d.html</url>
    <content><![CDATA[<p>数据的增删改功能引入了 bootstrap table 插件进行操作。 #### bootstrap table 使用 引入 Bootstrap 库（假如你的项目还没有使用）和 bootstrap-table.css 到 head 标签下。<span id="more"></span></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;bootstrap-table.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>引入 jQuery 库，bootstrap 库（假如你的项目还没有使用）和 bootstrap-table.js 到 head 标签下或者在 body 标签关闭之前（一般建议这么做）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;bootstrap-table.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&lt;-- put your locale files after bootstrap-table.js --&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;bootstrap-table-zh-CN.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="表格初始化">表格初始化</h4>
<p>代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> TableInit = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oTableInit = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    <span class="comment">//初始化Table</span></span><br><span class="line"></span><br><span class="line">    oTableInit.Init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&#x27;#ta_info&#x27;</span>).bootstrapTable(&#123;</span><br><span class="line">            <span class="attr">url</span>: $SCRIPT_ROOT + <span class="string">&quot;/search_table&quot;</span>,         <span class="comment">//请求后台的URL（*）</span></span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,                      <span class="comment">//请求方式（*）</span></span><br><span class="line">            <span class="attr">toolbar</span>: <span class="string">&#x27;#toolbar&#x27;</span>,                <span class="comment">//工具按钮用哪个容器</span></span><br><span class="line">            <span class="attr">striped</span>: <span class="literal">true</span>,                      <span class="comment">//是否显示行间隔色</span></span><br><span class="line">            <span class="attr">cache</span>: <span class="literal">false</span>,                       <span class="comment">//是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）</span></span><br><span class="line">            <span class="attr">pagination</span>: <span class="literal">true</span>,                   <span class="comment">//是否显示分页（*）</span></span><br><span class="line">            <span class="attr">sortable</span>: <span class="literal">false</span>,                     <span class="comment">//是否启用排序</span></span><br><span class="line">            <span class="attr">sortOrder</span>: <span class="string">&quot;asc&quot;</span>,                   <span class="comment">//排序方式</span></span><br><span class="line">            <span class="attr">queryParams</span>: oTableInit.queryParams,<span class="comment">//传递参数（*）</span></span><br><span class="line">            <span class="attr">sidePagination</span>: <span class="string">&quot;server&quot;</span>,           <span class="comment">//分页方式：client客户端分页，server服务端分页（*）</span></span><br><span class="line">            <span class="attr">pageNumber</span>: <span class="number">1</span>,                       <span class="comment">//初始化加载第一页，默认第一页</span></span><br><span class="line">            <span class="attr">pageSize</span>: <span class="number">10</span>,                       <span class="comment">//每页的记录行数（*）</span></span><br><span class="line">            <span class="attr">pageList</span>: [<span class="number">10</span>, <span class="number">25</span>, <span class="number">50</span>, <span class="number">100</span>],        <span class="comment">//可供选择的每页的行数（*）</span></span><br><span class="line">            <span class="attr">search</span>: <span class="literal">false</span>,                       <span class="comment">//是否显示表格搜索，此搜索是客户端搜索，不会进服务端，所以，个人感觉意义不大</span></span><br><span class="line">            <span class="attr">strictSearch</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">showColumns</span>: <span class="literal">true</span>,                  <span class="comment">//是否显示所有的列</span></span><br><span class="line">            <span class="attr">showRefresh</span>: <span class="literal">true</span>,                  <span class="comment">//是否显示刷新按钮</span></span><br><span class="line">            <span class="attr">minimumCountColumns</span>: <span class="number">2</span>,             <span class="comment">//最少允许的列数</span></span><br><span class="line">            <span class="attr">clickToSelect</span>: <span class="literal">true</span>,                <span class="comment">//是否启用点击选中行</span></span><br><span class="line">            <span class="attr">height</span>: <span class="number">500</span>,                        <span class="comment">//行高，如果没有设置height属性，表格自动根据记录条数觉得表格高度</span></span><br><span class="line">            <span class="attr">uniqueId</span>: <span class="string">&quot;ID&quot;</span>,                     <span class="comment">//每一行的唯一标识，一般为主键列</span></span><br><span class="line">            <span class="attr">showToggle</span>: <span class="literal">true</span>,                    <span class="comment">//是否显示详细视图和列表视图的切换按钮</span></span><br><span class="line">            <span class="attr">cardView</span>: <span class="literal">false</span>,                    <span class="comment">//是否显示详细视图</span></span><br><span class="line">            <span class="attr">detailView</span>: <span class="literal">false</span>,                   <span class="comment">//是否显示父子表</span></span><br><span class="line">            <span class="attr">columns</span>: [&#123;</span><br><span class="line">                <span class="attr">checkbox</span>: <span class="literal">true</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="attr">field</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&#x27;信息名&#x27;</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="attr">field</span>: <span class="string">&#x27;label&#x27;</span>,</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&#x27;类别&#x27;</span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到查询的参数</span></span><br><span class="line">    oTableInit.queryParams = <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> temp = &#123;   <span class="comment">//这里的键的名字和控制器的变量名必须一直，这边改动，控制器也需要改成一样的</span></span><br><span class="line">            <span class="attr">limit</span>: params.limit,   <span class="comment">//页面大小</span></span><br><span class="line">            <span class="attr">offset</span>: params.offset,  <span class="comment">//页码</span></span><br><span class="line">            <span class="attr">q</span>: $(<span class="string">&quot;#search_table&quot;</span>).find(<span class="string">&quot;input[name=condition]&quot;</span>).val()</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> oTableInit;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="服务器分页">服务器分页</h4>
<p>后端代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/search_table&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_table</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        q = request.args.get(<span class="string">&#x27;q&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">        limit = request.args.get(<span class="string">&#x27;limit&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">        offset = request.args.get(<span class="string">&#x27;offset&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        user = User(session.get(<span class="string">&quot;username&quot;</span>))</span><br><span class="line">        results = user.search_table(q, limit, offset)</span><br><span class="line">        <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_table</span>(<span class="params">self, condition, limit, offset</span>):</span></span><br><span class="line">    nodes = []</span><br><span class="line">    act_nodes = []</span><br><span class="line">    query = <span class="string">&quot;MATCH (m) WHERE m.name CONTAINS \&#x27;&quot;</span> + condition + \</span><br><span class="line">            <span class="string">&quot;\&#x27; and (labels(m)=&#x27;Sort&#x27; or labels(m)=&#x27;GOODS&#x27; or labels(m)=&#x27;Website&#x27;) RETURN m, labels(m)&quot;</span></span><br><span class="line">    results = graph.run(query)</span><br><span class="line">    <span class="keyword">for</span> result, label <span class="keyword">in</span> results:</span><br><span class="line">        node = &#123;&#125;</span><br><span class="line">        node[<span class="string">&quot;name&quot;</span>] = result.get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">        node[<span class="string">&quot;label&quot;</span>] = label[<span class="number">0</span>]</span><br><span class="line">        nodes.append(node)</span><br><span class="line">    total = <span class="built_in">len</span>(nodes)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(offset), <span class="built_in">int</span>(offset) + <span class="built_in">int</span>(limit)):</span><br><span class="line">        <span class="keyword">if</span> i &gt;= <span class="built_in">len</span>(nodes):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        act_nodes.append(nodes[i])</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;total&#x27;</span>: total, <span class="string">&#x27;rows&#x27;</span>: act_nodes&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>服务器分页必须返回 <code>total</code> 和 <code>rows</code> 两个参数，前者代表查询数据的总长度，后者返回该页应该显示的数据。</li>
</ul>
<h4 id="增删改">增删改</h4>
<p>以增加数据为例： <img src="http://i.imgur.com/wBAu1Ti.png" alt="增加数据"> 由于 Neo4j 中的数据不是结构性数据，所以增加数据的基本思路是由用户选择父节点，然后向父节点增加子节点，增加子节点的过程中必须填入子节点的 <code>名字</code>，<code>类别</code>以及和父节点的<code>关系</code>属性，如果子节点还有其它属性，则可以点击增加行进行额外属性的增加。 前端代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#btn_add&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> father_node = $(<span class="string">&quot;#ta_info&quot;</span>).bootstrapTable(<span class="string">&#x27;getSelections&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (father_node == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        alert(<span class="string">&quot;请选择插入元素的父节点&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (father_node.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        alert(<span class="string">&quot;父节点只允许一个&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="string">&#x27;.added-row&#x27;</span>).length &gt; <span class="number">0</span>)</span><br><span class="line">            $(<span class="string">&#x27;.added-row&#x27;</span>).remove();</span><br><span class="line">        $(<span class="string">&#x27;#insertModal_body&#x27;</span>).find(<span class="string">&quot;input[name=name]&quot;</span>).val(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        $(<span class="string">&#x27;#insertModal_body&#x27;</span>).find(<span class="string">&quot;input[name=label]&quot;</span>).val(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        $(<span class="string">&#x27;#insertModal_body&#x27;</span>).find(<span class="string">&quot;input[name=relation]&quot;</span>).val(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        $(<span class="string">&#x27;#insertModal&#x27;</span>).modal()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#add_row&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> modal_body = <span class="built_in">document</span>.getElementById(<span class="string">&quot;insertModal_body&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> row_div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> row_label = <span class="built_in">document</span>.createElement(<span class="string">&quot;input&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> row_text = <span class="built_in">document</span>.createElement(<span class="string">&quot;input&quot;</span>);</span><br><span class="line">    row_div.setAttribute(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;input-data form-inline added-row&quot;</span>);</span><br><span class="line">    row_label.setAttribute(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;extra-label form-control&quot;</span>);</span><br><span class="line">    row_label.setAttribute(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;text&quot;</span>);</span><br><span class="line">    row_label.setAttribute(<span class="string">&quot;placeholder&quot;</span>, <span class="string">&quot;属性名&quot;</span>);</span><br><span class="line">    row_label.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;attr&quot;</span>);</span><br><span class="line">    row_text.setAttribute(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;extra-text form-control&quot;</span>);</span><br><span class="line">    row_text.setAttribute(<span class="string">&quot;placeholder&quot;</span>, <span class="string">&quot;属性&quot;</span>);</span><br><span class="line">    row_text.setAttribute(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;text&quot;</span>);</span><br><span class="line">    row_div.appendChild(row_label);</span><br><span class="line">    row_div.appendChild(row_text);</span><br><span class="line">    modal_body.appendChild(row_div);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#insert_btn&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> father_node = $(<span class="string">&quot;#ta_info&quot;</span>).bootstrapTable(<span class="string">&#x27;getSelections&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> insertModal = $(<span class="string">&#x27;#insertModal_body&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> fa_name = father_node[<span class="number">0</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    <span class="keyword">var</span> fa_label = father_node[<span class="number">0</span>][<span class="string">&#x27;label&#x27;</span>];</span><br><span class="line">    <span class="keyword">var</span> child_name = insertModal.find(<span class="string">&quot;input[name=name]&quot;</span>).val();</span><br><span class="line">    <span class="keyword">var</span> child_label = insertModal.find(<span class="string">&quot;input[name=label]&quot;</span>).val();</span><br><span class="line">    <span class="keyword">var</span> relation = insertModal.find(<span class="string">&quot;input[name=relation]&quot;</span>).val();</span><br><span class="line">    <span class="keyword">var</span> child_attrs_label = $(<span class="string">&#x27;.extra-label&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> child_attrs = $(<span class="string">&#x27;.extra-text&#x27;</span>);</span><br><span class="line">    data[<span class="string">&#x27;fa_name&#x27;</span>] = fa_name;</span><br><span class="line">    data[<span class="string">&#x27;fa_label&#x27;</span>] = fa_label;</span><br><span class="line">    data[<span class="string">&#x27;name&#x27;</span>] = child_name;</span><br><span class="line">    data[<span class="string">&#x27;label&#x27;</span>] = child_label;</span><br><span class="line">    data[<span class="string">&#x27;relation&#x27;</span>] = relation;</span><br><span class="line">    <span class="keyword">if</span> (child_name == <span class="string">&quot;&quot;</span> || child_label == <span class="string">&quot;&quot;</span> || relation == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        alert(<span class="string">&quot;请填写必要信息&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fa_name == child_name) &#123;</span><br><span class="line">        alert(<span class="string">&quot;不可与父节点名称相同&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (child_attrs.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; child_attrs.length; i++) &#123;</span><br><span class="line">            data[child_attrs_label[i].value] = child_attrs[i].value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data = <span class="built_in">JSON</span>.stringify(data);</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/insert&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: data,</span><br><span class="line">        <span class="attr">contentType</span>: <span class="string">&#x27;application/json; charset=UTF-8&#x27;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (msg == <span class="string">&quot;插入成功&quot;</span>) &#123;</span><br><span class="line">                $(<span class="string">&#x27;#insertModal&#x27;</span>).modal(<span class="string">&#x27;hide&#x27;</span>);</span><br><span class="line">                $(<span class="string">&quot;#ta_info&quot;</span>).bootstrapTable(<span class="string">&#x27;refresh&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            alert(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>后端代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/insert&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_insert</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = request.get_json()</span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        user = User(session.get(<span class="string">&quot;username&quot;</span>))</span><br><span class="line">        start_node = &#123;&#125;</span><br><span class="line">        end_node = &#123;&#125;</span><br><span class="line">        start_node[<span class="string">&#x27;name&#x27;</span>] = data[<span class="string">&#x27;fa_name&#x27;</span>]</span><br><span class="line">        start_node[<span class="string">&#x27;label&#x27;</span>] = data[<span class="string">&#x27;fa_label&#x27;</span>]</span><br><span class="line">        relation = data[<span class="string">&#x27;relation&#x27;</span>]</span><br><span class="line">        data.pop(<span class="string">&#x27;fa_name&#x27;</span>)</span><br><span class="line">        data.pop(<span class="string">&#x27;fa_label&#x27;</span>)</span><br><span class="line">        data.pop(<span class="string">&#x27;relation&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> data.keys():</span><br><span class="line">            end_node[key] = data[key]</span><br><span class="line">        results = user.insert_table(start_node, relation, end_node)</span><br><span class="line">        <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_table</span>(<span class="params">self, start_node, relation, end_node</span>):</span></span><br><span class="line">    end_node_label = end_node[<span class="string">&#x27;label&#x27;</span>]</span><br><span class="line">    end_node.pop(<span class="string">&quot;label&quot;</span>)</span><br><span class="line">    data = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> end_node.keys():</span><br><span class="line">        data += key + <span class="string">&quot;:&quot;</span> + <span class="string">&quot;\&#x27;&quot;</span> + end_node[key] + <span class="string">&quot;\&#x27;&quot;</span> + <span class="string">&quot;,&quot;</span></span><br><span class="line">    data = data.strip(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    check_query = <span class="string">&quot;MATCH (m) WHERE m.username=\&#x27;&quot;</span> + end_node[<span class="string">&#x27;name&#x27;</span>] \</span><br><span class="line">                  + <span class="string">&quot;\&#x27; and labels(m)=\&#x27;&quot;</span> + end_node_label + <span class="string">&quot;\&#x27; RETURN m&quot;</span></span><br><span class="line">    insert_query = <span class="string">&quot;MATCH (m) WHERE m.name=\&#x27;&quot;</span> + start_node[<span class="string">&#x27;name&#x27;</span>] \</span><br><span class="line">                   + <span class="string">&quot;\&#x27; and labels(m)=\&#x27;&quot;</span> + start_node[<span class="string">&#x27;label&#x27;</span>] + \</span><br><span class="line">                   <span class="string">&quot;\&#x27; CREATE (n:&quot;</span> + end_node_label + <span class="string">&quot;&quot;</span> + <span class="string">&quot;&#123;&quot;</span> + data + <span class="string">&quot;&#125;)&lt;-&quot;</span> + \</span><br><span class="line">                   <span class="string">&quot;[:&quot;</span> + relation + <span class="string">&quot;]-(m) RETURN n&quot;</span></span><br><span class="line">    check_result = graph.run(check_query)</span><br><span class="line">    <span class="keyword">if</span> check_result.forward():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;已经存在此节点&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(insert_query)</span><br><span class="line">    insert_result = graph.run(insert_query)</span><br><span class="line">    <span class="keyword">if</span> insert_result.forward():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;插入成功&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;插入失败&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="总结">总结</h4>
<p>利用 Neo4j 结合 Flask 构建 Web 应用的关键在于如何前端和后端如何进行数据交互，Flask 可以很方便的通过 <code>jsonify()</code> 方法返回 Json 数据，所以在构建应用的过程中可以尽可能使用 <code>ajax</code> 向后端发送 Json格式数据。</p>
<hr>
<h4 id="参考资料">参考资料</h4>
<p><span class="exturl" data-url="aHR0cDovL2Jvb3RzdHJhcC10YWJsZS53ZW56aGl4aW4ubmV0LmNuL3poLWNuLw==">Bootstrap Table<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Flask</tag>
        <tag>Neo4j</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 下 json 模块</title>
    <url>/posts/1aa5044d.html</url>
    <content><![CDATA[<p>Python 下的 json 模块主要有 4 个函数：<span id="more"></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#dict 转成 str </span></span><br><span class="line">json.dump()</span><br><span class="line"><span class="comment">#将 json 数据保存到文件</span></span><br><span class="line">json.dumps()</span><br><span class="line"><span class="comment">#str 转成 dict </span></span><br><span class="line">json.load()</span><br><span class="line"><span class="comment">#从文件中读取 json 数据</span></span><br><span class="line">json.loads()</span><br></pre></td></tr></table></figure>
<p>将 Json 数据写入文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  data_result_file = <span class="string">&quot;data_result.json&quot;</span></span><br><span class="line">  <span class="keyword">with</span> <span class="built_in">open</span>(data_result_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">      data_json = json.loads(results.data)</span><br><span class="line">      json.dump(data_json, f, indent=<span class="number">4</span>)</span><br><span class="line"><span class="keyword">except</span> IOError:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;文件不存在&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>由于 <code>json.dump()</code> 产生的是 <code>str</code> 对象，不是 <code>bytes</code> 对象，所以写入时文件权限不能设置为 <code>wb</code>，否则会出现 <code>TypeError: a bytes-like object is required, not ‘str'</code>。</p>
<hr>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Python Library</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 下 pymsql 库的基本使用</title>
    <url>/posts/2271f94f.html</url>
    <content><![CDATA[<h4 id="库的导入">库的导入</h4>
<p><code>import pymysql</code><span id="more"></span></p>
<h4 id="连接-mysql">连接 MySql</h4>
<ol type="1">
<li>连接配置 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MYSQL_HOST = &#x27;localhost&#x27;</span><br><span class="line">MYSQL_DBNAME = &#x27;cnkiQuote&#x27;</span><br><span class="line">MYSQL_USER = &#x27;root&#x27;</span><br><span class="line">MYSQL_PASSWD = &#x27;123456&#x27;</span><br></pre></td></tr></table></figure> 从上往下依次是主机 ip，数据库名，用户名及密码。</li>
<li>连接 指定编码为 utf8 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">connection=pymysql.connect(</span><br><span class="line">    host=MYSQL_HOST,</span><br><span class="line">    db=MYSQL_DBNAME,</span><br><span class="line">    user=MYSQL_USER,</span><br><span class="line">    passwd=MYSQL_PASSWD,</span><br><span class="line">    charset=<span class="string">&#x27;utf8&#x27;</span>,</span><br><span class="line">    use_unicode=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="sql-操作">Sql 操作</h4>
<ol type="1">
<li><p>查询</p>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">connection.cursor.execute(<span class="string">&quot;&quot;&quot;select * from periodical_data where title = %s and publicationDate = %s and author = %s&quot;&quot;&quot;</span>,</span><br><span class="line">(item[<span class="string">&quot;title&quot;</span>],</span><br><span class="line">item[<span class="string">&#x27;publicationDate&#x27;</span>],</span><br><span class="line"><span class="built_in">str</span>(item[<span class="string">&#x27;author&#x27;</span>])))</span><br></pre></td></tr></table></figure></p></li>
<li><p>插入</p>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">connection.cursor.execute(<span class="string">&quot;&quot;&quot;insert into periodical_data(title,author,journalName,publicationDate,referenceNum, downloadNum) value (%s,%s,%s,%s,%s,%s)&quot;&quot;&quot;</span>,</span><br><span class="line">(item[<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line"><span class="built_in">str</span>(item[<span class="string">&#x27;author&#x27;</span>]),</span><br><span class="line">item[<span class="string">&#x27;journalName&#x27;</span>],</span><br><span class="line">item[<span class="string">&#x27;publicationDate&#x27;</span>],</span><br><span class="line">item[<span class="string">&#x27;referenceNum&#x27;</span>],</span><br><span class="line">item[<span class="string">&#x27;downloadNum&#x27;</span>]))</span><br></pre></td></tr></table></figure></p></li>
<li><p>更新</p>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">connection.cursor.execute(<span class="string">&quot;&quot;&quot;update periodical_data set title = %s,author = %s,journalName = %s, publicationDate = %s,referenceNum = %s,downloadNum = %s where title = %s and publicationDate = %s and author = %s&quot;&quot;&quot;</span>,</span><br><span class="line">(<span class="built_in">str</span>(item[<span class="string">&#x27;title&#x27;</span>]),</span><br><span class="line"><span class="built_in">str</span>(item[<span class="string">&#x27;author&#x27;</span>]),</span><br><span class="line"><span class="built_in">str</span>(item[<span class="string">&#x27;journalName&#x27;</span>]),</span><br><span class="line">item[<span class="string">&#x27;publicationDate&#x27;</span>],</span><br><span class="line">item[<span class="string">&#x27;referenceNum&#x27;</span>],</span><br><span class="line">item[<span class="string">&#x27;downloadNum&#x27;</span>],</span><br><span class="line"><span class="built_in">str</span>(item[<span class="string">&#x27;title&#x27;</span>]),</span><br><span class="line">item[<span class="string">&#x27;publicationDate&#x27;</span>],</span><br><span class="line"><span class="built_in">str</span>(item[<span class="string">&#x27;author&#x27;</span>])))</span><br></pre></td></tr></table></figure></p></li>
<li><p>提交更改<br> <code>connection.commit()</code></p></li>
</ol>
<hr>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Python Library</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 下用 Scrapy 采集知网期刊数据（一）</title>
    <url>/posts/7b03d03a.html</url>
    <content><![CDATA[<h4 id="简介">简介</h4>
<blockquote>
<p>Scrapy 是一个为了爬取网站数据，提取结构性数据而编写的应用框架。 可以应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。</p>
</blockquote>
<h4 id="安装">安装</h4>
<ul>
<li>Pycharm 安装 Mac 下按住快捷键 <code>Command + ,</code> 选择 Project→Project Interpreter 点击 + 号后搜索 Scrapy 进行安装即可：<span id="more"></span> <img src="https://raw.githubusercontent.com/ikroal/blog-images/master/scrapy-install.png"><br>
</li>
<li>pip安装 <code>pip install Scrapy</code></li>
</ul>
<h4 id="创建工程">创建工程</h4>
<p>在终端中进入需要创建工程的目录，输入命令： <code>scrapy startproject tutorial</code> 将会创建一个 tutorial 的目录，目录结构如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tutorial/</span><br><span class="line">    scrapy.cfg            # 部署配置文件</span><br><span class="line"></span><br><span class="line">    tutorial/             # 项目的 Python 模块，在这里加入代码</span><br><span class="line">        __init__.py</span><br><span class="line"></span><br><span class="line">        items.py          # 项目的 items 定义文件</span><br><span class="line"></span><br><span class="line">        pipelines.py      # 项目的 pipelines 文件，用于处理 items</span><br><span class="line"></span><br><span class="line">        settings.py       # 项目的设置文件</span><br><span class="line"></span><br><span class="line">        spiders/          # Spider 目录所在地</span><br><span class="line">            __init__.py</span><br></pre></td></tr></table></figure>
<h4 id="创建-spider">创建 Spider</h4>
<p>在 <code>tutorial/spiders</code> 目录下新建一个名为 <code>quotes_spider.py</code> 的文件，输入如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&quot;quotes&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span>(<span class="params">self</span>):</span></span><br><span class="line">        urls = [</span><br><span class="line">            <span class="string">&#x27;http://quotes.toscrape.com/page/1/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;http://quotes.toscrape.com/page/2/&#x27;</span>,</span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=url, callback=self.parse)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        page = response.url.split(<span class="string">&quot;/&quot;</span>)[-<span class="number">2</span>]</span><br><span class="line">        filename = <span class="string">&#x27;quotes-%s.html&#x27;</span> % page</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.body)</span><br><span class="line">        self.log(<span class="string">&#x27;Saved file %s&#x27;</span> % filename)</span><br></pre></td></tr></table></figure>
<p><code>QuotesSpider</code> 继承 <code>scrapy.Spider</code>，同时定义了一些属性和方法： * <code>name</code>：作为爬虫的唯一标识，对于在同一工程中的爬虫，不能够设置相同的名称。 * <code>start_requests()</code>：返回一个可迭代的请求，然后 Spider 将爬取这些请求 * <code>parse()</code>：用于处理请求的结果。</p>
<h4 id="运行-sprider">运行 Sprider</h4>
<ul>
<li>终端命令运行 在创建的项目目录下，输入： <code>scrapy crawl quotes</code> quotes 为 Sprider 的标识。</li>
<li>Pycharm 下运行
<ol type="1">
<li><p>在 <code>tutorial</code> 目录下创建名为 <code>entrypoint.py</code> 的文件，输入如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> scrapy.cmdline <span class="keyword">import</span> execute</span><br><span class="line"><span class="comment"># quotes 为刚刚创建的 Spider 的 name，可以在这里切换不同的 Spider</span></span><br><span class="line">execute([<span class="string">&#x27;scrapy&#x27;</span>, <span class="string">&#x27;crawl&#x27;</span>, <span class="string">&#x27;quotes&#x27;</span>])</span><br></pre></td></tr></table></figure></li>
<li><p>修改配置 在 <code>Run</code> 中选择 <code>Edit Configurations</code>，做如下修改： <img src="http://i.imgur.com/T29yM73.png" alt="配置"></p></li>
</ol></li>
</ul>
<hr>
<h4 id="参考资料">参考资料</h4>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2Muc2NyYXB5Lm9yZy9lbi9tYXN0ZXIvaW50cm8vdHV0b3JpYWwuaHRtbA==">Scrapy 文档<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 下用 Scrapy 采集知网期刊数据（三）</title>
    <url>/posts/undefined.html</url>
    <content><![CDATA[<p>在<a href="/posts/undefined.html" title="Python 下用 Scrapy 采集知网期刊数据（二）">Python 下用 Scrapy 采集知网期刊数据（二）</a>中已经获取了期刊的搜索结果，接下来就可以开始采集文献数据了。<span id="more"></span></p>
<h2 id="采集期刊文献数据">采集期刊文献数据</h2>
<ol type="1">
<li><p>定义 Items</p>
<blockquote>
<p>为了定义常用的输出数据，Scrapy提供了 Item 类。 Item 对象是种简单的容器，保存了爬取到得数据。 其提供了 类似于词典(dictionary-like) 的API以及用于声明可用字段的简单语法。</p>
</blockquote>
<p>在 <code>items.py</code> 文件中增加如下代码： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaperItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    author = scrapy.Field()</span><br><span class="line">    journalName = scrapy.Field()</span><br><span class="line">    publicationDate = scrapy.Field()</span><br><span class="line">    referenceNum = scrapy.Field()</span><br><span class="line">    downloadNum = scrapy.Field()</span><br></pre></td></tr></table></figure></p></li>
<li><p>提取数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;rurl&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(requests_url):</span><br><span class="line">        iden_code_url = <span class="built_in">str</span>(requests_url).split(<span class="string">&quot;GET&quot;</span>)[<span class="number">1</span>].split(<span class="string">&quot;&gt;&quot;</span>)[<span class="number">0</span>].strip()</span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(iden_code_url, meta=&#123;<span class="string">&#x27;cookiejar&#x27;</span>: response.meta[<span class="string">&#x27;cookiejar&#x27;</span>]&#125;, callback=self.handleCode, dont_filter=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    items = PaperItem()</span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> response.css(<span class="string">&#x27;tr[bgcolor]&#x27;</span>):</span><br><span class="line">        items[<span class="string">&#x27;title&#x27;</span>] = result.css(<span class="string">&quot;td &gt; a[class=fz14]&quot;</span>).xpath(<span class="string">&quot;string(.)&quot;</span>).extract_first()</span><br><span class="line">        items[<span class="string">&#x27;author&#x27;</span>] = result.css(<span class="string">&quot;td[class=author_flag] &gt; a[class=KnowledgeNetLink]::text&quot;</span>).extract()</span><br><span class="line">        items[<span class="string">&#x27;journalName&#x27;</span>] = result.css(<span class="string">&quot;td[class=cjfdyxyz]&quot;</span>).xpath(<span class="string">&quot;string(a)&quot;</span>).extract_first()</span><br><span class="line">        items[<span class="string">&#x27;publicationDate&#x27;</span>] = result.css(<span class="string">&quot;td[align] &gt; a[target=_blank]::text&quot;</span>).extract_first().split(<span class="string">&quot;/&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">        items[<span class="string">&#x27;referenceNum&#x27;</span>] = result.css(<span class="string">&quot;span[class=KnowledgeNetcont] &gt; a::text&quot;</span>).extract_first()</span><br><span class="line">        items[<span class="string">&#x27;downloadNum&#x27;</span>] = result.css(<span class="string">&quot;span[class=downloadCount] &gt; a::text&quot;</span>).extract_first()</span><br><span class="line">        <span class="keyword">yield</span> items</span><br><span class="line">    next_page = response.xpath(<span class="string">&quot;//div/a[text()=&#x27;下一页&#x27;]/@href&quot;</span>).extract()</span><br><span class="line">    <span class="keyword">if</span> next_page:</span><br><span class="line">        next_page = response.urljoin(next_page[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(next_page, meta=&#123;<span class="string">&#x27;cookiejar&#x27;</span>: response.meta[<span class="string">&#x27;cookiejar&#x27;</span>]&#125;, callback=self.parse,</span><br><span class="line">                         dont_filter=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li><code>if &quot;rurl&quot; in str(requests_url)</code> 用于判断当前请求是否是请求验证码的请求，如果是则回调 <code>handleCode(self, response)</code> 进行验证码的处理，由于验证码的请求链接大多相同所以必须设置 <code>dont_filter=True</code>。</li>
<li>for 循环用于提取文献的各项数据，<code>next_page</code> 是下一页的链接，<code>response.urljoin()</code> 方法构造一个绝对路径的 URL (页面上的链接都是相对路径的)，发送下一页的请求也需要设置 <code>dont_filter=True</code>。</li>
</ul></li>
<li>验证码处理 验证码的处理主要和这两个请求相关： <img src="http://i.imgur.com/Ey0ij42.png" alt="验证码处理"> 第一个请求用于显示输入验证码页面和提交验证码，主要和两个参数相关： <img src="http://i.imgur.com/vyN5yYF.png" alt="验证码"> 第二个请求则主要用于获取验证码： <code>http://kns.cnki.net/kns/checkcode.aspx?t=%27+Math.random()</code> 处理验证码的代码如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handleCode</span>(<span class="params">self, response</span>):</span></span><br><span class="line">    sid_kns = <span class="string">&quot;&quot;</span></span><br><span class="line">    sessionId = <span class="string">&quot;&quot;</span></span><br><span class="line">    ori_cookie = response.request.headers.getlist(<span class="string">&#x27;Cookie&#x27;</span>)</span><br><span class="line">    response_url = <span class="built_in">str</span>(response.request.headers.getlist(<span class="string">&#x27;Referer&#x27;</span>)).split(<span class="string">&quot;&#x27;&quot;</span>)[<span class="number">1</span>].split(<span class="string">&quot;rurl=&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;vericode=&quot;</span> <span class="keyword">in</span> response_url:</span><br><span class="line">        response_url = re.sub(<span class="string">r&quot;&amp;vericode.*&quot;</span>, <span class="string">&quot;&quot;</span>, response_url)</span><br><span class="line">    <span class="keyword">for</span> cookie_parameter <span class="keyword">in</span> <span class="built_in">str</span>(ori_cookie).split(<span class="string">&quot;;&quot;</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;SID_kns&quot;</span> <span class="keyword">in</span> cookie_parameter:</span><br><span class="line">            sid_kns = cookie_parameter.split(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;ASP.NET_SessionId&quot;</span> <span class="keyword">in</span> cookie_parameter:</span><br><span class="line">            sessionId = cookie_parameter.split(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">    act_cookie = &#123;<span class="string">&quot;ASP.NET_SessionId&quot;</span>: sessionId, <span class="string">&quot;SID_kns&quot;</span>: sid_kns&#125;</span><br><span class="line">    url = <span class="string">&quot;http://kns.cnki.net/kns/checkcode.aspx?t=&#x27;+Math.random()&quot;</span></span><br><span class="line">    result_file = self.downloadCodeImg(url, act_cookie)</span><br><span class="line">    code_img = Image.<span class="built_in">open</span>(result_file)</span><br><span class="line">    code_img.show()</span><br><span class="line">    ver_code = <span class="built_in">input</span>(<span class="string">&quot;输入验证码:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;已输入验证码:&quot;</span>, ver_code)</span><br><span class="line">    return_url = <span class="string">&quot;http://kns.cnki.net/kns/brief/vericode.aspx?rurl=&quot;</span> + response_url + <span class="string">&quot;&amp;vericode=&quot;</span> + ver_code</span><br><span class="line">    <span class="keyword">yield</span> scrapy.Request(return_url, meta=&#123;<span class="string">&#x27;cookiejar&#x27;</span>: response.meta[<span class="string">&#x27;cookiejar&#x27;</span>]&#125;, callback=self.parse, dont_filter=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadCodeImg</span>(<span class="params">self, getCodeUrl, cookie</span>):</span></span><br><span class="line">    iden_code_img = <span class="string">&quot;ver_code&quot;</span> + time.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>, time.localtime(time.time())) + <span class="string">&quot;.jpg&quot;</span></span><br><span class="line">    response = requests.get(getCodeUrl, stream=<span class="literal">True</span>, cookies=cookie)  <span class="comment"># here we need to set stream = True parameter</span></span><br><span class="line">    requests.utils.add_dict_to_cookiejar(response.cookies, cookie)</span><br><span class="line">    <span class="built_in">print</span>(response.cookies)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(iden_code_img, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> chunk <span class="keyword">in</span> response.iter_content(chunk_size=<span class="number">1024</span>):</span><br><span class="line">            <span class="keyword">if</span> chunk:</span><br><span class="line">                f.write(chunk)</span><br><span class="line">                f.flush()</span><br><span class="line">        f.close()</span><br><span class="line">    <span class="keyword">return</span> iden_code_img</span><br></pre></td></tr></table></figure>
<ul>
<li><code>response_url</code> 为 <code>rurl</code> 的参数值</li>
<li><code>act_cookie</code> 为请求的 cookies 值</li>
<li><code>downloadCodeImg</code> 用于下载验证码</li>
</ul></li>
</ol>
<h2 id="采集引证文献">采集引证文献</h2>
<ol type="1">
<li><p>定义 Items</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quote</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    paper_title = scrapy.Field()</span><br><span class="line">    paper_author = scrapy.Field()</span><br><span class="line">    paper_journalName = scrapy.Field()</span><br><span class="line">    paper_time = scrapy.Field()</span><br><span class="line">    quote_title = scrapy.Field()</span><br></pre></td></tr></table></figure></li>
<li>提取数据 引证文献的数据提取是动态网页，所以不能够直接采集，通过抓包分析，数据主要下图的请求相关： <img src="http://i.imgur.com/zMmDCQq.png" alt="请求"> <img src="http://i.imgur.com/vBGwbqw.png" alt="引证文献"> 为了对引证文献的所有类别进行翻页，参数 <code>CurDBCode</code> 必须去除，发送请求之后的页面如下图所示： <img src="http://i.imgur.com/n1E6LzV.png" alt="数据"> 由于是纯文本页面，除了知道上图所示的参数之外，还需要知道引证文献的最大页数进行翻译，具体代码如下：
<ol type="1">
<li><p>发送引证文献请求</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line"> requests_url = response.request</span><br><span class="line"> <span class="comment">#True 代表文献引证文献数大于 0，否则代表文献没有引证文献</span></span><br><span class="line"> flag = <span class="literal">True</span></span><br><span class="line"> <span class="keyword">if</span> <span class="string">&quot;rurl&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(requests_url):</span><br><span class="line">     iden_code_url = <span class="built_in">str</span>(requests_url).split(<span class="string">&quot;GET&quot;</span>)[<span class="number">1</span>].split(<span class="string">&quot;&gt;&quot;</span>)[<span class="number">0</span>].strip()</span><br><span class="line">     <span class="keyword">yield</span> scrapy.Request(iden_code_url, meta=&#123;<span class="string">&#x27;cookiejar&#x27;</span>: response.meta[<span class="string">&#x27;cookiejar&#x27;</span>]&#125;, callback=self.handleCode</span><br><span class="line">                          , dont_filter=<span class="literal">True</span>)</span><br><span class="line"> <span class="comment">#quote_urls 用于保存引证文献数大于 10 的链接，代表着引证文献页数可能两页以上需要计算页数</span></span><br><span class="line"> quote_urls = []</span><br><span class="line"> <span class="comment">#quote_direct 用于保存引证文献数小于等于 10 的链接，代表着引证文献页数只有一页只用直接采集</span></span><br><span class="line"> quote_direct = []</span><br><span class="line"> <span class="keyword">for</span> result <span class="keyword">in</span> response.css(<span class="string">&#x27;tr[bgcolor]&#x27;</span>):</span><br><span class="line">     quote_url = result.css(<span class="string">&quot;span[class=KnowledgeNetcont] &gt; a&quot;</span>).xpath(<span class="string">&quot;@onclick&quot;</span>).extract_first()</span><br><span class="line">     num = result.css(<span class="string">&quot;span[class=KnowledgeNetcont] &gt; a::text&quot;</span>).extract_first()</span><br><span class="line">     <span class="keyword">if</span> quote_url <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">         <span class="keyword">if</span> <span class="built_in">int</span>(num) &lt;= <span class="number">10</span>:</span><br><span class="line">             pages = <span class="number">1</span></span><br><span class="line">         <span class="keyword">else</span>:</span><br><span class="line">             pages = <span class="number">1000</span></span><br><span class="line">         title = result.css(<span class="string">&quot;td &gt; a[class=fz14]&quot;</span>).xpath(<span class="string">&quot;string(.)&quot;</span>).extract_first()</span><br><span class="line">         quote_code = self.get_quote_code(quote_url)</span><br><span class="line">         origin_quote_url = <span class="string">&quot;http://kns.cnki.net/kcms/detail/frame/asynlist.aspx&quot;</span></span><br><span class="line">         quote_parameters = &#123;<span class="string">&#x27;dbcode&#x27;</span>: <span class="string">&#x27;CJFQ&#x27;</span>, <span class="string">&#x27;search&#x27;</span>: title,</span><br><span class="line">                             <span class="string">&#x27;code&#x27;</span>: quote_code, <span class="string">&#x27;ds&#x27;</span>: <span class="string">&#x27;frame/list.aspx&#x27;</span>,</span><br><span class="line">                             <span class="string">&#x27;reftype&#x27;</span>: <span class="string">&#x27;18&#x27;</span>, <span class="string">&#x27;page&#x27;</span>: pages,</span><br><span class="line">                             &#125;</span><br><span class="line">         url = self.get_url(origin_quote_url, quote_parameters)</span><br><span class="line">         <span class="keyword">if</span> <span class="built_in">int</span>(num) &lt;= <span class="number">10</span>:</span><br><span class="line">             quote_direct.append(url)</span><br><span class="line">         <span class="keyword">else</span>:</span><br><span class="line">             quote_urls.append(url)</span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">         flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"> next_page = response.xpath(<span class="string">&quot;//div/a[text()=&#x27;下一页&#x27;]/@href&quot;</span>).extract()</span><br><span class="line"> <span class="keyword">if</span> next_page <span class="keyword">and</span> flag:</span><br><span class="line">     next_page = response.urljoin(next_page[<span class="number">0</span>])</span><br><span class="line">     <span class="keyword">yield</span> scrapy.Request(next_page, meta=&#123;<span class="string">&#x27;cookiejar&#x27;</span>: response.meta[<span class="string">&#x27;cookiejar&#x27;</span>]&#125;, callback=self.parse</span><br><span class="line">                          , dont_filter=<span class="literal">True</span>, priority=<span class="number">100</span>)</span><br><span class="line"> <span class="keyword">for</span> get_quote_url <span class="keyword">in</span> quote_urls:</span><br><span class="line">     <span class="keyword">yield</span> scrapy.Request(get_quote_url, meta=&#123;<span class="string">&#x27;cookiejar&#x27;</span>: response.meta[<span class="string">&#x27;cookiejar&#x27;</span>]&#125;,</span><br><span class="line">                          callback=self.parse_first_quote)</span><br><span class="line"> <span class="keyword">for</span> get_quote_url <span class="keyword">in</span> quote_direct:</span><br><span class="line">     <span class="keyword">yield</span> scrapy.Request(get_quote_url, meta=&#123;<span class="string">&#x27;cookiejar&#x27;</span>: response.meta[<span class="string">&#x27;cookiejar&#x27;</span>]&#125;,</span><br><span class="line">                          callback=self.parse_quote)</span><br></pre></td></tr></table></figure>
<ul>
<li><code>title</code> 文献的篇名</li>
<li><code>quote_code</code> 文献的编码</li>
<li><code>pages</code> 页数，设置为 1000，为了方便计算页数，如果设置为 1 进行页数计算，那么进行数据采集的时链接将被过滤掉。</li>
<li><code>priority=100</code> 优先处理翻页的请求，翻页时间过长将导致页面不会按照被引量降序排列，从而导致数据丢失。</li>
</ul></li>
<li><p>计算页数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_first_quote</span>(<span class="params">self, response</span>):</span></span><br><span class="line">       result_html = Selector(response, <span class="built_in">type</span>=<span class="string">&quot;html&quot;</span>)</span><br><span class="line">       regex = <span class="string">r&quot;\Wcode=&quot;</span></span><br><span class="line">       quote_code = re.split(regex, response.url)[<span class="number">1</span>]</span><br><span class="line">       quote_code = quote_code.split(<span class="string">&quot;&amp;&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">       title = response.url.split(<span class="string">&quot;search=&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">       title = title.split(<span class="string">&quot;&amp;&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">       title = urllib.parse.unquote(title)</span><br><span class="line">       origin_res = result_html.css(<span class="string">&quot;b[class=titleTotle] &gt; span[id]::text&quot;</span>).extract()</span><br><span class="line">       act_res = []</span><br><span class="line">       <span class="keyword">for</span> result <span class="keyword">in</span> origin_res:</span><br><span class="line">           <span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">not</span> <span class="string">&#x27;\xa0&#x27;</span>:</span><br><span class="line">               act_res.append(<span class="built_in">int</span>(re.sub(<span class="string">&quot;\D&quot;</span>, <span class="string">&quot;&quot;</span>, result.strip())))</span><br><span class="line">       <span class="keyword">if</span> act_res:</span><br><span class="line">           max_page = <span class="built_in">max</span>(act_res)</span><br><span class="line">           max_page = math.ceil(<span class="built_in">float</span>(max_page)/<span class="number">10</span>)</span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           max_page = <span class="number">1</span></span><br><span class="line">       origin_url = <span class="string">&#x27;http://kns.cnki.net/kcms/detail/frame/asynlist.aspx&#x27;</span></span><br><span class="line">       <span class="keyword">for</span> page_num <span class="keyword">in</span> <span class="built_in">range</span>(max_page):</span><br><span class="line">           quote_parameters = &#123;<span class="string">&#x27;dbcode&#x27;</span>: <span class="string">&#x27;CJFQ&#x27;</span>, <span class="string">&#x27;search&#x27;</span>: title,</span><br><span class="line">                                <span class="string">&#x27;code&#x27;</span>: quote_code, <span class="string">&#x27;ds&#x27;</span>: <span class="string">&#x27;frame/list.aspx&#x27;</span>,</span><br><span class="line">                                <span class="string">&#x27;reftype&#x27;</span>: <span class="string">&#x27;18&#x27;</span>, <span class="string">&#x27;page&#x27;</span>: <span class="built_in">str</span>(page_num + <span class="number">1</span>),</span><br><span class="line">                                &#125;</span><br><span class="line">           act_url = self.get_url(origin_url, quote_parameters)</span><br><span class="line">           <span class="keyword">yield</span> scrapy.Request(act_url, meta=&#123;<span class="string">&#x27;cookiejar&#x27;</span>: response.meta[<span class="string">&#x27;cookiejar&#x27;</span>]&#125;, callback=self.parse_quote)</span><br></pre></td></tr></table></figure>
<ul>
<li><code>origin_res</code> 用于获取页面上记录的条数</li>
<li><code>max_page</code> 最大的页数</li>
<li>for 循环用于引证文献的翻页</li>
</ul></li>
<li><p>采集 引证文献的格式可以分为三类，所以这三类需要单独进行处理。</p>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_quote</span>(<span class="params">self, response</span>):</span></span><br><span class="line">    quote_item = Quote()</span><br><span class="line">    ori_title = response.url.split(<span class="string">&quot;search=&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">    ori_title = ori_title.split(<span class="string">&quot;&amp;&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    quote_title = urllib.parse.unquote(ori_title)</span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> response.css(<span class="string">&quot;div[class=essayBox]&quot;</span>):</span><br><span class="line">        dbTitle = result.xpath(<span class="string">&quot;.//div[@class=&#x27;dbTitle&#x27;]/text()&quot;</span>).extract_first()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;中国学术期刊网络出版总库&quot;</span> <span class="keyword">in</span> dbTitle:</span><br><span class="line">            <span class="keyword">for</span> result_cjfq <span class="keyword">in</span> result.css(<span class="string">&quot;ul &gt; li&quot;</span>):</span><br><span class="line">                paper_title = result_cjfq.xpath(<span class="string">&quot;.//em/text()&quot;</span>).extract_first() +\</span><br><span class="line">                              result_cjfq.xpath(<span class="string">&quot;.//a[@target=&#x27;kcmstarget&#x27;]&quot;</span>).xpath(<span class="string">&#x27;string(.)&#x27;</span>).extract_first()</span><br><span class="line">                paper_author = result_cjfq.xpath(<span class="string">&quot;./text()&quot;</span>).extract_first().replace(<span class="string">&quot;&amp;nbsp&quot;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                paper_title = paper_title + paper_author.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">                paper_author = paper_author.split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].strip()</span><br><span class="line">                paper_journalName = result_cjfq.xpath(<span class="string">&quot;.//a[@onclick]/text()&quot;</span>).extract()[<span class="number">0</span>]</span><br><span class="line">                time_len = <span class="built_in">len</span>(result_cjfq.xpath(<span class="string">&quot;.//a[@onclick]/text()&quot;</span>))</span><br><span class="line">                paper_time = result_cjfq.xpath(<span class="string">&quot;.//a[@onclick]/text()&quot;</span>).extract()[time_len - <span class="number">1</span>]</span><br><span class="line">                paper_time = paper_time.split(<span class="string">&quot;(&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">                quote_item[<span class="string">&#x27;paper_title&#x27;</span>] = paper_title</span><br><span class="line">                quote_item[<span class="string">&#x27;paper_author&#x27;</span>] = paper_author</span><br><span class="line">                quote_item[<span class="string">&#x27;paper_journalName&#x27;</span>] = paper_journalName</span><br><span class="line">                quote_item[<span class="string">&#x27;paper_time&#x27;</span>] = paper_time</span><br><span class="line">                quote_item[<span class="string">&#x27;quote_title&#x27;</span>] = quote_title.replace(<span class="string">&quot;++&quot;</span>, <span class="string">&quot;  &quot;</span>)</span><br><span class="line">                <span class="keyword">yield</span> quote_item</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;中国博士学位论文全文数据库&quot;</span> <span class="keyword">in</span> dbTitle <span class="keyword">or</span> <span class="string">&quot;中国优秀硕士学位论文全文数据库&quot;</span> <span class="keyword">in</span> dbTitle:</span><br><span class="line">            <span class="keyword">for</span> result_cjfq <span class="keyword">in</span> result.css(<span class="string">&quot;ul &gt; li&quot;</span>):</span><br><span class="line">                paper_title = result_cjfq.xpath(<span class="string">&quot;.//em/text()&quot;</span>).extract_first() + \</span><br><span class="line">                            result_cjfq.xpath(<span class="string">&quot;.//a[@target=&#x27;kcmstarget&#x27;]/text()&quot;</span>).extract_first()</span><br><span class="line">                paper_author = result_cjfq.xpath(<span class="string">&quot;./text()&quot;</span>).extract_first()</span><br><span class="line">                paper_title = paper_title + paper_author.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">                paper_author = paper_author.split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].strip()</span><br><span class="line">                paper_journalName = result_cjfq.xpath(<span class="string">&quot;.//a[@onclick]/text()&quot;</span>).extract()[<span class="number">0</span>]</span><br><span class="line">                paper_time = result_cjfq.xpath(<span class="string">&quot;./text()&quot;</span>).extract()[<span class="number">1</span>].strip()</span><br><span class="line">                quote_item[<span class="string">&#x27;paper_title&#x27;</span>] = paper_title</span><br><span class="line">                quote_item[<span class="string">&#x27;paper_author&#x27;</span>] = paper_author</span><br><span class="line">                quote_item[<span class="string">&#x27;paper_journalName&#x27;</span>] = paper_journalName</span><br><span class="line">                quote_item[<span class="string">&#x27;paper_time&#x27;</span>] = paper_time</span><br><span class="line">                quote_item[<span class="string">&#x27;quote_title&#x27;</span>] = quote_title.replace(<span class="string">&quot;++&quot;</span>, <span class="string">&quot;  &quot;</span>)</span><br><span class="line">                <span class="keyword">yield</span> quote_item</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;中国重要会议论文全文数据库&quot;</span> <span class="keyword">in</span> dbTitle <span class="keyword">or</span> <span class="string">&quot;国际会议论文全文数据库&quot;</span> <span class="keyword">in</span> dbTitle:</span><br><span class="line">            <span class="keyword">for</span> result_cjfq <span class="keyword">in</span> result.css(<span class="string">&quot;ul &gt; li&quot;</span>):</span><br><span class="line">                paper_title = result_cjfq.xpath(<span class="string">&quot;.//em/text()&quot;</span>).extract_first() + \</span><br><span class="line">                            result_cjfq.xpath(<span class="string">&quot;.//a[@target=&#x27;kcmstarget&#x27;]/text()&quot;</span>).extract_first()</span><br><span class="line">                other_data = result_cjfq.xpath(<span class="string">&quot;./text()&quot;</span>).extract_first()</span><br><span class="line">                paper_title = paper_title + other_data.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(other_data.split(<span class="string">&quot;.&quot;</span>)) == <span class="number">4</span>:</span><br><span class="line">                    paper_author = other_data.split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].strip()</span><br><span class="line">                    paper_journalName = other_data.split(<span class="string">&quot;.&quot;</span>)[<span class="number">2</span>].strip()</span><br><span class="line">                    paper_time = other_data.split(<span class="string">&quot;.&quot;</span>)[<span class="number">3</span>].strip()</span><br><span class="line">                <span class="keyword">elif</span> <span class="built_in">len</span>(other_data.split(<span class="string">&quot;.&quot;</span>)) == <span class="number">3</span>:</span><br><span class="line">                    paper_author = <span class="string">&quot;&quot;</span></span><br><span class="line">                    paper_journalName = other_data.split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].strip()</span><br><span class="line">                    paper_time = other_data.split(<span class="string">&quot;.&quot;</span>)[<span class="number">2</span>].strip()</span><br><span class="line">                quote_item[<span class="string">&#x27;paper_title&#x27;</span>] = paper_title</span><br><span class="line">                quote_item[<span class="string">&#x27;paper_author&#x27;</span>] = paper_author</span><br><span class="line">                quote_item[<span class="string">&#x27;paper_journalName&#x27;</span>] = paper_journalName</span><br><span class="line">                quote_item[<span class="string">&#x27;paper_time&#x27;</span>] = paper_time</span><br><span class="line">                quote_item[<span class="string">&#x27;quote_title&#x27;</span>] = quote_title.replace(<span class="string">&quot;++&quot;</span>, <span class="string">&quot;  &quot;</span>)</span><br><span class="line">                <span class="keyword">yield</span> quote_item </span><br></pre></td></tr></table></figure></p></li>
</ol></li>
</ol>
<hr>
<h2 id="参考资料">参考资料</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2Muc2NyYXB5Lm9yZy9lbi9tYXN0ZXIvaW50cm8vdHV0b3JpYWwuaHRtbA==">Scrapy 文档<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 下用 Scrapy 采集知网期刊数据（二）</title>
    <url>/posts/undefined.html</url>
    <content><![CDATA[<h4 id="需求">需求</h4>
<p>本次采集需要采集期刊 2000～2010 年间的数据，相关的数据首先是期刊中各文献的数据：<span id="more"></span></p>
<figure>
<img src="http://i.imgur.com/vM9uRTd.png" alt="文献数据"><figcaption>文献数据</figcaption>
</figure>
<p>主要包括 <code>title（篇名）</code>，<code>author（作者）</code>，<code>journalName（刊名）</code>，<code>publicationDate（发表时间）</code>，<code>referenceNum（被引数）</code> 以及 <code>downloadNum</code>下载数</p>
<p>其次是每篇文献的引证文献数据：</p>
<figure>
<img src="http://i.imgur.com/d8oaOnt.png" alt="引用文献数据"><figcaption>引用文献数据</figcaption>
</figure>
<p>主要包括 <code>paper_title（篇名）</code>，<code>paper_author（作者）</code>，<code>paper_journalName（刊名）</code>，<code>paper_time（发表时间）</code>以及<code>quote_title（引用的文献篇名）</code>。</p>
<h4 id="搜索期刊">搜索期刊</h4>
<ol type="1">
<li><p>抓包分析 在采集数据之前首先需要获取到期刊的搜索结果，而本次采集主要和下列的搜索参数相关：</p>
<img src="http://i.imgur.com/Ptexofn.png" alt="检索条件">
<ul>
<li>起始年份</li>
<li>模糊或精确搜索</li>
<li>期刊名称 抓包之后发现搜索过程主要和下图标有红线的两个请求相关，第一个请求用于得到搜索结果，第二个请求则是将搜索的结果显示出来。 <img src="http://i.imgur.com/k72biin.png" alt="抓包数据"> 对第一个请求进行分析之后发现了与搜索条件相对应的搜索参数。 <img src="http://i.imgur.com/MEX3upo.png" alt="搜索参数"> 第二个请求大部分是固定参数值 <img src="http://i.imgur.com/m1Rlxox.png" alt="显示结果"></li>
</ul></li>
<li>发送请求
<ol type="1">
<li><p>从 Excel 读取参数： 由于需要采集每本期刊 11 年的数据，所以为了减少搜索结果从而尽可能避免需要输入验证码，所以将所有的搜索条件保存在一个 Excel 文件里面： <img src="http://i.imgur.com/z3erumM.png" alt="查询条件"> 读取参数过程如下：</p>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_excel</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># 打开文件</span></span><br><span class="line">    workbook = xlrd.open_workbook(<span class="string">r&#x27;/Users/firstdream/PycharmProjects/cnkiSprider/查询条件.xlsx&#x27;</span>)</span><br><span class="line">    <span class="comment"># 获取所有sheet</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据sheet索引或者名称获取sheet内容</span></span><br><span class="line">    sheet1 = workbook.sheet_by_index(<span class="number">0</span>)  <span class="comment"># sheet索引从0开始</span></span><br><span class="line">    search_setting = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(sheet1.nrows):</span><br><span class="line">        setting = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(sheet1.ncols):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(sheet1.row(row)[col].value, <span class="built_in">float</span>):</span><br><span class="line">                setting = setting + <span class="built_in">str</span>(<span class="built_in">int</span>(sheet1.row(row)[col].value)) + <span class="string">&quot;,&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                setting = setting + <span class="built_in">str</span>(sheet1.row(row)[col].value)</span><br><span class="line">        search_setting.append(setting)</span><br><span class="line">    <span class="keyword">return</span> search_setting</span><br></pre></td></tr></table></figure></p>
<p>将每行的搜索条件拼接起来并保存在一个 list 当中。</p></li>
<li><p>生成请求 由于请求的参数较多，所以采用词典进行请求的参数配置，再用 <code>get_url()</code> 获取最终的链接：<br> 生成第一个请求：</p>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createUrls</span>(<span class="params">self</span>):</span></span><br><span class="line">   search_setting = self.read_excel()</span><br><span class="line">   urls = []</span><br><span class="line">   <span class="keyword">for</span> setting <span class="keyword">in</span> search_setting:</span><br><span class="line">       year_from =  setting.split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">       year_to = setting.split(<span class="string">&quot;,&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">       magazine_setting = setting.split(<span class="string">&quot;,&quot;</span>)[<span class="number">2</span>]</span><br><span class="line">       search_parameters = &#123;<span class="string">&#x27;action&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;ua&#x27;</span>: <span class="string">&#x27;1.21&#x27;</span>,</span><br><span class="line">                            <span class="string">&#x27;PageName&#x27;</span>: <span class="string">&#x27;ASP.brief_result_aspx&#x27;</span>, <span class="string">&#x27;DbPreFix&#x27;</span>: <span class="string">&#x27;CJFQ&#x27;</span>,</span><br><span class="line">                            <span class="string">&#x27;DbCatalog&#x27;</span>: <span class="string">&#x27;中国学术期刊网络出版总库&#x27;</span>, <span class="string">&#x27;ConfigFile&#x27;</span>: <span class="string">&#x27;CJFQ.xml&#x27;</span>,</span><br><span class="line">                            <span class="string">&#x27;db_opt&#x27;</span>: <span class="string">&#x27;CJFQ&#x27;</span>, <span class="string">&#x27;db_value&#x27;</span>: <span class="string">&#x27;中国学术期刊网络出版总库&#x27;</span>,</span><br><span class="line">                            <span class="string">&#x27;magazine_value1&#x27;</span>: magazine_setting, <span class="string">&#x27;year_type&#x27;</span>: <span class="string">&#x27;echar&#x27;</span>,</span><br><span class="line">                            <span class="string">&#x27;year_from&#x27;</span>: year_from, <span class="string">&#x27;year_to&#x27;</span>: year_to,</span><br><span class="line">                            <span class="string">&#x27;magazine_special1&#x27;</span>: <span class="string">&#x27;=&#x27;</span></span><br><span class="line">                            &#125;</span><br><span class="line">       origin_url = <span class="string">&quot;http://kns.cnki.net/kns/request/SearchHandler.ashx&quot;</span></span><br><span class="line">       url = self.get_url(origin_url, search_parameters)</span><br><span class="line">       urls.append(url)</span><br><span class="line">   <span class="keyword">return</span> urls</span><br></pre></td></tr></table></figure></p>
<p>将 Excel 文件中读取的搜索条件通过 <code>createUrls()</code> 方法生成可迭代的请求列表。 生成第二个请求：</p>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result_parameters = &#123;<span class="string">&#x27;pagename&#x27;</span>: <span class="string">&#x27;ASP.brief_result_aspx&#x27;</span>, <span class="string">&#x27;DbPreFix&#x27;</span>: <span class="string">&#x27;CJFQ&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;Research&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="string">&#x27;KeyValue&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;S&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;recordsperpage&#x27;</span>: <span class="string">&#x27;50&#x27;</span></span><br><span class="line">                    , <span class="string">&quot;sorttype&quot;</span>: <span class="string">&quot;(被引频次,&#x27;INTEGER&#x27;) desc&quot;</span>&#125;</span><br><span class="line">origin_url = <span class="string">&quot;http://kns.cnki.net/kns/brief/brief.aspx&quot;</span></span><br><span class="line">act_url = self.get_url(origin_url, result_parameters)</span><br></pre></td></tr></table></figure></p>
<p>第二个请求中增加了 <code>recordsperpage</code> 和 <code>sorttype</code> 两个参数，前者代表每页显示的记录条数（Sprider 每采集 13 页左右，知网会提示输入验证码，所以设置为最大值 50 减少结果的总页数），后者代表结果的排序方式（采集引证文献时，由于一些文献是没有被引用的，所以采用按被引量递减的方式排序去过滤掉无用的请求，从而缩短采集时间）。<br> <code>get_url()</code> 方法：</p>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_url</span>(<span class="params">self, origin_url, parameters</span>):</span></span><br><span class="line">    act_url = origin_url + <span class="string">&quot;?&quot;</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> parameters.keys():</span><br><span class="line">        act_url = act_url + key + <span class="string">&quot;=&quot;</span> + urllib.request.quote(<span class="built_in">str</span>(parameters[key])) + <span class="string">&quot;&amp;&quot;</span></span><br><span class="line">    act_url = act_url.strip(<span class="string">&quot;&amp;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> act_url</span><br></pre></td></tr></table></figure></p>
<p><code>urllib.request.quote()</code> 中文字符进行编码处理。</p></li>
<li><p>发送</p>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_requests</span>(<span class="params">self</span>):</span></span><br><span class="line">headers_parameters = &#123;</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;kns.cnki.net&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.95 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;http://kns.cnki.net/kns/brief/result.aspx?dbPrefix=CJFQ&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">urls = self.createUrls()</span><br><span class="line"><span class="keyword">for</span> i, url <span class="keyword">in</span> <span class="built_in">enumerate</span>(urls):</span><br><span class="line">    <span class="keyword">yield</span> scrapy.Request(url, meta=&#123;<span class="string">&#x27;cookiejar&#x27;</span>: i&#125;,</span><br><span class="line">                         callback=self.result_page, headers=headers_parameters)</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">result_page</span>(<span class="params">self, response</span>):</span></span><br><span class="line">                result_parameters = &#123;<span class="string">&#x27;pagename&#x27;</span>: <span class="string">&#x27;ASP.brief_result_aspx&#x27;</span>, <span class="string">&#x27;DbPreFix&#x27;</span>: <span class="string">&#x27;CJFQ&#x27;</span>,</span><br><span class="line">                     <span class="string">&#x27;Research&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="string">&#x27;KeyValue&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;S&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;recordsperpage&#x27;</span>: <span class="string">&#x27;50&#x27;</span></span><br><span class="line">                     , <span class="string">&quot;sorttype&quot;</span>: <span class="string">&quot;(被引频次,&#x27;INTEGER&#x27;) desc&quot;</span>&#125;</span><br><span class="line">origin_url = <span class="string">&quot;http://kns.cnki.net/kns/brief/brief.aspx&quot;</span></span><br><span class="line">act_url = self.get_url(origin_url, result_parameters)</span><br><span class="line"><span class="keyword">return</span> scrapy.Request(act_url,</span><br><span class="line">                      meta=&#123;<span class="string">&#x27;cookiejar&#x27;</span>: response.meta[<span class="string">&#x27;cookiejar&#x27;</span>]&#125;,</span><br><span class="line">                      callback=self.parse, dont_filter=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p><code>meta=&#123;'cookiejar': i&#125;</code> 保存的是 cookie 用于保持持久性连接。</p>
<blockquote>
<p>There is support for keeping multiple cookie sessions per spider by using the cookiejar Request meta key. By default it uses a single cookie jar (session), but you can pass an identifier to use different ones. For example:</p>
</blockquote>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i, url <span class="keyword">in</span> <span class="built_in">enumerate</span>(urls):</span><br><span class="line">  <span class="keyword">yield</span> scrapy.Request(url, meta=&#123;<span class="string">&#x27;cookiejar&#x27;</span>: i&#125;,</span><br><span class="line">    callback=self.parse_page)</span><br></pre></td></tr></table></figure></p></li>
<li><p><code>start_requests(self)</code> 在获取到搜索结果之后回调 <code>result_page(self, response)</code> 进行进一步处理。</p></li>
<li><p><code>meta=&#123;'cookiejar': response.meta['cookiejar']&#125;</code> 取出 cookie 值向下传递。</p>
<blockquote>
<p>Keep in mind that the cookiejar meta key is not “sticky”. You need to keep passing it along on subsequent requests. For example:</p>
</blockquote>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span>(<span class="params">self, response</span>):</span></span><br><span class="line">   <span class="comment"># do some processing</span></span><br><span class="line">   <span class="keyword">return</span> scrapy.Request(<span class="string">&quot;http://www.example.com/otherpage&quot;</span>,</span><br><span class="line">        meta=&#123;<span class="string">&#x27;cookiejar&#x27;</span>: response.meta[<span class="string">&#x27;cookiejar&#x27;</span>]&#125;,</span><br><span class="line">        callback=self.parse_other_page)</span><br></pre></td></tr></table></figure></p></li>
<li><p><code>dont_filter=True</code> 由于第二次请求的链接相同，Scrapy 默认会过滤到这些请求，所以必须设置为 True。</p></li>
</ul></li>
</ol></li>
</ol>
<h4 id="配置访问异常重试">配置访问异常重试</h4>
<p>为了尽可能保证采集数据的完整性，需要配置 <code>setting.py</code> 文件加入如下代码： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 当访问异常时是否进行重试</span><br><span class="line">RETRY_ENABLED = True</span><br><span class="line"># 当遇到以下 http 状态码时进行重试</span><br><span class="line">RETRY_HTTP_CODES = [500, 502, 503, 504, 400, 403, 404, 408]</span><br><span class="line"># 重试次数</span><br><span class="line">RETRY_TIMES = 5</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="参考资料">参考资料</h4>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2Muc2NyYXB5Lm9yZy9lbi9tYXN0ZXIvaW50cm8vdHV0b3JpYWwuaHRtbA==">Scrapy 文档<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 下用 Scrapy 采集知网期刊数据（四）</title>
    <url>/posts/b12686d5.html</url>
    <content><![CDATA[<p>在<a href="/posts/undefined.html" title="Python 下用 Scrapy 采集知网期刊数据（三）">Python 下用 Scrapy 采集知网期刊数据（三）</a>中采集了所需数据，接下来该进行的就是数据的存储和导出。 <span id="more"></span></p>
<h2 id="数据存储">数据存储</h2>
<ol type="1">
<li>创建 MySql 表 <img src="http://i.imgur.com/OJF8SjS.png" alt="表格"> <img src="http://i.imgur.com/WpN2v4x.png" alt="表格"></li>
<li>导入 pymysql 库 <code>import pymysql</code></li>
<li>配置 MySql 在 <code>setting.py</code> 文件中写入下列配置代码： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># start MySQL database configure setting</span><br><span class="line">MYSQL_HOST = &#x27;localhost&#x27;</span><br><span class="line">MYSQL_DBNAME = &#x27;数据库名&#x27;</span><br><span class="line">MYSQL_USER = &#x27;登录名&#x27;</span><br><span class="line">MYSQL_PASSWD = &#x27;密码&#x27;</span><br><span class="line"># end of MySQL database configure setting</span><br></pre></td></tr></table></figure></li>
<li><p>编写 item pipeline</p>
<blockquote>
<p>每个 item pipeline 组件(有时称之为 “Item Pipeline” )是实现了简单方法的Python类。他们接收到Item并通过它执行一些行为，同时也决定此Item是否继续通过pipeline，或是被丢弃而不再进行处理。</p>
</blockquote>
<p>以采集引证文献的 item pipeline 为例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CnkiPipeline</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.connect = pymysql.connect(</span><br><span class="line">            host=settings.MYSQL_HOST,</span><br><span class="line">            db=settings.MYSQL_DBNAME,</span><br><span class="line">            user=settings.MYSQL_USER,</span><br><span class="line">            passwd=settings.MYSQL_PASSWD,</span><br><span class="line">            charset=<span class="string">&#x27;utf8&#x27;</span>,</span><br><span class="line">            use_unicode=<span class="literal">True</span>)</span><br><span class="line">        self.cursor = self.connect.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        <span class="keyword">if</span> item.__class__ == Quote:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.cursor.execute(<span class="string">&quot;&quot;&quot;select * from reference where literature_title = %s and quote_title = %s AND literature_author = %s</span></span><br><span class="line"><span class="string">                                      AND literature_journalName = %s AND literature_time = %s&quot;&quot;&quot;</span>,</span><br><span class="line">                                    (item[<span class="string">&quot;paper_title&quot;</span>], <span class="built_in">str</span>(item[<span class="string">&#x27;quote_title&#x27;</span>]), item[<span class="string">&#x27;paper_author&#x27;</span>],</span><br><span class="line">                                    item[<span class="string">&#x27;paper_journalName&#x27;</span>], item[<span class="string">&#x27;paper_time&#x27;</span>]))</span><br><span class="line">                ret = self.cursor.fetchone()</span><br><span class="line">                <span class="keyword">if</span> ret:</span><br><span class="line">                    self.cursor.execute(</span><br><span class="line">                        <span class="string">&quot;&quot;&quot;update reference set literature_title = %s,literature_author = %s, literature_journalName = %s,</span></span><br><span class="line"><span class="string">                          literature_time = %s,quote_title = %s</span></span><br><span class="line"><span class="string">                          where literature_title = %s and quote_title = %s AND literature_author = %s&quot;&quot;&quot;</span>,</span><br><span class="line">                        (<span class="built_in">str</span>(item[<span class="string">&#x27;paper_title&#x27;</span>]),</span><br><span class="line">                         <span class="built_in">str</span>(item[<span class="string">&#x27;paper_author&#x27;</span>]),</span><br><span class="line">                         <span class="built_in">str</span>(item[<span class="string">&#x27;paper_journalName&#x27;</span>]),</span><br><span class="line">                         <span class="built_in">str</span>(item[<span class="string">&#x27;paper_time&#x27;</span>]),</span><br><span class="line">                         <span class="built_in">str</span>(item[<span class="string">&#x27;quote_title&#x27;</span>]),</span><br><span class="line">                         <span class="built_in">str</span>(item[<span class="string">&#x27;paper_title&#x27;</span>]),</span><br><span class="line">                         <span class="built_in">str</span>(item[<span class="string">&#x27;quote_title&#x27;</span>]),</span><br><span class="line">                         <span class="built_in">str</span>(item[<span class="string">&#x27;paper_author&#x27;</span>])))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.cursor.execute(</span><br><span class="line">                        <span class="string">&quot;&quot;&quot;insert into reference(literature_title,literature_author,literature_journalName,</span></span><br><span class="line"><span class="string">                          literature_time,quote_title)</span></span><br><span class="line"><span class="string">                          value (%s,%s,%s,%s,%s)&quot;&quot;&quot;</span>,</span><br><span class="line">                        (<span class="built_in">str</span>(item[<span class="string">&#x27;paper_title&#x27;</span>]),</span><br><span class="line">                         <span class="built_in">str</span>(item[<span class="string">&#x27;paper_author&#x27;</span>]),</span><br><span class="line">                         <span class="built_in">str</span>(item[<span class="string">&#x27;paper_journalName&#x27;</span>]),</span><br><span class="line">                         <span class="built_in">str</span>(item[<span class="string">&#x27;paper_time&#x27;</span>]),</span><br><span class="line">                         <span class="built_in">str</span>(item[<span class="string">&#x27;quote_title&#x27;</span>])))</span><br><span class="line">                self.connect.commit()</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> error:</span><br><span class="line">                log(error)</span><br><span class="line">            <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure> item pipeline 中需要判断 item 的类型是否是需要被处理的类型，进而进行查询判断该条记录是否在数据库中存在，如果存在则进行更新，否则进行插入。</li>
<li><p>爬取结果 <img src="https://raw.githubusercontent.com/ikroal/blog-images/master/spider-result.png"> <img src="https://ws3.sinaimg.cn/large/006tNc79gy1fp3d83h4iqj31ic086ac9.jpg"></p></li>
</ol>
<h2 id="数据导出">数据导出</h2>
<p>为了将数据导出为 Excel 格式，利用到了<code>xlrd</code>，<code>xlsxwriter</code>，<code>xlutils</code> 库，导出代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> connect.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">        <span class="comment"># Create a new record</span></span><br><span class="line">        sql_quote = <span class="string">&quot;select * from periodical_data where journalName = %s and publicationDate = %s ORDER BY referenceNum DESC&quot;</span></span><br><span class="line">        sql_reference = <span class="string">&quot;select * from reference where quote_title = %s&quot;</span></span><br><span class="line">        cursor.execute(sql_quote, (title, publicationDate))</span><br><span class="line">        results = cursor.fetchall()</span><br><span class="line">        <span class="comment">#oneup 用于记录引用数在每年一次以上的文献数，onelow 用于记录引用数在每年一次以下的文献数，noone 用于记录没有被引用的文献数</span></span><br><span class="line">        oneup=<span class="number">0</span></span><br><span class="line">        onelow=<span class="number">0</span></span><br><span class="line">        noone=<span class="number">0</span></span><br><span class="line">        endrows=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">            reference=<span class="string">&quot;&quot;</span></span><br><span class="line">            years=[]</span><br><span class="line">            resultwork = xlrd.open_workbook(year + title + <span class="string">&quot;.xls&quot;</span>)</span><br><span class="line">            sheet1 = resultwork.sheet_by_index(<span class="number">0</span>)</span><br><span class="line">            old_excel = copy.copy(resultwork)</span><br><span class="line">            sheet_write = old_excel.get_sheet(<span class="number">0</span>)</span><br><span class="line">            rows = sheet1.nrows</span><br><span class="line">            cols = sheet1.ncols</span><br><span class="line">            quote_title = result[<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> result[<span class="string">&#x27;referenceNum&#x27;</span>] != <span class="string">&quot;0&quot;</span>:</span><br><span class="line">                cursor.execute(sql_reference, quote_title)</span><br><span class="line">                reference = cursor.fetchall()</span><br><span class="line">            <span class="keyword">if</span> result[<span class="string">&#x27;referenceNum&#x27;</span>]:</span><br><span class="line">                <span class="keyword">if</span> result[<span class="string">&#x27;referenceNum&#x27;</span>] &gt; (<span class="number">2016</span>-<span class="built_in">int</span>(year)):</span><br><span class="line">                    <span class="keyword">if</span> oneup == <span class="number">0</span>:</span><br><span class="line">                        sheet_write.write(rows, <span class="number">0</span>, <span class="string">&quot;引用每年一次以上&quot;</span>)</span><br><span class="line">                        rows = rows + <span class="number">1</span></span><br><span class="line">                    oneup = oneup + <span class="number">1</span></span><br><span class="line">                    sheet_write.write(rows, <span class="number">0</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">                    sheet_write.write(rows, <span class="number">1</span>, result[<span class="string">&#x27;title&#x27;</span>])</span><br><span class="line">                    sheet_write.write(rows, <span class="number">2</span>, result[<span class="string">&#x27;author&#x27;</span>])</span><br><span class="line">                    sheet_write.write(rows, <span class="number">3</span>, result[<span class="string">&#x27;journalName&#x27;</span>])</span><br><span class="line">                    sheet_write.write(rows, <span class="number">4</span>, result[<span class="string">&#x27;publicationDate&#x27;</span>])</span><br><span class="line">                    sheet_write.write(rows, <span class="number">5</span>, result[<span class="string">&#x27;referenceNum&#x27;</span>])</span><br><span class="line">                    sheet_write.write(rows, <span class="number">6</span>, result[<span class="string">&#x27;downloadNum&#x27;</span>])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> onelow == <span class="number">0</span>:</span><br><span class="line">                        sheet_write.write(rows, <span class="number">0</span>, <span class="string">&quot;引用每年一次以下&quot;</span>)</span><br><span class="line">                        rows = rows + <span class="number">1</span></span><br><span class="line">                    onelow = onelow + <span class="number">1</span></span><br><span class="line">                    sheet_write.write(rows, <span class="number">0</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">                    sheet_write.write(rows, <span class="number">1</span>, result[<span class="string">&#x27;title&#x27;</span>])</span><br><span class="line">                    sheet_write.write(rows, <span class="number">2</span>, result[<span class="string">&#x27;author&#x27;</span>])</span><br><span class="line">                    sheet_write.write(rows, <span class="number">3</span>, result[<span class="string">&#x27;journalName&#x27;</span>])</span><br><span class="line">                    sheet_write.write(rows, <span class="number">4</span>, result[<span class="string">&#x27;publicationDate&#x27;</span>])</span><br><span class="line">                    sheet_write.write(rows, <span class="number">5</span>, result[<span class="string">&#x27;referenceNum&#x27;</span>])</span><br><span class="line">                    sheet_write.write(rows, <span class="number">6</span>, result[<span class="string">&#x27;downloadNum&#x27;</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> noone == <span class="number">0</span>:</span><br><span class="line">                    sheet_write.write(rows, <span class="number">0</span>, <span class="string">&quot;没有引用&quot;</span>)</span><br><span class="line">                    rows = rows + <span class="number">1</span></span><br><span class="line">                noone = noone + <span class="number">1</span></span><br><span class="line">                sheet_write.write(rows, <span class="number">0</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">                sheet_write.write(rows, <span class="number">1</span>, result[<span class="string">&#x27;title&#x27;</span>])</span><br><span class="line">                sheet_write.write(rows, <span class="number">2</span>, result[<span class="string">&#x27;author&#x27;</span>])</span><br><span class="line">                sheet_write.write(rows, <span class="number">3</span>, result[<span class="string">&#x27;journalName&#x27;</span>])</span><br><span class="line">                sheet_write.write(rows, <span class="number">4</span>, result[<span class="string">&#x27;publicationDate&#x27;</span>])</span><br><span class="line">                sheet_write.write(rows, <span class="number">5</span>, result[<span class="string">&#x27;referenceNum&#x27;</span>])</span><br><span class="line">                sheet_write.write(rows, <span class="number">6</span>, result[<span class="string">&#x27;downloadNum&#x27;</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(reference)):</span><br><span class="line">                sheet_write.write(rows + row + <span class="number">1</span>, <span class="number">0</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">                sheet_write.write(rows+row+<span class="number">1</span>, <span class="number">1</span>, reference[row][<span class="string">&#x27;literature_title&#x27;</span>])</span><br><span class="line">                sheet_write.write(rows+row+<span class="number">1</span>, <span class="number">2</span>, reference[row][<span class="string">&#x27;literature_author&#x27;</span>])</span><br><span class="line">                sheet_write.write(rows+row+<span class="number">1</span>, <span class="number">3</span>, reference[row][<span class="string">&#x27;literature_journalName&#x27;</span>])</span><br><span class="line">                sheet_write.write(rows+row+<span class="number">1</span>, <span class="number">4</span>, reference[row][<span class="string">&#x27;literature_time&#x27;</span>])</span><br><span class="line">                years.append(reference[row][<span class="string">&#x27;literature_time&#x27;</span>])</span><br><span class="line">            c = Counter(years)</span><br><span class="line">            <span class="built_in">print</span>(c.most_common(<span class="number">1</span>))</span><br><span class="line">            <span class="built_in">print</span>(result[<span class="string">&#x27;title&#x27;</span>])</span><br><span class="line">            <span class="keyword">if</span> result[<span class="string">&#x27;referenceNum&#x27;</span>]:</span><br><span class="line">                <span class="keyword">if</span> result[<span class="string">&#x27;referenceNum&#x27;</span>] &gt; (<span class="number">2016</span>-<span class="built_in">int</span>(year)):</span><br><span class="line">                    <span class="keyword">if</span> c.most_common(<span class="number">1</span>):</span><br><span class="line">                        <span class="keyword">for</span> most <span class="keyword">in</span> c.most_common(<span class="number">1</span>):</span><br><span class="line">                            most_year = <span class="built_in">str</span>(most).split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>].split(<span class="string">&quot;(&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">                            most_time = <span class="built_in">str</span>(most).split(<span class="string">&quot;,&quot;</span>)[<span class="number">1</span>].split(<span class="string">&quot;)&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">                            sheet_write.write(rows, <span class="number">7</span>, most_year)</span><br><span class="line">                            sheet_write.write(rows, <span class="number">8</span>, most_time)</span><br><span class="line">            old_excel.save(year + title + <span class="string">&quot;.xls&quot;</span>)</span><br><span class="line">            endrows = rows + <span class="built_in">len</span>(reference) + <span class="number">2</span></span><br><span class="line">        resultwork = xlrd.open_workbook(year + title + <span class="string">&quot;.xls&quot;</span>)</span><br><span class="line">        sheet1 = resultwork.sheet_by_index(<span class="number">0</span>)</span><br><span class="line">        old_excel = copy.copy(resultwork)</span><br><span class="line">        sheet_write = old_excel.get_sheet(<span class="number">0</span>)</span><br><span class="line">        sheet_write.write(endrows, <span class="number">0</span>, <span class="string">&quot;每年引用次数一次以上百分比：&quot;</span> + <span class="built_in">str</span>(<span class="built_in">float</span>(oneup)/<span class="built_in">len</span>(results)))</span><br><span class="line">        sheet_write.write(endrows+<span class="number">1</span>, <span class="number">0</span>, <span class="string">&quot;每年引用次数一次以下百分比：&quot;</span> + <span class="built_in">str</span>(<span class="built_in">float</span>(onelow) / <span class="built_in">len</span>(results)))</span><br><span class="line">        sheet_write.write(endrows+<span class="number">2</span>, <span class="number">0</span>, <span class="string">&quot;每年没有引用百分比：&quot;</span> + <span class="built_in">str</span>(<span class="built_in">float</span>(noone) / <span class="built_in">len</span>(results)))</span><br><span class="line">        old_excel.save(year + title + <span class="string">&quot;.xls&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    connect.close()</span><br></pre></td></tr></table></figure>
<p>导出效果： <img src="https://raw.githubusercontent.com/ikroal/blog-images/master/output-result.png"></p>
<hr>
<h2 id="参考资料">参考资料</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2Muc2NyYXB5Lm9yZy9lbi9tYXN0ZXIvaW50cm8vdHV0b3JpYWwuaHRtbA==">Scrapy 文档<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 语法基础</title>
    <url>/posts/474fe85a.html</url>
    <content><![CDATA[<p>近段时间学习了下Python，于是大略总结了下所学的语法知识：<span id="more"></span></p>
<ul>
<li><p>列表的创建:</p>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">movies = [<span class="string">&quot;The Holy Grail&quot;</span>, <span class="number">1975</span>, <span class="string">&quot;Terry Jones &amp; Terry Gilliam&quot;</span>, <span class="number">91</span>,[<span class="string">&quot;Graham Chapman&quot;</span>, [<span class="string">&quot;Michael Palin&quot;</span>, <span class="string">&quot;John Cleese&quot;</span>, <span class="string">&quot;Terry Gilliam&quot;</span>, <span class="string">&quot;Eric Idle&quot;</span>, <span class="string">&quot;Terry Jones&quot;</span>]]]</span><br></pre></td></tr></table></figure></p>
<p>这里是一个嵌套列表的创建，其中的中括号也可以换成大括号，双引号可以用单引号代替，列表里面可以是混合的数据。常用的方法有 ：</p>
<ul>
<li><code>append()</code>：在列表末尾增加一个数据项</li>
<li><code>pop()</code>：在列表的末尾删除数据</li>
<li><code>extend(数据项集合)</code>：在列表的末尾添加一个数据项集合</li>
<li><code>remove(项)</code>：删除一个特定数据的项</li>
<li><code>insert(序号, 数据项)</code>：在指定序号的前面插入数据项</li>
</ul></li>
<li><p>列表的遍历之 <code>for</code> 循环:<br>
列表的遍历需要用到 <code>for</code> 循环，其基本语法是：<code>for 变量 in 列表项：</code>，由此可以将列表中的每一项（只会遍历一级列表）通过 <code>print()</code> 函数输出。</p></li>
<li><p>嵌套列表的遍历之 <code>if</code> 判断:<br>
对于嵌套列表的遍历，需要判断 <code>for</code> 循环时每一项是否是列表项，因此需要用到 <code>if</code> 判断语句和 <code>isinstance</code>，<code>isinstance(变量, list)</code> 用于判断是否是列表，<code>if</code> 的语法是：</p>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 某个条件满足:</span><br><span class="line">　　<span class="literal">True</span>组</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">　　<span class="literal">False</span>组</span><br></pre></td></tr></table></figure></p></li>
<li><p>嵌套列表的遍历之定义函数：<br>
上述最多只能够处理一层嵌套的列表，如果希望处理多层嵌套的列表则需要定义函数并去递归调用，其基本语法是：</p>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名(<span class="params">参数</span>):</span></span><br><span class="line">　代码块</span><br></pre></td></tr></table></figure></p></li>
<li><p>转换为模块：<br>
代码块保存为 .py 文件，创建 setup.py 的文件，包含如下内容：</p>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</span><br><span class="line">setup(</span><br><span class="line">    　name=<span class="string">&#x27;HelloWorld&#x27;</span>,</span><br><span class="line">    　version=<span class="string">&#x27;1.0.0&#x27;</span>,</span><br><span class="line">    　py_modules=[<span class="string">&#x27;nester&#x27;</span>],</span><br><span class="line">    　url=<span class="string">&#x27;http://www.headfirstlabs&#x27;</span>,</span><br><span class="line">    　author=<span class="string">&#x27;firstdream&#x27;</span>,</span><br><span class="line">    　author_email=<span class="string">&#x27;firstdream10@icloud.com&#x27;</span>,</span><br><span class="line">    　description=<span class="string">&#x27;A simple printer of nested lists&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p></li>
<li><p>构建发布文件 (windows 下):<br> <code>python setup.py sdist</code></p></li>
<li><p>安装 Python 副本到本地：<br> <code>python setup.py install</code></p></li>
<li><p>导入模块：<br> <code>import 模块名</code></p></li>
<li><p>向 PyPl 上传代码：<br> <code>python setup.py register(第一次上传)</code></p>
<p><code>python setup.py sdist upload</code></p></li>
<li><p>常用 BIF</p>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建一个空的列表</span></span><br><span class="line"><span class="built_in">list</span>()</span><br><span class="line"><span class="comment">#返回一个迭代器，根据需要生成一个指定范围的数字，常配合 for 循环使用</span></span><br><span class="line"><span class="built_in">range</span>()</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">  <span class="built_in">print</span>(num)</span><br><span class="line">＃创建成对数据的一个编号列表，从 <span class="number">0</span> 开始</span><br><span class="line"><span class="built_in">enumerate</span>()</span><br><span class="line"><span class="comment">#将一个字符串或另一个数转换为一个整数(如果可行)</span></span><br><span class="line"><span class="built_in">int</span>()</span><br><span class="line"><span class="comment">#返回一个 Python 数据对象的唯一标识</span></span><br><span class="line"><span class="built_in">id</span>()</span><br><span class="line"><span class="comment">#返回一个可迭代数据结构中的下一项</span></span><br><span class="line"><span class="built_in">next</span>()</span><br></pre></td></tr></table></figure></p></li>
<li><p>为函数提供默认参数 def 函数名(参数=缺省值):<br></p></li>
</ul>
<hr>
<p>2016.10.7<br></p>
<ul>
<li><p>文件操作</p>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#以默认的 r 模式打开文件</span></span><br><span class="line">the_file = <span class="built_in">open</span>(<span class="string">&quot;文件名&quot;</span>)</span><br><span class="line"><span class="comment">#以 w 模式打开文件</span></span><br><span class="line">out = <span class="built_in">open</span>(<span class="string">&quot;文件名&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"><span class="comment">#关闭文件</span></span><br><span class="line">the_file.close()</span><br><span class="line"><span class="comment">#读取文件数据行</span></span><br><span class="line">the_file.readline()</span><br><span class="line"><span class="comment">#返回文件起始位置</span></span><br><span class="line">the_file.seek(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#写入数据到文件</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;内容&quot;</span>, file=文件对象名)</span><br></pre></td></tr></table></figure></p></li>
<li><p>异常处理</p>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  可能发生错误的代码</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">  错误恢复代码</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">  最后的执行代码</span><br><span class="line"><span class="comment">#数据不符合期望的格式时会出现 ValueError</span></span><br><span class="line"><span class="comment">#数据无法正常访问时会出现 IOError</span></span><br><span class="line"><span class="comment">#用with处理文件，可不需要 finally 模块</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  <span class="keyword">with</span> <span class="built_in">open</span>() <span class="keyword">as</span> data:</span><br><span class="line">    代码</span><br><span class="line"><span class="keyword">except</span> 异常：</span><br><span class="line">  代码</span><br></pre></td></tr></table></figure></p></li>
<li><p>其余方法</p>
<h2 id="section"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#显示当前目录及更改当前目录</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.getcwd()</span><br><span class="line">os.chdir(<span class="string">&quot;路径&quot;</span>)</span><br><span class="line"><span class="comment">#split() 分割字符串，返回一个字符串列表</span></span><br><span class="line">(role, line_spoken) = each_line.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line"><span class="comment">#利用 split 的可选参数指定为两部分</span></span><br><span class="line">split(<span class="string">&quot;:&quot;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">#find() 查找字符串</span></span><br><span class="line">each_line.find(<span class="string">&quot;:&quot;</span>)</span><br><span class="line"><span class="comment">#not 取反判断条件</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> each_line.find(<span class="string">&#x27;:&#x27;</span>) == -<span class="number">1</span>:</span><br><span class="line"><span class="comment">#pass 作为Python的空语句或null语句</span></span><br><span class="line"><span class="comment">#strip() 方法从字符串中去除不想要的空白符</span></span><br><span class="line">line_spoken.strip()</span><br><span class="line"><span class="comment">#str() 可以用来访问任何数据对象的字符串表示</span></span><br><span class="line"><span class="comment">#locals() 返回当前作用域中的变量集合</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;man_file&#x27;</span> <span class="keyword">in</span> <span class="built_in">locals</span>():</span><br></pre></td></tr></table></figure></h2></li>
</ul>
<p>2016.10.15</p>
<ul>
<li><p>pickle &quot;腌制&quot;数据和恢复数据</p>
<p>Python 提供了一个标准库 pickle 用于保存和加载 Python 的数据对象，使用方法：</p>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">...</span><br><span class="line"><span class="comment">#pickle 处理文件数据时必须以二进制访问</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;mydata.pickle&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> mysavedata:</span><br><span class="line">   pickle.dump([<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;&#x27;</span>three], mysavedata)</span><br><span class="line">   ...</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;mydata.pickle&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> myrestoredata:</span><br><span class="line">   a_list = pickle.load(myrestoredata)</span><br></pre></td></tr></table></figure></p></li>
<li><p>列表推导 列表推导用于减少转换列表时的代码量</p>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">新列表 = [转换函数(t) <span class="keyword">for</span> t <span class="keyword">in</span> 原列表]</span><br><span class="line">new_l = []</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> old_l:</span><br><span class="line">　　new_l.append(<span class="built_in">len</span>(t))</span><br><span class="line">new_l = [<span class="built_in">len</span>(t) <span class="keyword">for</span> t <span class="keyword">in</span> old_l]</span><br></pre></td></tr></table></figure></p></li>
<li><p>集合 set Python 提供一种名为集合的数据结构，集合中的数据是无序的，而且不允许重复 　创建集合：</p>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#set() -&gt; new empty set object</span></span><br><span class="line"><span class="comment">#set(iterable) -&gt; new set object</span></span><br><span class="line">集合名 = <span class="built_in">set</span>(<span class="built_in">object</span>)</span><br></pre></td></tr></table></figure></p></li>
<li><p>字典 字典将 value 和 key 关联，使用字典:</p>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建字典</span></span><br><span class="line">字典名 = &#123;&#125;</span><br><span class="line">字典名 = <span class="built_in">dict</span>()</span><br><span class="line"><span class="comment">#增加数据</span></span><br><span class="line">字典名[key] = value <span class="comment">#vlaue可以为任意数据类型</span></span><br><span class="line">字典名 = &#123;’key‘:value, <span class="string">&#x27;key&#x27;</span>:value&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>类</p>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 类名:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_init_</span>(<span class="params">self</span>):</span></span><br><span class="line">     <span class="comment">#初始化对象的代码</span></span><br><span class="line"><span class="comment">#创建对象实例</span></span><br><span class="line">对象 = 类名()</span><br></pre></td></tr></table></figure></p></li>
<li><p>继承</p>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名(<span class="params">继承的类名</span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_init_</span>(<span class="params">self, 参数</span>):</span></span><br><span class="line"><span class="comment">#初始化对象的代码</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>其它<br> <code>print(列表[-1])</code> 输出最后一个数据项<br> <code>strip()</code> 方法可以从字符串中去除不想要的空白符<br> <code>in</code> 操作符用于检查成员关系<br> 原地排序 <code>sort()</code>，原列表顺序改变<br> 复制排序 <code>sorted()</code>，返回一个排序过的原列表副本<br> 分片访问列表<code>列表[起始值：结束值]</code>可以访问起始到结束(不包括结束值)的列表项</p></li>
</ul>
<hr>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Python Base</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 基础之 Selector 的用法</title>
    <url>/posts/undefined.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>Selector（选择器）常常被用作控件的背景，是一种状态列表，一般分为 Drawable-selector 和 Color-selector，接下来分别说说这两者的使用方法。<span id="more"></span></p>
<h2 id="drawable-selector">Drawable-selector</h2>
<ol type="1">
<li><p>首先需要在 res/drawable 文件夹下新建一个 Drawable Resource File 文件，填入文件名即可，创建之后的文件内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在 selector 标签下新建一个 item 标签，item 标签表示一种状态，如果不指明状态，那么控件在任何状态下都会加载 item 内的 样式，常用的状态设置如下所示：</p>
<ul>
<li>android:state_pressed 设置为 true 时代表按压控件的时候使用 item 样式</li>
<li>android:state_selected 设置为 true 时代表控件被选中的时候使用 item 样式</li>
<li>android:state_checked 设置为 true 时代表控件处于 checked 状态的时候使用 item 样式</li>
</ul></li>
<li><p>接下来在 item 内部创建 shape 标签用于指定绘制的图形类别，总共有四种图形可以选择分别是：rectangle、oval、line、ring。在确定需要绘制的 shape 类型之后，就可以在 shape 标签内部对 shape 的各项属性进行配置，总共有六种标签属性。</p>
<ul>
<li>size 用来设置 shape 的大小</li>
<li>solid 用来设置填充 shape 的颜色</li>
<li>corners 用来设置 shape 的角度</li>
<li>stroke 用来给 shape 描边，可以描成虚线或实线</li>
<li>padding 设置内边距</li>
<li>gradient 设置 shape 的渐变颜色</li>
</ul></li>
<li><p>设置好相应的属性之后就可以通过设置控件的 android:drawble 属性进行使用了，这里给出一个例子</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_pressed</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">shape</span> <span class="attr">android:shape</span>=<span class="string">&quot;rectangle&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">&quot;5dp&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stroke</span> <span class="attr">android:width</span>=<span class="string">&quot;1dp&quot;</span> <span class="attr">android:color</span>=<span class="string">&quot;#00faff&quot;</span> <span class="attr">android:dashGap</span>=<span class="string">&quot;10dp&quot;</span> 	<span class="attr">android:dashWidth</span>=<span class="string">&quot;10dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">size</span> <span class="attr">android:width</span>=<span class="string">&quot;150dp&quot;</span> <span class="attr">android:height</span>=<span class="string">&quot;150dp&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">&quot;#bcb7b7&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_pressed</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">shape</span> <span class="attr">android:shape</span>=<span class="string">&quot;oval&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">&quot;360dp&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stroke</span> <span class="attr">android:width</span>=<span class="string">&quot;1dp&quot;</span> <span class="attr">android:color</span>=<span class="string">&quot;#00fcb5&quot;</span> <span class="attr">android:dashGap</span>=<span class="string">&quot;10dp&quot;</span> 			<span class="attr">android:dashWidth</span>=<span class="string">&quot;10dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">size</span> <span class="attr">android:width</span>=<span class="string">&quot;300dp&quot;</span> <span class="attr">android:height</span>=<span class="string">&quot;300dp&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">&quot;#ffff&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上述代码绘制了两种状态，一种是默认状态下的圆，白色填充、虚线描边、半径是 300dp。另一种是被按下的状态，灰色填充、虚线描边、长和宽与圆一致。具体效果如下图所示： <img src="https://raw.githubusercontent.com/ikroal/blog-images/master/selector-circle.png"><img src="https://raw.githubusercontent.com/ikroal/blog-images/master/selector-square.png"></p></li>
</ol>
<h2 id="color-selector">Color-selector</h2>
<p>Color-selector 定义在 res文件夹下，使用过程基本与 Drawable-selector 一致，不同在于 Color-selector 只是用于定义控件的颜色，所以只需要配置 item 标签的 color 属性即可，具体的例子如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:color</span>=<span class="string">&quot;#000000&quot;</span> <span class="attr">android:state_pressed</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:color</span>=<span class="string">&quot;#ffff&quot;</span> <span class="attr">android:state_pressed</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过指定 item 的状态和颜色，即可做到按压和松开时控件的颜色变化。</p>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Drawble</tag>
      </tags>
  </entry>
  <entry>
    <title>BootStrap-FileInput 的基本使用</title>
    <url>/posts/2eda95da.html</url>
    <content><![CDATA[<h4 id="安装与引入">安装与引入</h4>
<p>在引入 File Input 之前首先需要下载下列文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bootstrap-fileinput/css/fileinput.min.css</span><br><span class="line">bootstrap-fileinput/js/fileinput_locale_zh.js</span><br><span class="line">bootstrap-fileinput/js/fileinput.min.js</span><br></pre></td></tr></table></figure>
<p>上述文件可以在 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2thcnRpay12L2Jvb3RzdHJhcC1maWxlaW5wdXQ=">File Input 的项目地址<i class="fa fa-external-link-alt"></i></span>找到。<span id="more"></span> 在下载好之后就需要添加如下代码进行引入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;link href=<span class="string">&quot;/static/css/fileinput.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/static/js/fileinput.min.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/static/js/fileinput-zh.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="file-input-的使用">File Input 的使用</h4>
<p>首先需要在页面添加一个 File Input 控件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;import_file&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span> <span class="attr">class</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userfile&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">           <span class="attr">data-overwrite-initial</span>=<span class="string">&quot;false&quot;</span> <span class="attr">data-min-file-count</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>data-min-file-count</code> 可以设定最少上传的文件数</li>
</ul>
<p>在添加完之后就需要对控件进行初始化：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#import_file&quot;</span>).fileinput(&#123;</span><br><span class="line">    <span class="attr">uploadUrl</span>: <span class="string">&quot;/upload_file&quot;</span>, <span class="comment">//设置上传的地址</span></span><br><span class="line">    <span class="attr">allowedFileExtensions</span>: [<span class="string">&#x27;xls&#x27;</span>, <span class="string">&#x27;xlsx&#x27;</span>], <span class="comment">//设置允许上传的文件格式</span></span><br><span class="line">    <span class="attr">overwriteInitial</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">language</span>: <span class="string">&#x27;zh&#x27;</span>, <span class="comment">//设置语言</span></span><br><span class="line">    <span class="attr">maxFileSize</span>: <span class="number">6000</span>,</span><br><span class="line">    <span class="attr">maxFilesNum</span>: <span class="number">10</span>, <span class="comment">//允许上传的最大文件数</span></span><br><span class="line">    <span class="attr">uploadAsync</span>: <span class="literal">true</span>, <span class="comment">//默认异步上传</span></span><br><span class="line">    <span class="comment">//allowedFileTypes: [&#x27;image&#x27;, &#x27;video&#x27;, &#x27;flash&#x27;],</span></span><br><span class="line">    <span class="attr">allowedPreviewTypes</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">previewFileIconSettings</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;xls&#x27;</span>: <span class="string">&#x27;&lt;i class=&quot;fa fa-file-excel-o text-success&quot;&gt;&lt;/i&gt;&#x27;</span></span><br><span class="line">    &#125;, <span class="comment">//预览文件的图标设置</span></span><br><span class="line">    <span class="attr">previewFileExtSettings</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;xls&#x27;</span>: <span class="function"><span class="keyword">function</span> (<span class="params">ext</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ext.match(<span class="regexp">/(xls|xlsx)$/i</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="comment">//xls 和 xlsx 使用同一预览</span></span><br><span class="line">    <span class="attr">slugCallback</span>: <span class="function"><span class="keyword">function</span> (<span class="params">filename</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> filename.replace(<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;_&#x27;</span>).replace(<span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;_&#x27;</span>);</span><br><span class="line">    &#125; <span class="comment">//使用回调功能将文件名转换成处理之后的文件名。</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>后台处理：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload_file&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        file = request.files.get(<span class="string">&#x27;userfile&#x27;</span>)</span><br><span class="line">        save_file_name = file.filename</span><br><span class="line">        file.save(save_file_name)</span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;info&#x27;</span>: <span class="string">&quot;上传成功&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>这里对上传的 Excel 文件进行了保存，返回上传成功的信息。</li>
</ul>
<h4 id="问题">问题</h4>
<ol type="1">
<li>在对 Excel 文件进行预览图标设置之前，如果通过按钮选择文件而不是拖拽，则会出现由预览文件所导致卡顿，在将 Excel 文件的预览设置为图标之后解决。</li>
<li>从后端直接返回字符串出现错误，改为返回 Json 格式数据后解决。</li>
</ol>
<hr>
<h4 id="参考资料">参考资料</h4>
<ol type="1">
<li><span class="exturl" data-url="aHR0cDovL3BsdWdpbnMua3JhamVlLmNvbS9maWxlLWlucHV0">File Input 开发文档<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3BsdWdpbnMua3JhamVlLmNvbS9maWxlLWJhc2ljLXVzYWdlLWRlbW8=">File Input Demo<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>BootStrap</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>d3.js 绘制力导向图</title>
    <url>/posts/42f7685.html</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<blockquote>
<p>D3.js是一个JavaScript库，它可以通过数据来操作文档。D3可以通过使用HTML、SVG和CSS把数据鲜活形象地展现出来。D3严格遵循Web标准，因而可以让你的程序轻松兼容现代主流浏览器并避免对特定框架的依赖。同时，它提供了强大的可视化组件，可以让使用者以数据驱动的方式去操作DOM。</p>
</blockquote>
<span id="more"></span>
<h2 id="使用">使用</h2>
<p>在 HTML 文件中引入：</p>
<p><code>&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</code></p>
<h3 id="确定初始数据">确定初始数据</h3>
<p>初始数据为节点数据 nodes 和 连线数组 links，如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nodes = [&#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Website&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;ebay&#x27;</span>&#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Antiques&#x27;</span>&#125;, &#123;</span><br><span class="line">        <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Baby&#x27;</span></span><br><span class="line">    &#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Books&#x27;</span>&#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Business &amp; Industrial&#x27;</span>&#125;, &#123;</span><br><span class="line">        <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Cameras &amp; Photo&#x27;</span></span><br><span class="line">    &#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Cell Phones &amp; Accessories&#x27;</span>&#125;, &#123;</span><br><span class="line">        <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Clothing, Shoes &amp; Accessories&#x27;</span></span><br><span class="line">    &#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Coins &amp; Paper Money&#x27;</span>&#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Collectibles&#x27;</span>&#125;, &#123;</span><br><span class="line">        <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Computers Tablets &amp; Networking&#x27;</span></span><br><span class="line">    &#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Consumer Electronics&#x27;</span>&#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Crafts&#x27;</span>&#125;, &#123;</span><br><span class="line">        <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;eBay Motors&#x27;</span></span><br><span class="line">    &#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Everything Else&#x27;</span>&#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Health &amp; Beauty&#x27;</span>&#125;, &#123;</span><br><span class="line">        <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Home &amp; Garden&#x27;</span></span><br><span class="line">    &#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Jewelry &amp; Watches&#x27;</span>&#125;, &#123;</span><br><span class="line">        <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Musical Instruments &amp; Gear&#x27;</span></span><br><span class="line">    &#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Sporting Goods&#x27;</span>&#125;];</span><br><span class="line">    <span class="keyword">var</span> links = [&#123;<span class="string">&#x27;source&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;target&#x27;</span>: <span class="number">0</span>&#125;, &#123;<span class="string">&#x27;source&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;target&#x27;</span>: <span class="number">0</span>&#125;, &#123;<span class="string">&#x27;source&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;target&#x27;</span>: <span class="number">0</span>&#125;, &#123;</span><br><span class="line">        <span class="string">&#x27;source&#x27;</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="string">&#x27;target&#x27;</span>: <span class="number">0</span></span><br><span class="line">    &#125;, &#123;<span class="string">&#x27;source&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;target&#x27;</span>: <span class="number">0</span>&#125;, &#123;<span class="string">&#x27;source&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;target&#x27;</span>: <span class="number">0</span>&#125;, &#123;<span class="string">&#x27;source&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;target&#x27;</span>: <span class="number">0</span>&#125;, &#123;</span><br><span class="line">        <span class="string">&#x27;source&#x27;</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="string">&#x27;target&#x27;</span>: <span class="number">0</span></span><br><span class="line">    &#125;, &#123;<span class="string">&#x27;source&#x27;</span>: <span class="number">9</span>, <span class="string">&#x27;target&#x27;</span>: <span class="number">0</span>&#125;, &#123;<span class="string">&#x27;source&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;target&#x27;</span>: <span class="number">0</span>&#125;, &#123;<span class="string">&#x27;source&#x27;</span>: <span class="number">11</span>, <span class="string">&#x27;target&#x27;</span>: <span class="number">0</span>&#125;, &#123;</span><br><span class="line">        <span class="string">&#x27;source&#x27;</span>: <span class="number">12</span>,</span><br><span class="line">        <span class="string">&#x27;target&#x27;</span>: <span class="number">0</span></span><br><span class="line">    &#125;, &#123;<span class="string">&#x27;source&#x27;</span>: <span class="number">13</span>, <span class="string">&#x27;target&#x27;</span>: <span class="number">0</span>&#125;, &#123;<span class="string">&#x27;source&#x27;</span>: <span class="number">14</span>, <span class="string">&#x27;target&#x27;</span>: <span class="number">0</span>&#125;, &#123;<span class="string">&#x27;source&#x27;</span>: <span class="number">15</span>, <span class="string">&#x27;target&#x27;</span>: <span class="number">0</span>&#125;, &#123;</span><br><span class="line">        <span class="string">&#x27;source&#x27;</span>: <span class="number">16</span>,</span><br><span class="line">        <span class="string">&#x27;target&#x27;</span>: <span class="number">0</span></span><br><span class="line">    &#125;, &#123;<span class="string">&#x27;source&#x27;</span>: <span class="number">17</span>, <span class="string">&#x27;target&#x27;</span>: <span class="number">0</span>&#125;, &#123;<span class="string">&#x27;source&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;target&#x27;</span>: <span class="number">0</span>&#125;, &#123;<span class="string">&#x27;source&#x27;</span>: <span class="number">19</span>, <span class="string">&#x27;target&#x27;</span>: <span class="number">0</span>&#125;];</span><br></pre></td></tr></table></figure>
<h3 id="创建布局">创建布局</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> force = d3.layout.force()</span><br><span class="line">   .charge(-<span class="number">300</span>).linkDistance(<span class="number">130</span>).size([width, height]);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>d3.layout.force()</code> 创建一个力导向图布局。</li>
<li><code>charge()</code> 设定节点的电荷数，负数则排斥，正数则吸引。</li>
<li><code>linkDistance()</code> 设置连线的距离。</li>
<li><code>size([x, y])</code> 设置力导向图的作用范围，用于指定重力中心为（x/2，y/2），所有节点的初始位置限定为 [0,x] 和 [0,y] 之间。</li>
</ul>
<h3 id="创建-svg">创建 SVG</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> svg = d3.select(<span class="string">&quot;#graph&quot;</span>).append(<span class="string">&quot;svg&quot;</span>)</span><br><span class="line">        .attr(<span class="string">&quot;width&quot;</span>, <span class="string">&quot;100%&quot;</span>).attr(<span class="string">&quot;height&quot;</span>, <span class="string">&quot;380px&quot;</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>append()</code> 用于添加元素</li>
<li>设置 <code>svg</code> 的长宽</li>
</ul>
<h3 id="转换数据和绘制">转换数据和绘制</h3>
<ul>
<li><p>设定节点数组和连线数组之后开启布局计算 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">force.nodes(nodes).links(links).start();</span><br></pre></td></tr></table></figure></p></li>
<li><p>绘制 绑定数组 nodes 和 links，分别添加节点的元素 &lt;circle&gt; 和连线的元素&lt;line&gt;。另外，还要添加文字元素 &lt;text&gt;。各元素的 CSS 样式分别为：node，link，nodeText。代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> link = svg.selectAll(<span class="string">&quot;.link&quot;</span>)</span><br><span class="line">            .data(links);</span><br><span class="line">link.enter()</span><br><span class="line">            .insert(<span class="string">&quot;line&quot;</span>, <span class="string">&quot;.link&quot;</span>)</span><br><span class="line">            .attr(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;link&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> node = svg.selectAll(<span class="string">&quot;.node&quot;</span>)</span><br><span class="line">            .data(nodes);</span><br><span class="line">node.enter()</span><br><span class="line">            .append(<span class="string">&quot;circle&quot;</span>)</span><br><span class="line">            .attr(<span class="string">&quot;class&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;node &quot;</span> + d.label</span><br><span class="line">            &#125;)</span><br><span class="line">            .attr(<span class="string">&quot;r&quot;</span>, <span class="number">25</span>)</span><br><span class="line">            .call(force.drag);</span><br><span class="line"><span class="keyword">var</span> text = svg.selectAll(<span class="string">&quot;.nodeText&quot;</span>)</span><br><span class="line">.data(nodes);</span><br><span class="line">text.enter()</span><br><span class="line">    .append(<span class="string">&quot;text&quot;</span>)</span><br><span class="line">    .attr(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;nodeText&quot;</span>)</span><br><span class="line">    .attr(<span class="string">&quot;x&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> d.x;</span><br><span class="line">    &#125;)</span><br><span class="line">    .attr(<span class="string">&quot;font-size&quot;</span>, <span class="string">&quot;10px&quot;</span>)</span><br><span class="line">    .attr(<span class="string">&quot;text-anchor&quot;</span>, <span class="string">&quot;middle&quot;</span>)</span><br><span class="line">    .attr(<span class="string">&quot;dy&quot;</span>, <span class="string">&quot;.3em&quot;</span>)</span><br><span class="line">    .attr(<span class="string">&quot;y&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> d.y;</span><br><span class="line">    &#125;).text(<span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> act_title;</span><br><span class="line">    <span class="keyword">if</span> (d.title.length &gt; <span class="number">8</span>) &#123;</span><br><span class="line">        act_title = d.title.substring(<span class="number">0</span>, <span class="number">8</span>) + <span class="string">&quot;...&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> act_title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> d.title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>节点的选择集调用了 <code>call(force.drag)</code>，可以让节点支持鼠标拖拽。</li>
<li>连线的选择集调用了 <code>insert(&quot;line&quot;, &quot;.link&quot;)</code>，可以确保力导向图进行更新（移除节点后增加节点）之后连线不会覆盖在节点上。</li>
</ul></li>
<li><p>在拖动节点之后，图形元素的坐标会发生变化，所以需要设置一个监听器进行更新，代码如下：</p>
<p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">force.on(<span class="string">&quot;tick&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            link.attr(<span class="string">&quot;x1&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> d.source.x;</span><br><span class="line">            &#125;)</span><br><span class="line">                .attr(<span class="string">&quot;y1&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> d.source.y;</span><br><span class="line">                &#125;)</span><br><span class="line">                .attr(<span class="string">&quot;x2&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> d.target.x;</span><br><span class="line">                &#125;)</span><br><span class="line">                .attr(<span class="string">&quot;y2&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> d.target.y;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">            node.attr(<span class="string">&quot;transform&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;translate(&quot;</span> + d.x + <span class="string">&quot;,&quot;</span> + d.y + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">                text.attr(<span class="string">&quot;x&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> d.x;</span><br><span class="line">            &#125;)</span><br><span class="line">                .attr(<span class="string">&quot;y&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> d.y;</span><br><span class="line">                &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<pre><code> * `force.on()` 可为三种事件设定监听器，start，tick，end。其中，start 是刚开始运动，end 是运动停止，tick 是表示运动的每一步。
 * 选择集 node，link，text 上都绑定了数据，当每一次 tick 事件发生时，被绑定的数据被更新，`function(d)` 中的 d 也都更新了。</code></pre>
<p>增加样式：</p>
<p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.node</span> &#123;</span></span><br><span class="line"><span class="css">        stroke: <span class="number">#222</span>;</span></span><br><span class="line"><span class="css">        stroke-<span class="attribute">width</span>: <span class="number">1.5px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.link</span> &#123;</span></span><br><span class="line"><span class="css">        stroke: <span class="number">#707071</span>;</span></span><br><span class="line"><span class="css">        stroke-<span class="attribute">opacity</span>: .<span class="number">6</span>;</span></span><br><span class="line"><span class="css">        stroke-<span class="attribute">width</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.node</span><span class="selector-class">.Website</span> &#123;</span></span><br><span class="line"><span class="css">        fill: <span class="number">#ff756e</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.node</span><span class="selector-class">.Sort</span> &#123;</span></span><br><span class="line"><span class="css">        fill: <span class="number">#de9bf9</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.nodeText</span> &#123;</span></span><br><span class="line"><span class="css">        fill: <span class="number">#ffffff</span></span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure>
<img src="https://lh3.googleusercontent.com/-A6JxI-hyuww/WPCrNFzHKfI/AAAAAAAAANM/g8eygh02iYo/I/%25255BUNSET%25255D.png" alt="效果"><figcaption>效果</figcaption>
</figure></li>
</ul>
<h3 id="绘制箭头和添加文字">绘制箭头和添加文字</h3>
<ul>
<li><p>绘制箭头需要用到 SVG 中的标记（marker）。标记 <marker> 写在 <defs></defs> 中，defs 用于定义可重复利用的元素。定义箭头代码如下：</marker></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> defs = svg.append(<span class="string">&quot;defs&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> arrowMarker = defs.append(<span class="string">&quot;marker&quot;</span>)</span><br><span class="line">  .attr(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;arrow&quot;</span>)</span><br><span class="line">  .attr(<span class="string">&quot;markerUnits&quot;</span>, <span class="string">&quot;strokeWidth&quot;</span>)</span><br><span class="line">  .attr(<span class="string">&quot;markerWidth&quot;</span>, <span class="string">&quot;10&quot;</span>)</span><br><span class="line">  .attr(<span class="string">&quot;markerHeight&quot;</span>, <span class="string">&quot;10&quot;</span>)</span><br><span class="line">  .attr(<span class="string">&quot;viewBox&quot;</span>, <span class="string">&quot;-0 -5 10 10&quot;</span>)</span><br><span class="line">  .attr(<span class="string">&quot;refX&quot;</span>, <span class="string">&quot;35&quot;</span>)</span><br><span class="line">  .attr(<span class="string">&quot;refY&quot;</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">  .attr(<span class="string">&quot;orient&quot;</span>, <span class="string">&quot;auto&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arrow_path = <span class="string">&#x27;M 0,-5 L 10 ,0 L 0,5 L5,0 L0,-5&#x27;</span>;</span><br><span class="line"></span><br><span class="line">arrowMarker.append(<span class="string">&quot;path&quot;</span>)</span><br><span class="line">  .attr(<span class="string">&quot;d&quot;</span>, arrow_path)</span><br><span class="line">  .attr(<span class="string">&quot;fill&quot;</span>, <span class="string">&quot;#a6a6a6&quot;</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>refX, refY</code> 指的是图形元素和 <code>marker</code> 连接的位置坐标，这里圆的半径设置为 25，箭头的顶点到底部垂直距离为 10，所以设置为（35，0）则箭头的顶端刚好在圆上。</li>
<li><code>markerUnits</code> 标记大小的基准，有两个值，即 strokeWidth（线的宽度）和 userSpaceOnUse（线前端的大小）。</li>
<li><code>markerWidth，markerHeight</code> 标识的大小。</li>
<li><code>orient</code> 绘制方向，可设定为 auto（自动确认方向和角度值）。</li>
<li><code>id</code> 标识的 id 号。</li>
<li>粉红色框是 viewBox 范围，黑色为 arrow_path 的轨迹： <img src="http://i.imgur.com/eqY9I4G.png" alt="arro"></li>
<li><code>link.attr('marker-end', 'url(#arrow)');</code>可以为连接线添加箭头。</li>
</ul></li>
<li><p>为连接线增加文字，首先需要定义 &lt;path&gt; 确定文字放在连接线路径上，再定义 &lt;text&gt;，之后在 &lt;text&gt; 添加 &lt;textPath&gt; 引用路径，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义文字路径</span></span><br><span class="line"><span class="keyword">var</span> linkpaths = svg.selectAll(<span class="string">&quot;.linkpath&quot;</span>)</span><br><span class="line">            .data(links_data);</span><br><span class="line">linkpaths.enter()</span><br><span class="line">            .append(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">            .attr(<span class="string">&#x27;d&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;M &#x27;</span> + d.source.x + <span class="string">&#x27; &#x27;</span> + d.source.y + <span class="string">&#x27; L &#x27;</span> + d.target.x + <span class="string">&#x27; &#x27;</span> + d.target.y</span><br><span class="line">            &#125;)</span><br><span class="line">            .attr(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;linkpath&#x27;</span>)</span><br><span class="line">            .attr(<span class="string">&#x27;fill-opacity&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">            .attr(<span class="string">&#x27;stroke-opacity&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">            .attr(<span class="string">&#x27;fill&#x27;</span>, <span class="string">&#x27;#ffffff&#x27;</span>)</span><br><span class="line">            .attr(<span class="string">&#x27;stroke&#x27;</span>, <span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">            .attr(<span class="string">&#x27;id&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;linkpath&#x27;</span> + i;</span><br><span class="line">            &#125;)</span><br><span class="line">            .style(<span class="string">&quot;pointer-events&quot;</span>, <span class="string">&quot;none&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义 &lt;text&gt;            </span></span><br><span class="line"><span class="keyword">var</span> linklabels = svg.selectAll(<span class="string">&quot;.linklabel&quot;</span>)</span><br><span class="line">        .data(links_data);</span><br><span class="line">linklabels.enter()</span><br><span class="line">        .append(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">        .style(<span class="string">&quot;pointer-events&quot;</span>, <span class="string">&quot;none&quot;</span>)</span><br><span class="line">        .attr(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;linklabel&#x27;</span>)</span><br><span class="line">        .attr(<span class="string">&#x27;id&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;linklabel&#x27;</span> + i;</span><br><span class="line">        &#125;)</span><br><span class="line">        .attr(<span class="string">&#x27;dx&#x27;</span>, <span class="number">50</span>)</span><br><span class="line">        .attr(<span class="string">&#x27;dy&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">        .attr(<span class="string">&#x27;font-size&#x27;</span>, <span class="number">5</span>)</span><br><span class="line">        .attr(<span class="string">&#x27;fill&#x27;</span>, <span class="string">&#x27;#aaa&#x27;</span>);</span><br><span class="line"><span class="comment">//增加 &lt;textPath&gt; 引用 path</span></span><br><span class="line">linklabels.append(<span class="string">&#x27;textPath&#x27;</span>)</span><br><span class="line">        .attr(<span class="string">&#x27;xlink:href&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;#linkpath&#x27;</span> + i</span><br><span class="line">        &#125;)</span><br><span class="line">        .style(<span class="string">&quot;pointer-events&quot;</span>, <span class="string">&quot;none&quot;</span>)</span><br><span class="line">        .text(<span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;BELONG&#x27;</span>;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>pointer-events</code> 设置为 none 则不在接收鼠标事件，设置为 all 则在指针在元素中或边缘时接收鼠标事件。</li>
<li>上述代码只是确保了初始时文字在连接线路径上，所以还需要设置对上述元素的坐标更新。在 <code>force.on()</code> 中增加如下代码：</li>
</ul>
<p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">linkpaths.attr(<span class="string">&#x27;d&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> path = <span class="string">&#x27;M &#x27;</span> + d.source.x + <span class="string">&#x27; &#x27;</span> + d.source.y + <span class="string">&#x27; L &#x27;</span> + d.target.x + <span class="string">&#x27; &#x27;</span> + d.target.y;</span><br><span class="line">    <span class="keyword">return</span> path</span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line">linklabels.attr(<span class="string">&#x27;transform&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (d.target.x &lt; d.source.x) &#123;</span><br><span class="line">        bbox = <span class="built_in">this</span>.getBBox();</span><br><span class="line">        <span class="comment">//确保文字不会倒置</span></span><br><span class="line">        rx = bbox.x + bbox.width / <span class="number">2</span>;</span><br><span class="line">        ry = bbox.y + bbox.height / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;rotate(180 &#x27;</span> + rx + <span class="string">&#x27; &#x27;</span> + ry + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;rotate(0)&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure> ### 缩放和拖动 要同时支持鼠标缩放以及拖动，必须处理这两者的事件冲突，代码如下：</p></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> zoom = d3.behavior.zoom()</span><br><span class="line">        .scaleExtent([<span class="number">1</span>, <span class="number">10</span>])</span><br><span class="line">        .on(<span class="string">&quot;zoom&quot;</span>, <span class="function"><span class="keyword">function</span> <span class="title">zoomed</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            d3.select(<span class="built_in">this</span>).attr(<span class="string">&quot;transform&quot;</span>,</span><br><span class="line">                <span class="string">&quot;translate(&quot;</span> + d3.event.translate + <span class="string">&quot;)scale(&quot;</span> + d3.event.scale + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">svg.call(d3.behavior.zoom().on(<span class="string">&quot;zoom&quot;</span>, redraw))</span><br><span class="line">        .append(<span class="string">&#x27;g&#x27;</span>);</span><br><span class="line">force.drag()</span><br><span class="line">        .on(<span class="string">&quot;dragstart&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//在拖动节点的时候阻止事件冒泡</span></span><br><span class="line">            d3.event.sourceEvent.stopPropagation();</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">// 缩放之后重绘</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">redraw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   svg.attr(<span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate(&quot;</span> + d3.event.translate + <span class="string">&quot;)&quot;</span> + <span class="string">&quot; scale(&quot;</span> + d3.event.scale + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dragstart</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">   d3.select(<span class="built_in">this</span>).classed(<span class="string">&quot;fixed&quot;</span>, d.fixed = <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>g 元素</code> 是用来分组用的，它能把多个元素放在一组里，对 <g> 标记实施的样式和渲染会作用到这个分组内的所有元素上。组内的所有元素都会继承 <g> 标记上的所有属性。</g></g></li>
<li><code>fixed</code> 设置为 true 时，顶点固定不动。</li>
</ul>
<h3 id="更新数据">更新数据</h3>
<p>有时候需要更新数据，更新后力导向图也会跟着变化。由于上述的选择集通过 <code>data()</code> 将数据与元素进行绑定，而绑定的情况分为以下三种： * update：数组长度 = 元素数量 * enter：数组长度 &gt; 元素数量 * exit：数组长度 &lt; 元素数量 所以在更新数据的时候需要分别对这三种情况进行处理，对于 enter 这种没有足够的元素的处理办法是添加元素，对于 exit 这种存在多余元素的处理办法是删除元素，而对于 update 则是进行内容修改。 以节点的更新数据为例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> node = svg.selectAll(<span class="string">&quot;.node&quot;</span>)</span><br><span class="line">    .data(nodes_data);</span><br><span class="line"><span class="comment">//节点数据内容修改</span></span><br><span class="line">node.attr(<span class="string">&quot;class&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;node &quot;</span> + d.label</span><br><span class="line">&#125;)</span><br><span class="line">    .on(<span class="string">&quot;dblclick&quot;</span>, dblclick)</span><br><span class="line">    .attr(<span class="string">&quot;r&quot;</span>, <span class="number">25</span>)</span><br><span class="line">    .call(force.drag)</span><br><span class="line">    .on(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">        keys = d3.keys(d);</span><br><span class="line">        delete_key = [<span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;index&quot;</span>, <span class="string">&quot;weight&quot;</span>, <span class="string">&quot;px&quot;</span>, <span class="string">&quot;py&quot;</span>, <span class="string">&quot;fixed&quot;</span>];</span><br><span class="line">        info = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; delete_key.length; i++) &#123;</span><br><span class="line">            keys.removeByValue(delete_key[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; keys.length; j++) &#123;</span><br><span class="line">            info.push(d[keys[j]])</span><br><span class="line">        &#125;</span><br><span class="line">        showinfo(d.label, keys, info);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">//增加不足的元素</span></span><br><span class="line">node.enter()</span><br><span class="line">    .append(<span class="string">&quot;circle&quot;</span>)</span><br><span class="line">    .attr(<span class="string">&quot;class&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;node &quot;</span> + d.label</span><br><span class="line">    &#125;)</span><br><span class="line">    .on(<span class="string">&quot;dblclick&quot;</span>, dblclick)</span><br><span class="line">    .attr(<span class="string">&quot;r&quot;</span>, <span class="number">25</span>)</span><br><span class="line">    .call(force.drag)</span><br><span class="line">    .on(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">        keys = d3.keys(d);</span><br><span class="line">        delete_key = [<span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;index&quot;</span>, <span class="string">&quot;weight&quot;</span>, <span class="string">&quot;px&quot;</span>, <span class="string">&quot;py&quot;</span>, <span class="string">&quot;fixed&quot;</span>];</span><br><span class="line">        info = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; delete_key.length; i++) &#123;</span><br><span class="line">            keys.removeByValue(delete_key[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; keys.length; j++) &#123;</span><br><span class="line">            info.push(d[keys[j]])</span><br><span class="line">        &#125;</span><br><span class="line">        showinfo(d.label, keys, info);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">//删除多余元素</span></span><br><span class="line">node.exit().remove();</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="参考资料">参考资料</h2>
<p><span class="exturl" data-url="aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHpobHp6L2FydGljbGUvZGV0YWlscy8zNjg2OTU2Nw==">理解 update, enter, exit 的使用<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>d3.js</tag>
      </tags>
  </entry>
  <entry>
    <title>d3.js 绘制柱形图</title>
    <url>/posts/4321ef0c.html</url>
    <content><![CDATA[<p>在<a href="/posts/42f7685.html" title="d3.js 绘制力导向图">d3.js 绘制力导向图</a>中已经说明了如何绘制力导向图以及数据更新。本次将说明如何绘制带坐标轴的柱形图。<span id="more"></span></p>
<h2 id="确定初始数据">确定初始数据</h2>
<p>初始数据如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nodes = [&#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;lslamic&#x27;</span>&#125;, &#123;</span><br><span class="line">        <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;GOODS&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;VINTAGE OLD HAND MADE BEAUTY SILVER BROOCH PIN RED ENAMEL LEAF SIAM STERLING&#x27;</span></span><br><span class="line">    &#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Website&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;ebay&#x27;</span>&#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Antiques&#x27;</span>&#125;, &#123;</span><br><span class="line">        <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Baby&#x27;</span></span><br><span class="line">    &#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Books&#x27;</span>&#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Business &amp; Industrial&#x27;</span>&#125;, &#123;</span><br><span class="line">        <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Cameras &amp; Photo&#x27;</span></span><br><span class="line">    &#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Cell Phones &amp; Accessories&#x27;</span>&#125;, &#123;</span><br><span class="line">        <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Clothing, Shoes &amp; Accessories&#x27;</span></span><br><span class="line">    &#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Coins &amp; Paper Money&#x27;</span>&#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Collectibles&#x27;</span>&#125;, &#123;</span><br><span class="line">        <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Computers Tablets &amp; Networking&#x27;</span></span><br><span class="line">    &#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Consumer Electronics&#x27;</span>&#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Crafts&#x27;</span>&#125;, &#123;</span><br><span class="line">        <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;eBay Motors&#x27;</span></span><br><span class="line">    &#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Everything Else&#x27;</span>&#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Health &amp; Beauty&#x27;</span>&#125;, &#123;</span><br><span class="line">        <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Home &amp; Garden&#x27;</span></span><br><span class="line">    &#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Jewelry &amp; Watches&#x27;</span>&#125;, &#123;</span><br><span class="line">        <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Musical Instruments &amp; Gear&#x27;</span></span><br><span class="line">    &#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Sporting Goods&#x27;</span>&#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Antiquities&#x27;</span>&#125;, &#123;</span><br><span class="line">        <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Architectural &amp; Garden&#x27;</span></span><br><span class="line">    &#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Asian Antiques&#x27;</span>&#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Decorative Arts&#x27;</span>&#125;, &#123;</span><br><span class="line">        <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Linens &amp; Textiles (Pre-1930)&#x27;</span></span><br><span class="line">    &#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Maritime&#x27;</span>&#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Periods &amp; Styles&#x27;</span>&#125;, &#123;</span><br><span class="line">        <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Primitives&#x27;</span></span><br><span class="line">    &#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Science &amp; Medicine (Pre-1930)&#x27;</span>&#125;, &#123;<span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;Sort&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Silver&#x27;</span>&#125;];</span><br></pre></td></tr></table></figure>
<p>初始数据中每个数据具有不同的类别，本次的目的是统计不同类别的数据出现次数并进行绘制，数据处理代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dataset = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> node = nodes[i];</span><br><span class="line">  dataset[node[<span class="string">&#x27;label&#x27;</span>]] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; nodes.length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nodes[j][<span class="string">&#x27;label&#x27;</span>] == node[<span class="string">&#x27;label&#x27;</span>])</span><br><span class="line">          dataset[node[<span class="string">&#x27;label&#x27;</span>]] += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line"><span class="keyword">var</span> labels = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> dataset) &#123;</span><br><span class="line">  data.push(dataset[key]);</span><br><span class="line">  labels.push(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>dataset</code> 用于将数据进行分类统计。</li>
<li><code>data</code> 保存每个分类出现次数。</li>
<li><code>labels</code> 保存分类名称，作为 x 轴的刻度。</li>
</ul>
<h2 id="创建-svg">创建 SVG</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> width = <span class="number">420</span>, height = <span class="number">420</span>;</span><br><span class="line"><span class="keyword">var</span> svg = d3.select(<span class="string">&quot;#graph&quot;</span>).append(<span class="string">&quot;svg&quot;</span>)</span><br><span class="line">        .attr(<span class="string">&quot;width&quot;</span>, width)</span><br><span class="line">        .attr(<span class="string">&quot;height&quot;</span>, height);</span><br></pre></td></tr></table></figure>
<h2 id="绘制坐标轴">绘制坐标轴</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> padding = &#123;<span class="attr">top</span>: <span class="number">20</span>, <span class="attr">right</span>: <span class="number">20</span>, <span class="attr">bottom</span>: <span class="number">20</span>, <span class="attr">left</span>: <span class="number">30</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> xAxisWidth = width - <span class="number">2</span> * padding.left;</span><br><span class="line"><span class="keyword">var</span> yAxiWidth = height - <span class="number">2</span> * padding.bottom;</span><br><span class="line"><span class="keyword">var</span> xAxisScale = d3.scale.ordinal()</span><br><span class="line">            .domain(d3.range(labels.length))</span><br><span class="line">            .rangeRoundBands([<span class="number">0</span>, xAxisWidth]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> yAxisScale = d3.scale.linear()</span><br><span class="line">    .domain([<span class="number">0</span>, d3.max(data)])</span><br><span class="line">    .range([yAxiWidth, <span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xAxis = d3.svg.axis()</span><br><span class="line">    .scale(xAxisScale)</span><br><span class="line">    .orient(<span class="string">&quot;bottom&quot;</span>)</span><br><span class="line">    .tickFormat(<span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> labels[d];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> yAxis = d3.svg.axis()</span><br><span class="line">    .scale(yAxisScale)</span><br><span class="line">    .orient(<span class="string">&quot;left&quot;</span>);</span><br><span class="line"></span><br><span class="line">svg.append(<span class="string">&quot;g&quot;</span>)</span><br><span class="line">    .attr(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;axis&quot;</span>)</span><br><span class="line">    .attr(<span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate(&quot;</span> + padding.left + <span class="string">&quot;,&quot;</span> +</span><br><span class="line">        (height - padding.bottom) + <span class="string">&quot;)&quot;</span>)</span><br><span class="line">    .call(xAxis);</span><br><span class="line"></span><br><span class="line">svg.append(<span class="string">&quot;g&quot;</span>)</span><br><span class="line">    .attr(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;axis&quot;</span>)</span><br><span class="line">    .attr(<span class="string">&quot;transform&quot;</span>, <span class="string">&quot;translate(&quot;</span> + padding.left + <span class="string">&quot;,&quot;</span> +</span><br><span class="line">        (height - yAxiWidth - padding.bottom) + <span class="string">&quot;)&quot;</span>)</span><br><span class="line">    .call(yAxis);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>xAxisWidth，yAxiWidth</code> 代表 x 轴和 y 轴的长度。</li>
<li><code>padding</code> x 轴和 y 轴的外边距。</li>
<li><code>xAxisScale，yAxisScale</code> x 轴和 y 轴的比例尺。</li>
<li><code>ordinal().domain()</code> 设定或获取定义域。</li>
<li><code>ordinal.rangeRoundBands(interval[, padding[, outerPadding]])</code> 接收一个连续的区间，然后根据定义域中离散值的数量将其分段，分段结果会取整。</li>
<li><code>tickFormat()</code> 用于设定文字格式的刻度。</li>
</ul>
<p>这样添加之后的坐标轴，样式会比较丑，所以还需要给坐标轴增加如下样式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-class">.axis</span> path,</span><br><span class="line">    <span class="selector-class">.axis</span> line &#123;</span><br><span class="line">        fill: none;</span><br><span class="line">        stroke: black;</span><br><span class="line">        shape-rendering: crispEdges;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.axis</span> text &#123;</span><br><span class="line">        <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">11px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h2 id="绘制矩形">绘制矩形</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//0.05 用于设置矩形之间的间隔，由于 rangeRoundBands 选取的范围远小于 xAxisWidth，所以矩形之间的间隔远大于 0.05，该参数未起作用。</span></span><br><span class="line"><span class="keyword">var</span> xScale = d3.scale.ordinal()</span><br><span class="line">            .domain(d3.range(labels.length))</span><br><span class="line">            .rangeRoundBands([<span class="number">0</span>, <span class="number">100</span>], <span class="number">0.05</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> yScale = d3.scale.linear()</span><br><span class="line">    .domain([<span class="number">0</span>, d3.max(data)])</span><br><span class="line">    .range([<span class="number">0</span>, yAxiWidth]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rect = svg.selectAll(<span class="string">&quot;rect&quot;</span>)</span><br><span class="line">    .data(data);</span><br><span class="line"></span><br><span class="line">rect.enter()</span><br><span class="line">    .append(<span class="string">&quot;rect&quot;</span>)</span><br><span class="line">    .attr(<span class="string">&quot;x&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</span><br><span class="line">        x = xAxisWidth / (<span class="number">2</span> * labels.length) * (<span class="number">2</span> * i + <span class="number">1</span>)</span><br><span class="line">            - xScale.rangeBand() / <span class="number">2</span> + padding.left;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;)</span><br><span class="line">    .attr(<span class="string">&quot;y&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> height - padding.bottom - yScale(d);</span><br><span class="line">    &#125;)</span><br><span class="line">    .attr(<span class="string">&quot;width&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> xScale.rangeBand();</span><br><span class="line">    &#125;)</span><br><span class="line">    .attr(<span class="string">&quot;height&quot;</span>, yScale)</span><br><span class="line">    .attr(<span class="string">&quot;fill&quot;</span>, <span class="string">&quot;steelblue&quot;</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>xScale</code> 用于控制矩形宽度， <code>yScale</code> 用于控制矩形高度。这样做可以使得矩形的宽度和高度自由伸缩。</li>
</ul>
<h2 id="给矩形增加文字描述">给矩形增加文字描述</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> text = svg.selectAll(<span class="string">&quot;text&quot;</span>)</span><br><span class="line">            .data(data);</span><br><span class="line">text.enter().append(<span class="string">&quot;text&quot;</span>)</span><br><span class="line">            .attr(<span class="string">&quot;x&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</span><br><span class="line">                x = xAxisWidth / (<span class="number">2</span> * labels.length) * (<span class="number">2</span> * i + <span class="number">1</span>)</span><br><span class="line">                    - xScale.rangeBand() / <span class="number">2</span> + padding.left;</span><br><span class="line">                <span class="keyword">return</span> x;</span><br><span class="line">            &#125;)</span><br><span class="line">            .attr(<span class="string">&quot;y&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> height - padding.bottom - yScale(d);</span><br><span class="line">            &#125;)</span><br><span class="line">            .attr(<span class="string">&quot;dx&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> xScale.rangeBand() / <span class="number">4</span>;</span><br><span class="line">            &#125;)</span><br><span class="line">            .attr(<span class="string">&quot;dy&quot;</span>, -<span class="number">2</span>)</span><br><span class="line">            .attr(<span class="string">&quot;text-anchor&quot;</span>, <span class="string">&quot;begin&quot;</span>)</span><br><span class="line">            .attr(<span class="string">&quot;font-size&quot;</span>, <span class="number">14</span>)</span><br><span class="line">            .attr(<span class="string">&quot;fill&quot;</span>, <span class="string">&quot;#000000&quot;</span>)</span><br><span class="line">            .text(<span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> d;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>text</code> 元素的坐标是矩形的坐标，<code>dx，dy</code> 设定了方向上的偏移量。所以最终文字位于矩形正上方。</li>
</ul>
<h2 id="柱形图动画">柱形图动画</h2>
<p>给柱形图增加动画，需要将代码修改为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rect = svg.selectAll(<span class="string">&quot;rect&quot;</span>)</span><br><span class="line">    .data(data);</span><br><span class="line">rect.enter()</span><br><span class="line">    .append(<span class="string">&quot;rect&quot;</span>)</span><br><span class="line">    .attr(<span class="string">&quot;y&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> height - padding.bottom;</span><br><span class="line">    &#125;)</span><br><span class="line">    .attr(<span class="string">&quot;height&quot;</span>, <span class="number">0</span>)</span><br><span class="line">    .attr(<span class="string">&quot;fill&quot;</span>, <span class="string">&quot;red&quot;</span>)</span><br><span class="line">    .transition()</span><br><span class="line">    .duration(<span class="number">3000</span>)</span><br><span class="line">    .ease(<span class="string">&quot;bounce&quot;</span>)</span><br><span class="line">    .delay(<span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">200</span> * i;</span><br><span class="line">    &#125;)</span><br><span class="line">    .attr(<span class="string">&quot;x&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</span><br><span class="line">        x = xAxisWidth / (<span class="number">2</span> * labels.length) * (<span class="number">2</span> * i + <span class="number">1</span>)</span><br><span class="line">            - xScale.rangeBand() / <span class="number">2</span> + padding.left;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;)</span><br><span class="line">    .attr(<span class="string">&quot;y&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> height - padding.bottom - yScale(d);</span><br><span class="line">    &#125;)</span><br><span class="line">    .attr(<span class="string">&quot;width&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> xScale.rangeBand();</span><br><span class="line">    &#125;)</span><br><span class="line">    .attr(<span class="string">&quot;height&quot;</span>, yScale)</span><br><span class="line">    .attr(<span class="string">&quot;fill&quot;</span>, <span class="string">&quot;steelblue&quot;</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>上述代码设置了两个 <code>fill</code> 属性，在添加了 <code>transition()</code> 之后，D3 会自动对颜色之间的值进行线性插值，最终在动画中会看到平滑的颜色变化。</li>
<li><code>duration()</code> 动画持续时间。</li>
<li><code>ease()</code> 指定转变方式，常用的转变方式有：
<ul>
<li>linear 普通的线性变化。</li>
<li>circle 慢慢地到达变换的最终状态。<br>
</li>
<li>elastic 带有弹跳的到达最终状态。</li>
<li>bounce 在最终状态处弹跳几次。</li>
</ul></li>
<li><code>delay()</code> 指定延时。</li>
</ul>
<h4 id="最终效果">最终效果</h4>
<p><img src="http://i.imgur.com/4WazYv3.png" alt="柱形图效果"> <img src="http://i.imgur.com/7fT9upS.png" alt="坐标轴"></p>
<hr>
<h4 id="参考资料">参考资料</h4>
<p><span class="exturl" data-url="aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHpobHp6L2FydGljbGUvZGV0YWlscy8zNTk4NTkwNw==">如何让图表动起来<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2QzL2QzLTMueC1hcGktcmVmZXJlbmNlL2Jsb2IvbWFzdGVyL09yZGluYWwtU2NhbGVzLm1k">d3-3.x-api-reference<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>d3.js</tag>
      </tags>
  </entry>
  <entry>
    <title>getWidth() 方法和 getMeasureWidth() 方法的区别</title>
    <url>/posts/95325561.html</url>
    <content><![CDATA[<p>首先 getMeasureWidth() 方法在 measure() 过程结束后就可以获取到了，而 getWidth() 方法要在 layout() 过程结束后才能获取到。另外 getMeasureWidth() 方法中的值是通过 setMeasuredDimension() 方法来进行设置的，而 getWidth() 方法中的值则是通过视图右边的坐标减去左边的坐标计算出来的。<span id="more"></span></p>
<p>观察 SimpleLayout 中 onLayout() 方法的代码，这里给子视图的 layout() 方法传入的四个参数分别是 0，0，childView.getMeasuredWidth() 和 childView.getMeasuredHeight() ，因此 getWidth() 方法得到的值就是 childView.getMeasuredWidth() - 0 = childView.getMeasuredWidth()，所以此时 getWidth() 方法和 getMeasuredWidth() 得到的值就是相同的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;  </span><br><span class="line">   <span class="keyword">if</span> (getChildCount() &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">       View childView = getChildAt(<span class="number">0</span>);  </span><br><span class="line">       childView.layout(<span class="number">0</span>, <span class="number">0</span>, childView.getMeasuredWidth(), childView.getMeasuredHeight());  </span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但如果你将 onLayout() 方法中的代码进行如下修改：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (getChildCount() &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">        View childView = getChildAt(<span class="number">0</span>);  </span><br><span class="line">        childView.layout(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">200</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>这样 getWidth() 方法得到的值就是 200 - 0 = 200，不会再和 getMeasuredWidth() 的值相同了。当然这种做法充分不尊重 measure() 过程计算出的结果，通常情况下是不推荐这么写的。 getHeight() 与 getMeasureHeight() 方法之间的关系同上，就不再重复分析了。</p>
<hr>
<h4 id="参考资料">参考资料</h4>
<p><span class="exturl" data-url="aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VvbGluX2Jsb2cvYXJ0aWNsZS9kZXRhaWxzLzE2MzMwMjY3">Android视图绘制流程完全解析，带你一步步深入了解View(二)<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Android View</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 requests 获取 Discuz 论坛验证码</title>
    <url>/posts/b2073700.html</url>
    <content><![CDATA[<h2 id="requests-库的安装">requests 库的安装</h2>
<p>Mac 下使用 Pycharm 时只需按住快捷键 <code>Command + ,</code> 选择 Project→Project Interpreter 点击 + 号后搜索 requests 进行安装即可：<span id="more"></span> <img src="https://raw.githubusercontent.com/ikroal/blog-images/master/request-install.png"></p>
<h3 id="获取过程使用的方法">获取过程使用的方法</h3>
<ul>
<li><code>requests.get(url, params=None, **kwargs)</code><br> <code>url</code> 是请求的链接，<code>params</code> 是发送请求时参数，<code>kwargs</code> 是可选参数。</li>
</ul>
<h3 id="获取过程">获取过程</h3>
<p>为了保持连接的持久性不能直接使用 requests 发送请求，而需要利用 Session 对象。具体获取代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">session = requests.session()</span><br><span class="line">ss = session.get(<span class="string">&quot;http://www.zhuixinfan.com/member.php?mod=register&quot;</span>)</span><br><span class="line">result = ss.text</span><br><span class="line"><span class="comment">#获取参数</span></span><br><span class="line">params = re.findall(<span class="string">&quot;&lt;input.*(?:name=\&quot;formhash\&quot;|name=\&quot;sechash\&quot;).*\&gt;&quot;</span>, result)</span><br><span class="line">params = <span class="built_in">list</span>(<span class="built_in">set</span>(params))</span><br><span class="line">sechash = re.sub(<span class="string">&quot;.*value=\&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, params[<span class="number">1</span>])</span><br><span class="line">sechash = re.sub(<span class="string">&quot;\&quot;.*&quot;</span>, <span class="string">&quot;&quot;</span>, sechash)</span><br><span class="line"><span class="comment">#更新验证码</span></span><br><span class="line">actually_url = <span class="string">&quot;http://www.zhuixinfan.com/misc.php?mod=seccode&amp;action=update&amp;idhash=&quot;</span> + sechash</span><br><span class="line">htm = session.get(actually_url)</span><br><span class="line"><span class="comment">#获取图片链接</span></span><br><span class="line">update_url = re.findall(<span class="string">r&quot;\bsrc=\S*&quot;</span>, htm.text)</span><br><span class="line">update = re.sub(<span class="string">&quot;src=\&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, update_url[<span class="number">0</span>])</span><br><span class="line">update = re.sub(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, update)</span><br><span class="line"><span class="comment">#下载图片</span></span><br><span class="line">headers = &#123;</span><br><span class="line">            <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;www.zhuixinfan.com&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.95 Safari/537.36&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;http://www.zhuixinfan.com/member.php?mod=register&#x27;</span></span><br><span class="line">           &#125;</span><br><span class="line">url = <span class="string">&quot;http://www.zhuixinfan.com/&quot;</span> + update</span><br><span class="line">result = session.get(url, headers=headers)</span><br><span class="line">im = Image.<span class="built_in">open</span>(BytesIO(result.content))</span><br><span class="line">im.show()</span><br></pre></td></tr></table></figure>
<p>获取过程中首先向站点发送请求，从返回的网页信息中利用正则表达式获取 <code>sechash</code> 参数，之后利用所得到的 <code>sechash</code> 向站点发送更新验证码的请求并从返回的信息中获取验证码图片的 url，最后从站点下载图片利用 <code>Image.open()</code> 显示图片。</p>
<hr>
<h2 id="参考资料">参考资料</h2>
<p><span class="exturl" data-url="aHR0cDovL2RvY3MucHl0aG9uLXJlcXVlc3RzLm9yZy96aF9DTi9sYXRlc3QvaW5kZXguaHRtbA==">Requests: 让 HTTP 服务人类<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Python Library</tag>
      </tags>
  </entry>
  <entry>
    <title>使用视图显示图片和菜单</title>
    <url>/posts/4ebfc566.html</url>
    <content><![CDATA[<h4 id="显示图片的视图控件">显示图片的视图控件</h4>
<ul>
<li><p>GridView 添加方式：<span id="more"></span> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">GridView</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:id</span>=<span class="string">&quot;@+id/gridview&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:numColumns</span>=<span class="string">&quot;auto_fit&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:verticalSpacing</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:horizontalSpacing</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:columnWidth</span>=<span class="string">&quot;90dp&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:stretchMode</span>=<span class="string">&quot;columnWidth&quot;</span>/&gt;</span>//缩放与列宽同步</span><br></pre></td></tr></table></figure> 其中 <code>verticalSpacing</code> 表示 grid 元素之间的竖直距离，<code>horizontalSpacing</code> 表示 grid 元素之间的水平距离。 常用方法:</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">gridView.setAdapter(<span class="keyword">new</span> ImageAdapter(<span class="keyword">this</span>));</span><br><span class="line">gridView.setOnItemClickListener(<span class="keyword">new</span> AdapterView.OnItemClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; parent, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(getBaseContext(), <span class="string">&quot;pic&quot;</span> + (position + <span class="number">1</span>) + <span class="string">&quot;selected&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>显示效果：</p></li>
</ul>
<p><img src="http://i.imgur.com/LDQw3gn.png"></p>
<hr>
<h4 id="菜单和视图一起显示">菜单和视图一起显示</h4>
<p>常用方法：</p>
<ul>
<li><p><code>CreateMenu(Menu menu)</code> 创建菜单项</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CreateMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">  MenuItem mnu1 = menu.add(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;Item 1&quot;</span>);</span><br><span class="line">  &#123;</span><br><span class="line">      mnu1.setAlphabeticShortcut(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  MenuItem mnu2 = menu.add(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;Item 2&quot;</span>);</span><br><span class="line">  &#123;</span><br><span class="line">      mnu2.setAlphabeticShortcut(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <code>add()</code> 方法中4个参数：</p>
<ol type="1">
<li>groupId 菜单项所在的组的标识符，0 表示不在一个组中。</li>
<li>itemId 唯一的菜单项ID</li>
<li>order 菜单项显示的顺序</li>
<li>title 菜单项显示的文本</li>
</ol></li>
<li><p><code>MenuChoice(MenuItem item)</code> 用于判断菜单项是否被选中</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">MenuChoice</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (item.getItemId()) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">          Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;You clicked on Item1&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">          Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;You clicked on Item2&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;=</span><br></pre></td></tr></table></figure></p></li>
<li><p><code>onCreateOptionsMenu()</code> 当 MENU 按钮按下时调用</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span> <span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>.onCreateOptionsMenu(menu);</span><br><span class="line">  CreateMenu(menu);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p><code>onOptionsItemSelected()</code> 选择菜单时调用</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span> <span class="params">(MenuItem item)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> MenuChoice(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p><code>setOnCreateContextMenuListener</code> 设置上下文菜单 通过设置 <code>setOnCreateContextMenuListener</code> 方法，然后实现 <code>onCreateContextMenu</code> 方法即可。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreateContextMenu</span><span class="params">(ContextMenu menu,</span></span></span><br><span class="line"><span class="params"><span class="function">	View view, ContextMenuInfo menuInfo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreateContextMenu(menu, view, menuInfo);</span><br><span class="line">    CreateMenu(menu);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure> 　　实现效果如图： <img src="http://i.imgur.com/SzABy68.png"></p></li>
</ul>
<hr>
<h4 id="webview">WebView</h4>
<ul>
<li><p>添加 WebView</p>
<p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">WebView</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:id</span>=<span class="string">&quot;@+id/webview&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>避免启动设备的 Web 浏览器 实现 WebViewClient 类重写 <code>shouldOverrideUrlLoading</code></p>
<h2 id="section"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">webView.setWebViewClient(<span class="keyword">new</span> CallBack());</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallBack</span> <span class="keyword">extends</span> <span class="title">WebViewClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></h2></li>
</ul>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Android View</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式和 CSS 选择器以及 XPath</title>
    <url>/posts/82fe54f5.html</url>
    <content><![CDATA[<h2 id="正则表达式">正则表达式</h2>
<p>正则表达式主要用于字符串匹配，使用正则表达式之前需要了解各个符号的含义，这里推荐 <span class="exturl" data-url="aHR0cDovL3d3dy5ydW5vb2IuY29tL3JlZ2V4cC9yZWdleHAtc3ludGF4Lmh0bWw=">菜鸟教程<i class="fa fa-external-link-alt"></i></span>，在了解语法之后我们可以通过 <span class="exturl" data-url="aHR0cHM6Ly9yZWdleDEwMS5jb20v">regex101<i class="fa fa-external-link-alt"></i></span> 进行正则表达式的测试。<span id="more"></span></p>
<h2 id="css-选择器">CSS 选择器</h2>
<p>CSS 选择器用于筛选 HTML 文档中的元素，可以通过元素的标签及元素的属性进行筛选，这里介绍使用过的一些小例子：</p>
<ol type="1">
<li><code>span[class=KnowledgeNetcont] &gt; a::text</code><br> 筛选出 <code>class</code> 属性为 KnowledgeNetcont 的 <code>span</code> 标签下的 <code>a</code> 标签的文本内容。</li>
<li><code>a[href*=image]::attr(href)</code><br> 筛选出 <code>a</code> 标签的 <code>href</code> 属性值包含 image 的属性值。</li>
</ol>
<h2 id="xpath">XPath</h2>
<p>XPath 也用于筛选 HTML 文档中的元素，主要基于文档的结构进行筛选，这里依旧介绍使用过的一些小例子：</p>
<ol type="1">
<li><code>xpath(&quot;.//a[@target='kcmstarget']&quot;).xpath('string(.)')</code><br> <code>@</code> 用于选取属性，<code>string(.)</code> 取的当前节点下的所有文本（包含子标签的文本），整个的含义是选取当前节点下所有 <code>target</code> 属性值为 kcmstarget 的 <code>a</code> 标签下的所有文本。</li>
<li><code>xpath(&quot;.//em/text()&quot;)</code><br> 如果只想取的当前节点的文本而不需要子标签的文本则可以用 <code>text()</code> 去获取。</li>
<li><code>xpath(&quot;//div/a[text()='下一页']/@href&quot;)</code><br> 获取文本内容为下一页的 <code>a</code> 标签的 <code>href</code> 属性值。</li>
</ol>
<hr>
<h2 id="参考资料">参考资料</h2>
<ol type="1">
<li><span class="exturl" data-url="aHR0cDovL3d3dy5ydW5vb2IuY29tL3JlZ2V4cC9yZWdleHAtdHV0b3JpYWwuaHRtbA==">正则表达式 – 教程<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy53M3NjaG9vbC5jb20uY24veHBhdGgvaW5kZXguYXNw">XPath 教程<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy53M3NjaG9vbC5jb20uY24vY3NzcmVmL2Nzc19zZWxlY3RvcnMuYXNw">CSS 选择器参考手册<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>白话深度学习-基础篇</title>
    <url>/posts/f2af5d79.html</url>
    <content><![CDATA[<h2 id="收获">收获</h2>
<p>「白话深度学习与TensorFlow」的基础篇主要内容为“机器学习是什么”、“深度学习是什么”以及“TensorFlow”框架特性与安装，通过阅读基础篇的内容大致了解了以下几个部分：</p>
<ul>
<li>机器学习与深度学习的概念</li>
<li>机器学习与深度学习的区别</li>
<li>机器学习的常用方法</li>
<li>安装TensorFlow框架</li>
</ul>
<span id="more"></span>
<h2 id="第一章">第一章</h2>
<h3 id="机器学习是什么">机器学习是什么</h3>
<p>机器学习是人类定义一定的计算机算法，让计算机根据输入的样本和一些人类的干预来总结并归纳其特征和特点，并用这些特征和特点与一定的学习目标形成映射关系，进而自动化地做出相应反应的过程。</p>
<h3 id="机器学习的目的">机器学习的目的</h3>
<p>人类学习的目的是掌握知识、掌握能力、掌握技巧然后最终能够进行比较复杂的或者高要求的工作。相似的机器学习的最终目的在于让计算机能够独立或者半独立的进行相对复杂或者高要求的工作。</p>
<blockquote>
<p>机器学习与非机器学习的区别在于过去的计算机在程序给定的情况下，其行为逻辑就已经确定了，而机器学习则需要通过样本进行统计归纳然后才会确定其行为逻辑。所以通过机器学习可以进行相片识别信息、新闻的自动分类等工作。因为计算机事先是不会知道需要提取的信息在给定的相片中所具备的特征，只有通过机器学习不断的统计归纳才能得出适合识别大多数相片中所需提取的信息的模型。</p>
</blockquote>
<h3 id="机器学习的分类">机器学习的分类</h3>
<p>从学习的种类来说，机器学习一般分为两种：有监督学习和无监督学习<br>有监督学习是指先对给予的样本进行总结得出分类规则，之后根据这个规则进行分类操作，对于有监督学习而言基本分为三个过程：</p>
<ul>
<li>训练 训练的过程主要是拿一定具有标签的样本进行统计和归纳总结出一个模型</li>
<li>验证 验证的过程主要是拿一些未分类的样本对这个模型进行验证，判断其是否具有泛化性(generalization)。</li>
<li>测试 测试则是用<strong>一定量</strong>的样本判断模型的识别能力</li>
</ul>
<p>无监督学习则是在获得训练的向量数据后在没有标签的情况下尝试找出其内部蕴含关系的一种挖掘工作。</p>
<blockquote>
<p>有监督学习和无监督学习的区别在于前者的输入数据具有标签，而后者的输入数据没有标签</p>
</blockquote>
<h3 id="机器学习的常用方法">机器学习的常用方法</h3>
<h4 id="聚类">聚类</h4>
<p>聚类是指将物理对象或抽象对象的集合分组为由彼此类似的对象组成多个类的分析过程</p>
<blockquote>
<p>特征形态的相同或近似的划在一个概念下，特征形态不同的划在不同概念下</p>
</blockquote>
<p>聚类常用的算法有 K-Means、DBSCAN 等几种，其基本思路都是<strong>利用每个向量之间的距离，从远近判断是否从属于同一类别。</strong></p>
<h4 id="回归">回归</h4>
<p>回归是一个「由果索因」的过程，是一种归纳的思想，当我们看到大量的事实所呈现的样态去推断原因或客观蕴含的关系是如何的。 回归的训练过程一般如下：</p>
<ul>
<li><p>根据观察和归纳样本（训练集）的结果推断向量和最终的函数值呈现如下映射关系 <span class="math display">\[
y=f(x)=wx+b
\]</span> 这里的 <span class="math inline">\(w\)</span> 和 <span class="math inline">\(x\)</span> 分别是 <span class="math inline">\(1*n\)</span> 和 <span class="math inline">\(n*1\)</span> 的矩阵，也就是说接下来的问题是求解 w 和 b</p></li>
<li><p>代入样本值（验证集）得到误差和 <span class="math inline">\(Loss\)</span> <span class="math display">\[
Loss=\sum_{i=1}^n|wx_i+b-y_i|
\]</span> 这里的 <span class="math inline">\(wx_i+b\)</span> 是根据第一步推断关系计算出的值，<span class="math inline">\(y_i\)</span> 是实际观测到的值，将所有测试的误差相加之后即可得到总的误差，<span class="math inline">\(Loss\)</span> 越小则代表映射关系越精确</p></li>
</ul>
<blockquote>
<p>这里以线性回归为例，至于非线性回归过程是一致的，只是映射关系和 <span class="math inline">\(Loss\)</span> 函数有些不同。</p>
</blockquote>
<h4 id="分类">分类</h4>
<p>分类这个概念一直都很熟悉，具体到机器学习当中则是利用我们编写的分类器对样本进行分类，而判断这种分类器是否合理的原则在于<code>召回率</code>和<code>精确率</code>这两个指标</p>
<ul>
<li>召回率是检索出的相关样本和样本库中所有的相关样本的比率，衡量的是分类器的查全率</li>
<li>精确率是检索出的相关样本数与检索出样本总数的比率，衡量的是分类器的查准率</li>
</ul>
<p>分类的训练过程和回归的训练过程基本一致：</p>
<ol type="1">
<li>输入样本和分类标签</li>
<li>建立映射假说的某个<span class="math inline">\(y=f(x)\)</span></li>
<li>求解出全局的损失函数<span class="math inline">\(Loss\)</span>和待定系数<span class="math inline">\(w\)</span>的映射关系，<span class="math inline">\(Loss=g(w)\)</span></li>
<li>通过迭代优化逐步降低<span class="math inline">\(Loss\)</span>，最终找到一个<span class="math inline">\(w\)</span>能使召回率和精确率满足当前场景需要</li>
</ol>
<h2 id="第二章">第二章</h2>
<h3 id="深度学习是什么">深度学习是什么</h3>
<p>深度学习是指基于深度神经网络「deep neural networks」的学习，也就是深度人工神经网络所进行的学习过程。</p>
<h3 id="深度神经网络的组成">深度神经网络的组成</h3>
<p>深度神经网络由多个神经元组成，而神经元是人类受到生物神经细胞结构启发而研究出的一种算法体系，一个完整的神经元由<code>线性模型</code>和<code>激励函数</code>两部分首尾相接组成。基本模型如下：其中<span class="math inline">\(wx+b\)</span>是线性模型，<span class="math inline">\(\int\)</span>表示激励函数</p>
<p><img src="https://raw.githubusercontent.com/ikroal/blog-images/master/Neurons.png"></p>
<p>常见的激励函数有如下几种：</p>
<ol type="1">
<li><p>Sigmoid 函数 <span class="math display">\[
f(x)={1 \over 1+e^{-(wx+b)}}
\]</span></p></li>
<li><p>Tanh 函数 <span class="math display">\[
tanh(x)={e^x-e^{-x}\over e^x+e^{-x}}
\]</span></p></li>
<li><p>ReLu 函数 <span class="math display">\[
y=max(x,0)
\]</span></p></li>
<li><p>Linear 函数 <span class="math display">\[
f(x)=x
\]</span></p></li>
</ol>
<p>对于神经网络而言主要分为三层：输入层 (input layer)、隐藏层 (hidden layer)、输出层 (output layer)</p>
<p><img src="https://raw.githubusercontent.com/ikroal/blog-images/master/NeuralNetworks.png"></p>
<p>输入层直接接收输入的向量，不对数据进行任何处理 隐藏层可以有一层或者多层 输出层是最后一层，用于输出整个网络处理的值，这个值可能是一个分类向量值，也可能是一个类似线性回归产生的连续的值</p>
<h3 id="深度学习和机器学习的区别">深度学习和机器学习的区别</h3>
<p>深度学习是机器学习的子集，当深度学习和传统的机器学习的区别在于，传统的机器学习通常是需要人提前进行特征提取，把提取过的特征向量化后再丢给模型去训练，这里人要做相当的前置工作。而深度学习通常可以采用 End-to-End 的学习方式，输入的内容只需要做很少的一些归一化 (normalization)、白化 (whitening) 等处理就可以丢给模型去训练，通常不需要人做特征提取的工作。</p>
<h2 id="第三章">第三章</h2>
<h3 id="安装-tensorflow-框架">安装 TensorFlow 框架</h3>
<p>本次安装环境是 macos、Python3</p>
<ol type="1">
<li><p>安装 Anaconda 在 <span class="exturl" data-url="aHR0cHM6Ly93d3cuYW5hY29uZGEuY29tL2Rvd25sb2FkLyNtYWNvcw==">Anaconda 官网<i class="fa fa-external-link-alt"></i></span> 下载 Python3.6 版本 pkg 文件进行安装</p></li>
<li><p>建立 TensorFlow 运行环境</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conda create -n tensorflow python=<span class="number">3.6</span></span><br><span class="line">source activate tensorflow</span><br></pre></td></tr></table></figure></li>
<li><p>安装 TensorFlow</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install tensorflow</span><br></pre></td></tr></table></figure></li>
<li><p>测试 TensorFlow</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hello = tf.constant(<span class="string">&#x27;Hello,TensorFlow!&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sess = tf.Session()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(sess.run(hello))</span><br><span class="line"><span class="string">b&#x27;Hello,TensorFlow!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = tf.constant(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = tf.constant(<span class="number">32</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(sess.run(a + b))</span><br><span class="line"><span class="number">42</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Reading Notes</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象的六大原则及单例模式</title>
    <url>/posts/8e198ed0.html</url>
    <content><![CDATA[<h2 id="面向对象的六大原则">面向对象的六大原则</h2>
<h3 id="单一职责原则">单一职责原则</h3>
<p>单一职责原则 (SRP) 是指就一个类而言，应该仅有一个引起它变化的原因</p>
<blockquote>
<p>简单而言就是一个类应该只有一项职责，而不是具有多项职责，比如一个类既负责图片缓存的处理同时还负责显示图片，实际上应该拆分成两个类，一个类负责图片的缓存，另外一个类负责图片显示。如果一个类兼具太多的职责不仅导致了耦合性，而且在一个职责发生变化的时候还可能削弱其它的职责功能。</p>
</blockquote>
<span id="more"></span>
<h3 id="开闭原则">开闭原则</h3>
<p>开闭原则 (OCP) 是指软件中的对象对于修改应该是封闭的，对于扩展应该是开放的。</p>
<blockquote>
<p>如果一个类为了实现新的功能不断的对类中的原有代码进行修改和增加，不仅可能引入 Bug，还有可能会导致类越来越庞大，比如一个图片的缓存类需要实现内存缓存、SD 卡缓存、两种方式混合的缓存方法，在图片显示类中需要自由选择何种方式进行缓存显示。比较好的一种方式是：由于三种缓存方式实际上基本功能一致，所以可以定义一个接口，然后在图片显示类中义一个接口用于指向三个类实例化的对象，那么当需要采用哪种方式去进行缓存的时候，只需要使用 set 方法进行依赖注入将接口指向相应方式的对象即可，并且如果要实现其它不同的缓存方式只需要对接口进行实现即可。这样实现的代码耦合性弱扩展性强。</p>
</blockquote>
<h3 id="里氏替换原则">里氏替换原则</h3>
<p>里氏替换原则是指所有引用基类的地方必须能透明地使用其子类的对象</p>
<blockquote>
<p>一个基类的子类拥有基类的属性和方法（私有的除外），所以在大多数情况下基类能干的子类都能做，这样可以保证很好的扩展性，因为可以在基类的基础上进行扩展实现不同功能的子类。因此里氏替换原则有利于提高扩展性，同时为开闭原则提供了保障。</p>
</blockquote>
<h3 id="依赖倒置原则">依赖倒置原则</h3>
<p>依赖倒置原则是用于解耦的一种方式，主要有以下几个关键点：</p>
<ol type="1">
<li>高层模块不应该依赖底层模块，两者都应该依赖其抽象</li>
<li>抽象不应该依赖细节</li>
<li>细节应该依赖抽象</li>
</ol>
<blockquote>
<p>第一点是指当高层的模块使用底层的模块时候，不应该直接使用底层模块类的具体对象，而应该使用其接口或者是抽象类，这样可以保证其扩展性，也就是说高层模块与底层模块之间应该通过接口发生联系，而不应该存在直接关联。</p>
</blockquote>
<h3 id="接口隔离原则">接口隔离原则</h3>
<p>接口隔离原则是指类间的关系应该建立在最小的接口上</p>
<blockquote>
<p>最小的接口实际上就是抽象的一种表达，一个接口下面可能可能会实现很多种接口，或者是很多层级接口，要对这些接口相同的功能部分进行操作的时候只需要对最顶层的接口操作即可，譬如当关闭输入输出流的时候，Java 中有很多种流，字节流、字符流、缓冲流。这个时候为了减少依赖、耦合性以及增加扩展性，我们只需要利用 Cloaseable 接口指向各种流的对象进行关闭操作即可。</p>
</blockquote>
<h3 id="迪米特原则">迪米特原则</h3>
<p>迪米特原则是指一个对象应该对其它对象有最少的了解</p>
<blockquote>
<p>一个类应该尽可能少的利用到其它类完成相同的任务，这样可以降低耦合性</p>
</blockquote>
<h2 id="单例模式">单例模式</h2>
<h3 id="定义">定义</h3>
<p>所谓单例也就是说在一个类在系统中只存在一个实例，并且可以自行实例化向系统提供这个实例</p>
<h3 id="使用场景">使用场景</h3>
<p>适用于某个类有且仅有一个对象的场景，避免创建多个对象消耗过多的资源。</p>
<blockquote>
<ol type="1">
<li><p>构造函数不对外开放，一般为 private</p></li>
<li><p>通过一个静态方法或者枚举返回单例类对象</p></li>
<li><p>确保单例类对象有且只有一个，尤其是在多线程环境下</p></li>
<li><p>确保单例类对象在反序列化时不会重新构建对象</p></li>
</ol>
<p>也即是说单例模式的对象必须由该类的静态方法进行实例化和提供，并且不能出现多个对象。</p>
</blockquote>
<h3 id="优缺点">优缺点</h3>
<ol type="1">
<li>优点
<ul>
<li>单例模式在内存中只存在一个实例，减少了内存的开支。</li>
<li>减少了系统的性能开销，当一个对象的产生需要较多的资源的时候，这个时候可以通过产生一个单例对象，然后永驻内存来解决。</li>
<li>单例模式可以避免对资源的多重占用。</li>
<li>单例模式可以在系统设置全局的访问点，优化和共享资源访问</li>
</ul></li>
<li>缺点
<ul>
<li><strong>单例模式一般没有接口，扩展很困难。</strong></li>
<li><strong>单例对象如果持有 Context，那么很容易引发内存泄漏，此时传递给单例对象的 Context 最好是 Application Context</strong></li>
</ul></li>
</ol>
<h3 id="常用的实现方式">常用的实现方式</h3>
<ol type="1">
<li><p>饿汉模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CEO</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> CEO sCeo = <span class="keyword">new</span> CEO();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">CEO</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CEO <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> sCeo;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>该种方式实现的单例模式当类被加载的时候就会初始化一个 CEO 对象，然后外部可以通过 newInstance 静态方法进行获取。</p>
<p>由于单例模式需要类能够自行进行实例化，所以返回值一定是类变量以及通过静态方法进行返回。</p>
</blockquote></li>
<li><p>懒汉模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleInstance</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> SingleInstance sSingleInstance;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">SingleInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingleInstance <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (sSingleInstance != <span class="keyword">null</span>) &#123;</span><br><span class="line">          sSingleInstance = <span class="keyword">new</span> SingleInstance();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> sSingleInstance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>采用懒汉模式实现的单例模式可以在使用的时候才将对象实例化，但是由于每次调用 newInstance 方法的时候都会进行同步（比不需要同步的慢 100 倍），所以造成了不必要的同步开销，不建议使用。</p>
</blockquote></li>
<li><p>Double Check Lock</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleInstance</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> SingleInstance sSingleInstance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">SingleInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleInstance <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (sSingleInstance != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">synchronized</span> (SingleInstance.class) &#123;</span><br><span class="line">              <span class="keyword">if</span> (sSingleInstance != <span class="keyword">null</span>) &#123;</span><br><span class="line">                  sSingleInstance = <span class="keyword">new</span> SingleInstance();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> sSingleInstance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>第一次的判断避免了在对象非空情况下进行同步导致不必要开销的问题，第二次判断是由于可能存在线程 A，B 同时判断了对象为空，然后依次进入同步块中，如果这个时候不进行判断则可能导致创建出两个对象出来，所以需要进行第二次判断。</p>
<p>这个模式存在的一个问题是 mSingleInstance = new SingleInstance() 不是原子操作，其分为三个部分：给实例对象分配内存；调用构造函数，初始化成员字段；将实例对象指向分配的内存空间。并且后两步的执行顺序是不确定的，所以可能出现 A 线程执行完第三步，没有执行完第二步的情况下，程序切换至 B 线程，B 线程判断当前对象非空取走对象，但由于对象的成员字段没有初始化完成，所以可能出现错误。</p>
<p>解决办法是在 sInstance 前加上 volatile 关键字。</p>
</blockquote></li>
<li><p>静态内部类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleInstance</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">SingleInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleInstance <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> SingleHolder.sSingleInstance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleHolder</span> </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingleInstance sSingleInstance = <span class="keyword">new</span> SingleInstance();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>采用这种方式实现的单例模式很好的避免了 DCL 中可能出现的问题，由于内部类只有在使用它的成员以及方法的时候才会进行载入，所以可以做到使用的时候才实例化对象，而且能够确保线程安全。</p>
</blockquote></li>
<li><p>枚举单例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">SingletonEnum</span> </span>&#123;</span><br><span class="line">  INSTANCE;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;do sth.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在任何情况下枚举实例都是一个单例，而且创建过程是线程安全的。</p>
</blockquote></li>
<li><p>容器实现单例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonManager</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; objectMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">   </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">SingletonManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerService</span><span class="params">(String key, Object instance)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!objectMap.containsKey(key)) &#123;</span><br><span class="line">          objectMap.put(key, instance);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getService</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> objectMap.get(key);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>采用容器实现的单例模式可以对多种对象的单例进行管理，例如 Android 当中的 getSystemService 就是这样实现的单例模式。</p>
</blockquote></li>
</ol>
<h2 id="总结">总结</h2>
<ol type="1">
<li><p>前四种方式实现的单例模式存在在反序列化（反射执行无参构造函数）的情况下可能会重新创建一个对象，为了避免这种情况的发生，我们需要重写 readResolve 方法，这样在进行反序列化的时候就会执行这个方法获取对象实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span><span class="keyword">throws</span> ObjectStreamException</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> sSingleInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>单例模式的核心在于将构造函数进行私有化，并且通过一个静态方法返回唯一的对象实例，在这个获取的过程当中需要保证<strong>线程安全、防止反序列化</strong>导致生成实例对象等问题。</p></li>
</ol>
<hr>
]]></content>
      <categories>
        <category>Reading Notes</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>Gallery 的三种实现方式</title>
    <url>/posts/f8fbe2b4.html</url>
    <content><![CDATA[<h2 id="gallery">Gallery</h2>
<p>主要内容：</p>
<p><img src="https://raw.githubusercontent.com/ikroal/blog-images/master/gallery-mind-mapping.png"></p>
<span id="more"></span>
<p>目标效果： <img src="https://raw.githubusercontent.com/ikroal/blog-images/master/gallery-result.png"></p>
<h2 id="需求分析">需求分析</h2>
<p>从目标效果上来看主要考虑以下几个点：</p>
<ol type="1">
<li>图片如何切换和切换动画
<ul>
<li>ImageSwitcher 提供了 setImageResource (int resid) 方法对下一个 ImageView 进行图片加载和切换，切换的动画效果需要自定义</li>
<li>ViewPager 的切换和切换动画内部处理</li>
<li>HorizontalScrollView 可以通过 smoothScrollBy (int dx, int dy) 方法进行平滑切换</li>
</ul></li>
<li>图片的切换方向
<ul>
<li>ImageSwitcher 的切换方向需要自己判断</li>
<li>HorizontalScrollView 的切换方向虽然不用判断，但是滑动距离需要自己控制</li>
<li>ViewPager 的切换方向无需处理</li>
</ul></li>
<li>确定切换时应该加载的图片
<ul>
<li>ImageSwitcher 和 HorizontalScrollView 加载图片需要自己判断</li>
<li>ViewPager 的加载图片无需处理</li>
</ul></li>
<li>图片下方的圆点效果，与图片数量一致</li>
<li>圆点和图片的同步切换</li>
</ol>
<h2 id="imageswitcher-实现">ImageSwitcher 实现</h2>
<ol type="1">
<li><p>ImageSwitcher 的特点 首先查看 ImageSwitcher 和 ViewSwitcher 的官方 API：</p>
<blockquote>
<p>ViewSwitcher that switches between two ImageViews when a new image is set on it. The views added to an ImageSwitcher must all be ImageViews.</p>
</blockquote>
<blockquote>
<p>ViewAnimator that switches between two views, and has a factory from which these views are created. You can either use the factory to create the views, or add them yourself. A ViewSwitcher can only have two child views, of which only one is shown at a time.</p>
</blockquote>
<p>官方给出的 API 说明了，ImageSwitcher 里最多只能由两个 ImageView，同一时间只能显示一个，在两个 ImageView 之间能够设置视图切换动画，并且提供了 factory 用于创建两个 ImageView（当然也可以选择自行添加）。</p></li>
<li><p>实现过程 首先我们需要在布局文件中添加 ImageSwitcher 控件：</p>
<p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">tools:context</span>=<span class="string">&quot;com.rookieyang.gallerytest.ImageSwitcherTest&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ImageSwitcher</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/imageSwitcher&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginBottom</span>=<span class="string">&quot;30dp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:id</span>=<span class="string">&quot;@+id/tipsLayout&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_alignParentBottom</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure> &gt; 采用 FrameLayout 将圆点部分置于图片的上方，RelativeLayout 用于控制原点部分在底部，LinearLayout 中的属性设置用于将圆点水平居中放置。</p>
<p>在添加完 ImageSwiter 之后，通过 <code>setFactory(ViewFactory factory)</code> 函数为 ImageSwiter 添加 ImageView：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mImageSwitcher.setFactory(<span class="keyword">new</span> ViewFactory() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">makeView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ImageView imageView = <span class="keyword">new</span> ImageView(ImageSwitcherTest.<span class="keyword">this</span>);</span><br><span class="line">        ImageSwitcher.LayoutParams layoutParams = <span class="keyword">new</span> ImageSwitcher.LayoutParams(</span><br><span class="line">            ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);</span><br><span class="line">        imageView.setScaleType(ScaleType.CENTER_CROP);</span><br><span class="line">        imageView.setLayoutParams(layoutParams);</span><br><span class="line">        <span class="keyword">return</span> imageView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure> &gt; 这里为 ImageSwitcher 设置了一个 factory，在 setFactory(ViewFactory factory) 内部会执行两次 obtainView() 完成 View 的增加。</p>
<p>上述过程只是完成了 ImageView 的添加，实际的图片还没有被加载，由于 ImageSwitcher 的限制，所以我们不能直接将 ImageView 一次性添加进去（这样性能也不高），可以选择用一个数组对图片资源进行保存，在调用 setImageResource() 时进行加载：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] mImageId = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;R.drawable.pic1, R.drawable.pic2, R.drawable.pic3&#125;;</span><br><span class="line">mImageSwitcher.setImageResource(mImageId[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure> 在解决了如何加载图片之后，还需要为图片下方添加圆点效果，圆点的个数由图片的个数决定，代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> ImageView[] mTips;</span><br><span class="line"></span><br><span class="line">mTips = <span class="keyword">new</span> ImageView[mImageId.length];</span><br><span class="line">LinearLayout tipsLinearLayout = (LinearLayout) findViewById(R.id.tipsLayout);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mImageId.length; i++) &#123;</span><br><span class="line">    mTips[i] = <span class="keyword">new</span> ImageView(<span class="keyword">this</span>);</span><br><span class="line">    LinearLayout.LayoutParams layoutParams = <span class="keyword">new</span> LayoutParams(</span><br><span class="line">        <span class="keyword">new</span> ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,</span><br><span class="line">            ViewGroup.LayoutParams.WRAP_CONTENT));</span><br><span class="line">    layoutParams.leftMargin = <span class="number">5</span>;</span><br><span class="line">    layoutParams.rightMargin = <span class="number">5</span>;</span><br><span class="line">    tipsLinearLayout.addView(mTips[i], layoutParams);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setTipsImage(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTipsImage</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mImageId.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == position) &#123;</span><br><span class="line">            mTips[i].setImageResource(R.drawable.page_indicator_focused);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mTips[i].setImageResource(R.drawable.page_indicator_unfocused);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 在完成上述步骤之后我们还需要完成的是让图片和圆点同时进行切换、确定切换方向和应该加载的图片以及切换的动画，对于图片的切换方向可以依据第一次按住屏幕和离开屏幕这两点的位置进行判断，而切换时加载的图片则可以用一个变量对当前图片序号进行保存，动画效果则可以定义四个动画（左进，左出，右进、右出）文件：</p>
<p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--left_in--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">translate</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:fromXDelta</span>=<span class="string">&quot;-100%p&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:toXDelta</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:duration</span>=<span class="string">&quot;500&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--left_out--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">translate</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:fromXDelta</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:toXDelta</span>=<span class="string">&quot;-100%p&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:duration</span>=<span class="string">&quot;500&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--right_in--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">translate</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:fromXDelta</span>=<span class="string">&quot;100%p&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:toXDelta</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:duration</span>=<span class="string">&quot;500&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--right_out--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">translate</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:fromXDelta</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:toXDelta</span>=<span class="string">&quot;100%p&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:duration</span>=<span class="string">&quot;500&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mDownX;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mCurrentPosition = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    mImageSwitcher.setOnTouchListener(<span class="keyword">new</span> OnTouchListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">                <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                    mDownX = (<span class="keyword">int</span>) event.getX();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                    <span class="keyword">int</span> upX = (<span class="keyword">int</span>) event.getX();</span><br><span class="line">                    <span class="keyword">if</span> (upX &gt; mDownX) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (mCurrentPosition &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            mImageSwitcher.setInAnimation(ImageSwitcherTest.<span class="keyword">this</span>,</span><br><span class="line">                                R.anim.left_in);</span><br><span class="line">                            mImageSwitcher.setOutAnimation(ImageSwitcherTest.<span class="keyword">this</span>,</span><br><span class="line">                                R.anim.right_out);</span><br><span class="line">                            mCurrentPosition--;</span><br><span class="line">                            mImageSwitcher.setImageResource(mImageId[mCurrentPosition]);</span><br><span class="line">                            setTipsImage(mCurrentPosition);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (upX &lt; mDownX) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (mCurrentPosition &lt; mImageId.length - <span class="number">1</span>) &#123;</span><br><span class="line">                            mImageSwitcher.setInAnimation(ImageSwitcherTest.<span class="keyword">this</span>,</span><br><span class="line">                                R.anim.right_in);</span><br><span class="line">                            mImageSwitcher.setOutAnimation(ImageSwitcherTest.<span class="keyword">this</span>,</span><br><span class="line">                                R.anim.left_out);</span><br><span class="line">                            mCurrentPosition++;</span><br><span class="line">                            mImageSwitcher.setImageResource(mImageId[mCurrentPosition]);</span><br><span class="line">                            setTipsImage(mCurrentPosition);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    ​```</span><br><span class="line"></span><br><span class="line">## ViewPager 实现</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> ViewPager 的特点</span><br><span class="line"></span><br><span class="line">    &gt; ViewPager is most often used in conjunction with Fragment, which is a convenient way to supply and manage the lifecycle of each page. There are standard adapters implemented <span class="keyword">for</span> using fragments with the ViewPager, which cover the most common use cases. These are FragmentPagerAdapter and FragmentStatePagerAdapter; each of these classes have simple code showing how to build a full user <span class="class"><span class="keyword">interface</span> <span class="title">with</span> <span class="title">them</span>.</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">ViewPager</span> 一般结合 <span class="title">Fragment</span> 使用，每个页面就是一个 <span class="title">Fragment</span>，系统提供了 <span class="title">FragmentPagerAdapter</span> 和 <span class="title">FragmentStatePagerAdapter</span> 用于填充 <span class="title">ViewPager</span>。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">2. 实现过程</span></span><br><span class="line"><span class="class">    首先向布局文件中添加 <span class="title">ViewPager</span> 控件：</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    ```<span class="title">XML</span></span></span><br><span class="line"><span class="class">    &lt;?<span class="title">xml</span> <span class="title">version</span></span>=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">    &lt;FrameLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">      xmlns:tools=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="line">      android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">      android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">      tools:context=<span class="string">&quot;com.rookieyang.gallerytest.ViewPagerTest&quot;</span>&gt;</span><br><span class="line">    </span><br><span class="line">      &lt;android.support.v4.view.ViewPager</span><br><span class="line">        android:id=<span class="string">&quot;@+id/viewPager&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;match_parent&quot;</span> /&gt;</span><br><span class="line">    </span><br><span class="line">      &lt;RelativeLayout</span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_marginBottom=<span class="string">&quot;30dp&quot;</span>&gt;</span><br><span class="line">        &lt;LinearLayout</span><br><span class="line">          android:id=<span class="string">&quot;@+id/tipsFragmentLayout&quot;</span></span><br><span class="line">          android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">          android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">          android:layout_alignParentBottom=<span class="string">&quot;true&quot;</span></span><br><span class="line">          android:gravity=<span class="string">&quot;center_horizontal&quot;</span></span><br><span class="line">          android:orientation=<span class="string">&quot;horizontal&quot;</span>/&gt;</span><br><span class="line">      &lt;/RelativeLayout&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;/FrameLayout&gt;</span><br></pre></td></tr></table></figure> 布局基本与 ImageSwitcher 一致，只是将 ImageSwitcher 控件替换为 ViewPager。 接下来需要将图片加载到 ViewPager 中去，可以利用 FragmentPagerAdapter 达到这一目的，由于 FragmentPagerAdapter 返回的是 Fragment，所以创建了 ImageFragment 类，用于将 Image 放置到 Fragment中，代码布局如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> View view;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> imageViewRes;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="params"><span class="function">    Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Inflate the layout for this fragment</span></span><br><span class="line">    view = inflater.inflate(R.layout.fragment_image, container, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">return</span> view;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">    ImageView imageView = (ImageView) view.findViewById(R.id.viewPageImage);</span><br><span class="line">    imageView.setScaleType(ScaleType.CENTER_CROP);</span><br><span class="line">    imageView.setImageResource(imageViewRes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImageView</span><span class="params">(<span class="keyword">int</span> imageViewRes)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.imageViewRes = imageViewRes;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">tools:context</span>=<span class="string">&quot;com.rookieyang.gallerytest.ImageFragment&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/viewPageImage&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure> 接下来实现继承自 FragmentPagerAdapter 的 ImagePagerAdapter 类，代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImagePagerAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentPagerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;ImageFragment&gt; mFragments;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImagePagerAdapter</span><span class="params">(FragmentManager fm, List&lt;ImageFragment&gt; fragments)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(fm);</span><br><span class="line">        mFragments = fragments;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ImageFragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">&quot;getItem&quot;</span>, <span class="string">&quot;getItem: &quot;</span> + mFragments.get(position).getId());</span><br><span class="line">        <span class="keyword">return</span> mFragments.get(position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mFragments.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 在完成上述的步骤之后，利用保存图片资源的数组创建对应个数的 ImageFragment 并保存到 List 中，然后创建一个 ImagePagerAdapter 对象，替 ViewPager 设置适配器即可实现图片的加载和滑动。由于 ViewPager 内部处理了滑动方向和下一张图片加载判断的问题，所以只剩下图片与圆点的同步切换需要进行处理，代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mImageIds = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;R.drawable.pic1, R.drawable.pic2, R.drawable.pic3&#125;;</span><br><span class="line">mTips = <span class="keyword">new</span> ImageView[mImageIds.length];</span><br><span class="line">mViewPager = (ViewPager) findViewById(R.id.viewPager);</span><br><span class="line">ViewGroup viewGroup = (ViewGroup) findViewById(R.id.tipsFragmentLayout);</span><br><span class="line">LinearLayout.LayoutParams layoutParams = <span class="keyword">new</span> LinearLayout.LayoutParams(</span><br><span class="line">    <span class="keyword">new</span> ViewGroup.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));</span><br><span class="line">layoutParams.rightMargin = <span class="number">5</span>;</span><br><span class="line">layoutParams.leftMargin = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mImageIds.length; i++) &#123;</span><br><span class="line">    ImageFragment imageFragment = <span class="keyword">new</span> ImageFragment();</span><br><span class="line">    imageFragment.setImageView(mImageIds[i]);</span><br><span class="line">    mImageFragments.add(imageFragment);</span><br><span class="line">    <span class="keyword">if</span> (mImageIds.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        mTips[i] = <span class="keyword">new</span> ImageView(<span class="keyword">this</span>);</span><br><span class="line">        mTips[i].setImageResource(R.drawable.page_indicator_unfocused);</span><br><span class="line">        viewGroup.addView(mTips[i], layoutParams);</span><br><span class="line">        mTips[mCurrentPosition].setImageResource(R.drawable.page_indicator_focused);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ImagePagerAdapter imagePagerAdapter = <span class="keyword">new</span> ImagePagerAdapter(</span><br><span class="line">    getSupportFragmentManager(), mImageFragments);</span><br><span class="line">mViewPager.setAdapter(imagePagerAdapter);</span><br><span class="line">mViewPager.addOnPageChangeListener(<span class="keyword">new</span> OnPageChangeListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">int</span> positionOffsetPixels)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mImageIds.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mImageIds.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == position) &#123;</span><br><span class="line">                    mTips[i].setImageResource(R.drawable.page_indicator_focused);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mTips[i].setImageResource(R.drawable.page_indicator_unfocused);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></li>
</ol>
<h2 id="horizontalscrollview-实现">HorizontalScrollView 实现</h2>
<ol type="1">
<li><p>HorizontalScrollView 特点</p>
<blockquote>
<p>A HorizontalScrollView is a FrameLayout, meaning you should place one child in it containing the entire contents to scroll; this child may itself be a layout manager with a complex hierarchy of objects. A child that is often used is a LinearLayout in a horizontal orientation, presenting a horizontal array of top-level items that the user can scroll through.</p>
</blockquote>
<p>从这里可以了解到如果要实现上面的效果，那么应该在 HorizontalScrollView 放置一个 LinearLayout，然后 LinearLayout 内加载的是要显示的图片，由于是水平滑动，所以 LinearLayout 的方向也要是水平的。</p></li>
<li><p>实现过程 依旧是添加了 HorizontalScrollView 控件，把放置 ImageSwwitcher 的部分替换为：</p>
<p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">HorizontalScrollView</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:id</span>=<span class="string">&quot;@+id/horizontalScrollView&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:scrollbars</span>=<span class="string">&quot;none&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:id</span>=<span class="string">&quot;@+id/imageLayout&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">HorizontalScrollView</span>&gt;</span></span><br></pre></td></tr></table></figure> &gt; 为了效果一致去掉了滚动条。</p>
<p>添加完控件之后，就需要填充 HorizontalScrollView ，为了扩展性，所以创建了一个 HorizontalViewAdapter 类，代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HorizontalViewAdapter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] mImageResIdList;</span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HorizontalViewAdapter</span><span class="params">(Context context, <span class="keyword">int</span>[] imageResIdList)</span> </span>&#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">        mImageResIdList = imageResIdList;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mImageResIdList.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ImageView <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        ImageView imageView = <span class="keyword">new</span> ImageView(mContext);</span><br><span class="line"></span><br><span class="line">        WindowManager wm = (WindowManager) mContext.</span><br><span class="line">            getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">        DisplayMetrics displayMetrics = <span class="keyword">new</span> DisplayMetrics();</span><br><span class="line">        wm.getDefaultDisplay().getMetrics(displayMetrics);</span><br><span class="line">        <span class="keyword">int</span> width = displayMetrics.widthPixels;</span><br><span class="line">        <span class="keyword">int</span> height = displayMetrics.heightPixels;</span><br><span class="line">        Log.i(<span class="string">&quot;Adpter: &quot;</span>, String.valueOf(width));</span><br><span class="line"></span><br><span class="line">        LinearLayout.LayoutParams layoutParams = <span class="keyword">new</span> LayoutParams(</span><br><span class="line">            <span class="keyword">new</span> ViewGroup.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT));</span><br><span class="line">        layoutParams.width = width;</span><br><span class="line">        layoutParams.height = height;</span><br><span class="line"></span><br><span class="line">        imageView.setLayoutParams(layoutParams);</span><br><span class="line">        imageView.setScaleType(ScaleType.CENTER_CROP);</span><br><span class="line">        imageView.setImageResource(mImageResIdList[position]);</span><br><span class="line">        <span class="keyword">return</span> imageView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>这里图片的长和宽会根据设备的分辨率进行指定，之所以不用 <code>match_parent</code> 的原因是这样会导致显示效果出问题。</p>
</blockquote>
<p>在创建完适配器之后，由于 HorizontalScrollView 没有设置适配器的方法，所以需要实现 <code>setAdapter()</code> 方法，代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdapter</span><span class="params">(HorizontalViewAdapter horizontalViewAdapter)</span> </span>&#123;</span><br><span class="line">    mTips = <span class="keyword">new</span> ImageView[mImageId.length];</span><br><span class="line">    LinearLayout imageLayout = (LinearLayout) findViewById(R.id.imageLayout);</span><br><span class="line">    LinearLayout tipsLinearLayout = (LinearLayout) findViewById(R.id.horizontalTipsLayout);</span><br><span class="line">    <span class="keyword">int</span> size = horizontalViewAdapter.getCount();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        ImageView imageView = horizontalViewAdapter.getItem(i);</span><br><span class="line">        imageLayout.addView(imageView);</span><br><span class="line"></span><br><span class="line">        mTips[i] = <span class="keyword">new</span> ImageView(<span class="keyword">this</span>);</span><br><span class="line">        LinearLayout.LayoutParams layoutParams = <span class="keyword">new</span> LayoutParams(</span><br><span class="line">            <span class="keyword">new</span> ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,</span><br><span class="line">                ViewGroup.LayoutParams.WRAP_CONTENT));</span><br><span class="line">        layoutParams.leftMargin = <span class="number">5</span>;</span><br><span class="line">        layoutParams.rightMargin = <span class="number">5</span>;</span><br><span class="line">        tipsLinearLayout.addView(mTips[i], layoutParams);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>实现 setAdapter() 方法之后，就可以在 onCreate() 方法中调用了，调用之后图片会被加载到布局中，这时候也可以滑动，但是由于滑动距离没有控制，所以并没有达到想要的效果，由于图片的长度取决于设备的分辨率，所以可以获取设备的长度作为滑动距离，为 HorizontalScrollView 设置监听事件，当触摸屏幕之后进行判断，确定实际滑动的方向，具体代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取图片滑动距离</span></span><br><span class="line">WindowManager wm = (WindowManager) getApplicationContext().</span><br><span class="line">    getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">DisplayMetrics displayMetrics = <span class="keyword">new</span> DisplayMetrics();</span><br><span class="line">wm.getDefaultDisplay().getMetrics(displayMetrics);</span><br><span class="line">mScrollX = displayMetrics.widthPixels;</span><br><span class="line"><span class="comment">//确定的滑动方向</span></span><br><span class="line"><span class="keyword">final</span> HorizontalScrollView horizontalScrollView = (HorizontalScrollView) findViewById(</span><br><span class="line">    R.id.horizontalScrollView);</span><br><span class="line">horizontalScrollView.setOnTouchListener(<span class="keyword">new</span> OnTouchListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                mDownX = (<span class="keyword">int</span>) event.getX();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                <span class="keyword">int</span> upX = (<span class="keyword">int</span>) event.getX();</span><br><span class="line">                <span class="keyword">if</span> (upX &gt; mDownX) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mCurrentPosition &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        mCurrentPosition--;</span><br><span class="line">                        horizontalScrollView.smoothScrollBy(-mScrollX, <span class="number">0</span>);</span><br><span class="line">                        setTipsImage(mCurrentPosition);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (upX &lt; mDownX) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mCurrentPosition &lt; mImageId.length - <span class="number">1</span>) &#123;</span><br><span class="line">                        mCurrentPosition++;</span><br><span class="line">                        Log.i(<span class="string">&quot;onTouch: &quot;</span>, <span class="string">&quot;onTouch: &quot;</span> + mCurrentPosition);</span><br><span class="line">                        horizontalScrollView.smoothScrollBy(mScrollX, <span class="number">0</span>);</span><br><span class="line">                        setTipsImage(mCurrentPosition);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></li>
</ol>
<h2 id="总结">总结</h2>
<p>HorizontalScrollView 的实现实际上并不完善，因为 ImageView 是一次性全部添加进去的，并没有做优化处理，在虚拟机上运行时，由于超过了堆内存会导致报错。</p>
<hr>
]]></content>
      <categories>
        <category>Archived</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Custom View</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 启动过程简析（一）之 init 进程</title>
    <url>/posts/da66bd78.html</url>
    <content><![CDATA[<h2 id="问题">问题</h2>
<p>在进入到 Android 启动过程之前先让我们思考以下几个问题 1. Android 系统的启动过程是怎样的？ 2. init 、zygote 进程是什么？在系统启动的过程中各自发挥了什么作用？ 3. AMS、PMS 等这些服务是如何被启动的？ 4. Launcher 是如何被启动的？</p>
<p>此篇文章将针对 init 部分给出分析<span id="more"></span></p>
<h2 id="启动流程简述">启动流程简述</h2>
<p>在了解 init 部分之前，首先简单介绍下系统的启动流程以便抓住主线，当我们通过电源键开启系统的时候，系统首先会加载 bootloader 程序到 RAM 中，然后通过 bootloader 将内核程序加载到 RAM 中，之后内核程序会创建init 进程，在 init 进程中会创建 zygote 进程，而 zygote 进程则会创建 DVM 并且启动 SystemServer 进程，通过SystemServer 系统会启动一系列的服务，包括常见的 AMS、PMS 等，最后再通过 AMS 进入到我们熟知的 Launcher 程序。 所以整个流程的关键点在于 <strong>init 进程如何创建 zygote、zygote 进程如何创建 SystemServer、SystemServer 进程如何启动 AMS、AMS 如何启动 Launcher。</strong></p>
<h2 id="init-启动流程分析">init 启动流程分析</h2>
<p>由于 bootloader 和内核不是关心的重点，所以这里只是简单介绍它们的作用。</p>
<h3 id="加载运行-bootloader">加载运行 BootLoader</h3>
<p>在电源上电之后，CPU 中的操作控制器将发出控制信号，将程序计数器（PC）的内容送至地址寄存器（AR），之后启动对主存的读操作，最终将 BootLoader 加载到 RAM 当中。然后 BootLoader 开始执行，主要负责硬件的初始化，将内核程序加载到内存。</p>
<h3 id="init-进程的启动">init 进程的启动</h3>
<p>内核启动之后将会初始化软硬件环境，加载驱动程序，挂载根文件系统，然后创建 init 进程，init 作为系统中的第一个用户进程，其进程号为 1，在创建 init 进程之时，系统会执行位于 <strong>system/core/init </strong>下的 init.cpp 程序</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">   ...</span><br><span class="line">    <span class="comment">//创建用户空间目录并挂载</span></span><br><span class="line">    <span class="keyword">if</span> (is_first_stage) &#123;</span><br><span class="line">        <span class="built_in">mount</span>(<span class="string">&quot;tmpfs&quot;</span>, <span class="string">&quot;/dev&quot;</span>, <span class="string">&quot;tmpfs&quot;</span>, MS_NOSUID, <span class="string">&quot;mode=0755&quot;</span>);</span><br><span class="line">        <span class="built_in">mkdir</span>(<span class="string">&quot;/dev/pts&quot;</span>, <span class="number">0755</span>);</span><br><span class="line">        <span class="built_in">mkdir</span>(<span class="string">&quot;/dev/socket&quot;</span>, <span class="number">0755</span>);</span><br><span class="line">        <span class="built_in">mount</span>(<span class="string">&quot;devpts&quot;</span>, <span class="string">&quot;/dev/pts&quot;</span>, <span class="string">&quot;devpts&quot;</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> MAKE_STR(x) __STRING(x)</span></span><br><span class="line">        <span class="built_in">mount</span>(<span class="string">&quot;proc&quot;</span>, <span class="string">&quot;/proc&quot;</span>, <span class="string">&quot;proc&quot;</span>, <span class="number">0</span>, <span class="string">&quot;hidepid=2,gid=&quot;</span> <span class="built_in">MAKE_STR</span>(AID_READPROC));</span><br><span class="line">        <span class="built_in">mount</span>(<span class="string">&quot;sysfs&quot;</span>, <span class="string">&quot;/sys&quot;</span>, <span class="string">&quot;sysfs&quot;</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">    <span class="built_in">signal_handler_init</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">property_load_boot_defaults</span>();</span><br><span class="line">    <span class="built_in">export_oem_lock_status</span>();</span><br><span class="line">    <span class="comment">//启动属性服务</span></span><br><span class="line">    <span class="built_in">start_property_service</span>();</span><br><span class="line">  	</span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> BuiltinFunctionMap function_map;</span><br><span class="line">    Action::<span class="built_in">set_function_map</span>(&amp;function_map);</span><br><span class="line"></span><br><span class="line">    Parser&amp; parser = Parser::<span class="built_in">GetInstance</span>();</span><br><span class="line">    parser.<span class="built_in">AddSectionParser</span>(<span class="string">&quot;service&quot;</span>,std::make_unique&lt;ServiceParser&gt;());</span><br><span class="line">    parser.<span class="built_in">AddSectionParser</span>(<span class="string">&quot;on&quot;</span>, std::make_unique&lt;ActionParser&gt;());</span><br><span class="line">    parser.<span class="built_in">AddSectionParser</span>(<span class="string">&quot;import&quot;</span>, std::make_unique&lt;ImportParser&gt;());</span><br><span class="line">    <span class="comment">//解析 init.rc 文件</span></span><br><span class="line">    parser.<span class="built_in">ParseConfig</span>(<span class="string">&quot;/init.rc&quot;</span>);</span><br><span class="line">   ...</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到 init 进程主要做了三件事情：<strong>创建用户空间文件夹并挂载、启动属性服务、解析位于 system文件夹下的 init.rc 文件</strong>。 这里我们主要关注解析 init.rc 文件的过程，因为 zygote 进程就是在这个过程中创建的。</p>
<h4 id="android-init-language">Android Init Language</h4>
<p>由于 init.rc 是一个用 Android 初始化语言（AIL）编写的文件，为了更好的理解 rc 文件的解析过程需要了解一部分 AIL 语法。 AIL 主要有五种类型语句 Actions、Commands、Services、Options、Imports，在 AIL 中每个部分(语句块)表示为一个 Section，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">on boot</span><br><span class="line">    ifup lo</span><br><span class="line">    hostname localhost</span><br><span class="line">    domainname localdomain</span><br></pre></td></tr></table></figure>
<p>五种语句中只有 Actions、Services、Import 可以用于确定一个 Section。其中 Actions 由一系列 command 组成，Actions 拥有一个 trigger 用于确定何时执行这些命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">on &lt;trigger&gt;</span><br><span class="line">    &lt;command&gt;</span><br><span class="line">    &lt;command&gt;</span><br><span class="line">    &lt;command&gt;</span><br><span class="line"> </span><br><span class="line">on early-init //触发器 early-init</span><br><span class="line">    write /proc/1/oom_score_adj -1000 //command</span><br><span class="line">    write /proc/sys/kernel/sysrq 0</span><br></pre></td></tr></table></figure>
<p>Services 由一些 option 组成，其在初始化的时候启动，并可以在退出后重启（可选）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service &lt;name&gt; &lt;pathname&gt; [ &lt;argument&gt; ]*  //服务名、执行路径、参数</span><br><span class="line">        &lt;option&gt;  </span><br><span class="line">        &lt;option&gt; </span><br><span class="line">        </span><br><span class="line">service ueventd /sbin/ueventd </span><br><span class="line">    class core</span><br><span class="line">    critical</span><br><span class="line">    seclabel u:r:ueventd:s0</span><br></pre></td></tr></table></figure>
<p>Services 定义了自身的服务名、执行路径以及执行时传入的参数，option 用于指定何时和怎样启动 service，关于何时启动这里进行一下说明，Actions 中有一条命令是 class_start <服务类别名> 用于启动所有未运行的相同类别的 service，而 option 可以通过 class <类别名> 对 service 的类别名进行指定。<strong>所以 service 的启动一般是通过 action 触发之后执行 class_start 命令进行启动的。</strong> AIL 的介绍就到这了，<strong>如果想要详细了解请阅读 system/core/init 下的 readme.txt 文件</strong></类别名></服务类别名></p>
<h4 id="init.rc-解析">init.rc 解析</h4>
<p>system/core/rootdir/init.rc 现在接着分析 init.rc 文件，在文件的首部可以看到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> /init.environ.rc</span><br><span class="line"><span class="keyword">import</span> /init.usb.rc</span><br><span class="line"><span class="keyword">import</span> /init.$&#123;ro.hardware&#125;.rc</span><br><span class="line"><span class="keyword">import</span> /init.usb.configfs.rc</span><br><span class="line"><span class="keyword">import</span> /init.$&#123;ro.zygote&#125;.rc</span><br></pre></td></tr></table></figure>
<p>在这里可以看到需要启动的 zygote，但是与其它引入的 rc 文件相比 zygote 部分并没有使用确定的值，而是使用 ${ro.zygote} 变量去替代，这是因为从 Android 在 5.0 以后开始支持 64 位程序，所以需要根据系统中 ro.zygote 属性的值动态引入。ro.zygote 的值可以通过 adb shell getprop 进行查询，我的手机查询结果是：</p>
<p><img src="https://raw.githubusercontent.com/ikroal/blog-images/master/zygote-value.png"></p>
<p>这说明手机会启动两个 zygote 进程，对应的执行程序分别是 app_process64 (主模式)、app_process32，通过 adb shell ps | grep zygote 可以看到确实存在两个 zygote 进程</p>
<p><img src="https://raw.githubusercontent.com/ikroal/blog-images/master/zygote-process.png"></p>
<p>接着查看与 init.rc 同一目录下的 init.zygote64_32.rc 文件 system/core/rootdir/init.zygote64_32.rc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">service zygote /system/bin/app_process64 -Xzygote /system/bin --zygote --start-system-server --socket-name=zygote</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">main</span></span></span><br><span class="line"><span class="class">    <span class="title">socket</span> <span class="title">zygote</span> <span class="title">stream</span> 660 <span class="title">root</span> <span class="title">system</span></span></span><br><span class="line"><span class="class">    <span class="title">onrestart</span> <span class="title">write</span> /<span class="title">sys</span>/<span class="title">android_power</span>/<span class="title">request_state</span> <span class="title">wake</span></span></span><br><span class="line"><span class="class">    <span class="title">onrestart</span> <span class="title">write</span> /<span class="title">sys</span>/<span class="title">power</span>/<span class="title">state</span> <span class="title">on</span></span></span><br><span class="line"><span class="class">    <span class="title">onrestart</span> <span class="title">restart</span> <span class="title">audioserver</span></span></span><br><span class="line"><span class="class">    <span class="title">onrestart</span> <span class="title">restart</span> <span class="title">cameraserver</span></span></span><br><span class="line"><span class="class">    <span class="title">onrestart</span> <span class="title">restart</span> <span class="title">media</span></span></span><br><span class="line"><span class="class">    <span class="title">onrestart</span> <span class="title">restart</span> <span class="title">netd</span></span></span><br><span class="line"><span class="class">    <span class="title">writepid</span> /<span class="title">dev</span>/<span class="title">cpuset</span>/<span class="title">foreground</span>/<span class="title">tasks</span> /<span class="title">sys</span>/<span class="title">fs</span>/<span class="title">cgroup</span>/<span class="title">stune</span>/<span class="title">foreground</span>/<span class="title">tasks</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">service</span> <span class="title">zygote_secondary</span> /<span class="title">system</span>/<span class="title">bin</span>/<span class="title">app_process32</span> -<span class="title">Xzygote</span> /<span class="title">system</span>/<span class="title">bin</span> --<span class="title">zygote</span> --<span class="title">socket</span>-<span class="title">name</span></span>=zygote_secondary</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">main</span></span></span><br><span class="line"><span class="class">    <span class="title">socket</span> <span class="title">zygote_secondary</span> <span class="title">stream</span> 660 <span class="title">root</span> <span class="title">system</span></span></span><br><span class="line"><span class="class">    <span class="title">onrestart</span> <span class="title">restart</span> <span class="title">zygote</span></span></span><br><span class="line"><span class="class">    <span class="title">writepid</span> /<span class="title">dev</span>/<span class="title">cpuset</span>/<span class="title">foreground</span>/<span class="title">tasks</span> /<span class="title">dev</span>/<span class="title">stune</span>/<span class="title">foreground</span>/<span class="title">tasks</span></span></span><br></pre></td></tr></table></figure>
<p>前文说过 service 的启动和类别名相关，这里两个 zygote service 的类别名都是 main，所以要想知道 zygote 怎么被启动的我们可以在 init.rc 中搜索 class_start main，可以发现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">on nonencrypted</span><br><span class="line">    # A/B update verifier that marks a successful boot.</span><br><span class="line">    exec - root -- /system/bin/update_verifier nonencrypted</span><br><span class="line">    class_start main</span><br><span class="line">    class_start late_start</span><br></pre></td></tr></table></figure>
<p>从这里我们可以了解到当 nonencrypted 这个触发器被触发的时候 zygote 就会被启动，所以启动 zygote 的问题就转变为<strong>这个触发器什么时候执行？class_start 对应的处理函数是什么？</strong>要想知道答案，必须回到 init.cpp 的解析过程当中</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Parser&amp; parser = Parser::<span class="built_in">GetInstance</span>();</span><br><span class="line">parser.<span class="built_in">AddSectionParser</span>(<span class="string">&quot;service&quot;</span>,std::make_unique&lt;ServiceParser&gt;());</span><br><span class="line">parser.<span class="built_in">AddSectionParser</span>(<span class="string">&quot;on&quot;</span>, std::make_unique&lt;ActionParser&gt;());</span><br><span class="line">parser.<span class="built_in">AddSectionParser</span>(<span class="string">&quot;import&quot;</span>, std::make_unique&lt;ImportParser&gt;());</span><br><span class="line">parser.<span class="built_in">ParseConfig</span>(<span class="string">&quot;/init.rc&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>init.rc 交由一个 Parser 对象进行解析，而 Parser 的实现在 system/core/init/init_parser.cpp 文件中，让我们进入到 init_parser.cpp 中查看 AddSectionParser 的实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Parser::AddSectionParser</span><span class="params">(<span class="keyword">const</span> std::string&amp; name,</span></span></span><br><span class="line"><span class="params"><span class="function">                              std::unique_ptr&lt;SectionParser&gt; parser)</span> </span>&#123;</span><br><span class="line">    section_parsers_[name] = std::<span class="built_in">move</span>(parser);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//init_parser.h 中 section_parsers_ 的定义</span></span><br><span class="line">std::map&lt;std::string, std::unique_ptr&lt;SectionParser&gt;&gt; section_parsers_;</span><br></pre></td></tr></table></figure>
<p>可以看到每一个 parser 最终被保存在 section_parsers_ 中，section_parsers_ 是什么？查看 init_parser.h 中的定义可以知道，section_parsers_ 是一个 map 集合，所以 section_parsers_ 的作用是将 parser 与对应的 Section 进行绑定。 在添加完所有的 parser 之后就会调用 Parser 的 ParseConfig 方法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Parser::ParseConfig</span><span class="params">(<span class="keyword">const</span> std::string&amp; path)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">is_dir</span>(path.<span class="built_in">c_str</span>())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">ParseConfigDir</span>(path);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">ParseConfigFile</span>(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ParseConfig 中会对 path 进行判断，如果是目录则调用 ParseConfigDir 进行递归然后再通过 ParseConfigFile 进行解析。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Parser::ParseConfigDir</span><span class="params">(<span class="keyword">const</span> std::string&amp; path)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">INFO</span>(<span class="string">&quot;Parsing directory %s...\n&quot;</span>, path.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="function">std::unique_ptr&lt;DIR, <span class="title">int</span><span class="params">(*)</span><span class="params">(DIR*)</span>&gt; <span class="title">config_dir</span><span class="params">(opendir(path.c_str()), closedir)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!config_dir) &#123;</span><br><span class="line">        <span class="built_in">ERROR</span>(<span class="string">&quot;Could not import directory &#x27;%s&#x27;\n&quot;</span>, path.<span class="built_in">c_str</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dirent* current_file;</span><br><span class="line">    <span class="keyword">while</span> ((current_file = <span class="built_in">readdir</span>(config_dir.<span class="built_in">get</span>()))) &#123;</span><br><span class="line">        std::string current_path =</span><br><span class="line">            android::base::<span class="built_in">StringPrintf</span>(<span class="string">&quot;%s/%s&quot;</span>, path.<span class="built_in">c_str</span>(), current_file-&gt;d_name);</span><br><span class="line">        <span class="comment">// Ignore directories and only process regular files.</span></span><br><span class="line">        <span class="keyword">if</span> (current_file-&gt;d_type == DT_REG) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">ParseConfigFile</span>(current_path)) &#123; <span class="comment">//调用 ParseConfigFile 进行解析</span></span><br><span class="line">                <span class="built_in">ERROR</span>(<span class="string">&quot;could not import file &#x27;%s&#x27;\n&quot;</span>, current_path.<span class="built_in">c_str</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终在 ParseConfigFile 中通过 ParseData 进行解析</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Parser::ParseConfigFile</span><span class="params">(<span class="keyword">const</span> std::string&amp; path)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">INFO</span>(<span class="string">&quot;Parsing file %s...\n&quot;</span>, path.<span class="built_in">c_str</span>());</span><br><span class="line">    Timer t;</span><br><span class="line">    std::string data;</span><br><span class="line">  <span class="comment">//从 rc 文件中读取内容保存在 data 中</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">read_file</span>(path.<span class="built_in">c_str</span>(), &amp;data)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data.<span class="built_in">push_back</span>(<span class="string">&#x27;\n&#x27;</span>); <span class="comment">// <span class="doctag">TODO:</span> fix parse_config.</span></span><br><span class="line">    <span class="built_in">ParseData</span>(path, data); <span class="comment">//调用 ParseData 进行解析</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ParseData 解析过程如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Parser::ParseData</span><span class="params">(<span class="keyword">const</span> std::string&amp; filename, <span class="keyword">const</span> std::string&amp; data)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span> Use a parser with const input and remove this copy</span></span><br><span class="line">    <span class="function">std::vector&lt;<span class="keyword">char</span>&gt; <span class="title">data_copy</span><span class="params">(data.begin(), data.end())</span></span>; <span class="comment">//将 rc 中的内容保存在 vector 中便于逐个字符进行解析</span></span><br><span class="line">    data_copy.<span class="built_in">push_back</span>(<span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">    parse_state state;</span><br><span class="line">    state.filename = filename.<span class="built_in">c_str</span>();</span><br><span class="line">    state.line = <span class="number">0</span>;</span><br><span class="line">    state.ptr = &amp;data_copy[<span class="number">0</span>];</span><br><span class="line">    state.nexttoken = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    SectionParser* section_parser = <span class="literal">nullptr</span>;</span><br><span class="line">    std::vector&lt;std::string&gt; args; <span class="comment">//存放的是每行的内容</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (<span class="built_in">next_token</span>(&amp;state)) &#123;</span><br><span class="line">        <span class="keyword">case</span> T_EOF:</span><br><span class="line">            <span class="keyword">if</span> (section_parser) &#123;</span><br><span class="line">                section_parser-&gt;<span class="built_in">EndSection</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">case</span> T_NEWLINE:</span><br><span class="line">            state.line++;</span><br><span class="line">            <span class="comment">//如果 args 为空则不进行解析（rc 文件中间存在空行，所以需要判断）</span></span><br><span class="line">            <span class="keyword">if</span> (args.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//判断是不是一个 section 的起始位置（通过能不能获得解析器，可以判断 args[0] 是不是 service、on、import 其中一个）</span></span><br><span class="line">            <span class="keyword">if</span> (section_parsers_.<span class="built_in">count</span>(args[<span class="number">0</span>])) &#123;</span><br><span class="line">                <span class="keyword">if</span> (section_parser) &#123;</span><br><span class="line">                  <span class="comment">//如果上次存在解析则结束解析</span></span><br><span class="line">                    section_parser-&gt;<span class="built_in">EndSection</span>();</span><br><span class="line">                &#125;</span><br><span class="line">              <span class="comment">//取出对应的解析器</span></span><br><span class="line">                section_parser = section_parsers_[args[<span class="number">0</span>]].<span class="built_in">get</span>();</span><br><span class="line">                std::string ret_err;</span><br><span class="line">              <span class="comment">//进行 Section 解析</span></span><br><span class="line">                <span class="keyword">if</span> (!section_parser-&gt;<span class="built_in">ParseSection</span>(args, &amp;ret_err)) &#123;</span><br><span class="line">                    <span class="built_in">parse_error</span>(&amp;state, <span class="string">&quot;%s\n&quot;</span>, ret_err.<span class="built_in">c_str</span>());</span><br><span class="line">                    section_parser = <span class="literal">nullptr</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (section_parser) &#123; <span class="comment">//不是的话说明 args 中是一个 section 的子块，则进行 Line 解析</span></span><br><span class="line">                std::string ret_err;</span><br><span class="line">                <span class="keyword">if</span> (!section_parser-&gt;<span class="built_in">ParseLineSection</span>(args, state.filename,</span><br><span class="line">                                                      state.line, &amp;ret_err)) &#123;</span><br><span class="line">                    <span class="built_in">parse_error</span>(&amp;state, <span class="string">&quot;%s\n&quot;</span>, ret_err.<span class="built_in">c_str</span>());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//解析完成后清空</span></span><br><span class="line">            args.<span class="built_in">clear</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> T_TEXT:</span><br><span class="line">            args.<span class="built_in">emplace_back</span>(state.text);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ParseData 中通过调用 system/core/init/parser.cpp 中的 next_token 函数对 rc 内容进行分析，如果是 T_TEXT 则会保存在 args 中，如果是 T_NEWLINE 则会交由对应的解析器进行解析。init.rc 的大致解析过程如此，但是到这里我们依旧没能找到所需要的答案，所以需要继续查看 ActionParser 和 ServiceParser 的解析过程。</p>
<h4 id="actionparser-解析过程">ActionParser 解析过程</h4>
<p>ActionParser 位于 system/core/init/action.cpp 中，从前面的解析过程来看，最后的解析总是调用了对应 parser 的 ParseSection、ParseLineSection 以及 EndSection，所以我们主要看下这两个部分 ParseSection 的主要工作是创建 Action 对象，为对象添加触发器，并将 action_ 移动至当前 Action 对象</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ActionParser::ParseSection</span><span class="params">(<span class="keyword">const</span> std::vector&lt;std::string&gt;&amp; args,</span></span></span><br><span class="line"><span class="params"><span class="function">                                std::string* err)</span> </span>&#123;</span><br><span class="line">    <span class="function">std::vector&lt;std::string&gt; <span class="title">triggers</span><span class="params">(args.begin() + <span class="number">1</span>, args.end())</span></span>;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> action = std::make_unique&lt;Action&gt;(<span class="literal">false</span>);</span><br><span class="line">  <span class="comment">//为 action 增加触发器</span></span><br><span class="line">    <span class="keyword">if</span> (!action-&gt;<span class="built_in">InitTriggers</span>(triggers, err)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//将 aciton_ 指针移动到当前的 action</span></span><br><span class="line">    action_ = std::<span class="built_in">move</span>(action);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//action_ 在 action.h 中的定义</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  std::unique_ptr&lt;Action&gt; action_;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>ParseLineSection 的主要工作为查找对应 command 的处理函数，将创建的 Command 对象添加到到commands_，由于 commands_ 是 Action 的一个域，所以实际上 ParseLineSection 在填充当前 Action 对象的域。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ActionParser::ParseLineSection</span><span class="params">(<span class="keyword">const</span> std::vector&lt;std::string&gt;&amp; args,</span></span></span><br><span class="line"><span class="params"><span class="function">                                    <span class="keyword">const</span> std::string&amp; filename, <span class="keyword">int</span> line,</span></span></span><br><span class="line"><span class="params"><span class="function">                                    std::string* err)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">  <span class="comment">//将解析的 command 增加到当前 action 的 commands_ 中</span></span><br><span class="line">    <span class="keyword">return</span> action_ ? action_-&gt;<span class="built_in">AddCommand</span>(args, filename, line, err) : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Action::AddCommand</span><span class="params">(<span class="keyword">const</span> std::vector&lt;std::string&gt;&amp; args,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="keyword">const</span> std::string&amp; filename, <span class="keyword">int</span> line, std::string* err)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  <span class="comment">//查找对应的 command 的处理函数</span></span><br><span class="line">    <span class="keyword">auto</span> function = function_map_-&gt;<span class="built_in">FindFunction</span>(args[<span class="number">0</span>], args.<span class="built_in">size</span>() - <span class="number">1</span>, err);</span><br><span class="line">    <span class="keyword">if</span> (!function) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">AddCommand</span>(function, args, filename, line);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Action::AddCommand</span><span class="params">(BuiltinFunction f,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="keyword">const</span> std::vector&lt;std::string&gt;&amp; args,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="keyword">const</span> std::string&amp; filename, <span class="keyword">int</span> line)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//commands_ 增加 command 和对应的处理函数</span></span><br><span class="line">    commands_.<span class="built_in">emplace_back</span>(f, args, filename, line);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//commands_ 在 action.h 中的定义</span></span><br><span class="line">std::vector&lt;Command&gt; commands_;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Command 在 action.h 中的定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Command</span>(BuiltinFunction f, <span class="keyword">const</span> std::vector&lt;std::string&gt;&amp; args,</span><br><span class="line">            <span class="keyword">const</span> std::string&amp; filename, <span class="keyword">int</span> line);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">InvokeFunc</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">std::string <span class="title">BuildCommandString</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">std::string <span class="title">BuildSourceString</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    BuiltinFunction func_;</span><br><span class="line">    std::vector&lt;std::string&gt; args_;</span><br><span class="line">    std::string filename_;</span><br><span class="line">    <span class="keyword">int</span> line_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>EndSection 的主要工作是将解析完成的 action （域填充完毕的 Action 对象）添加到 ActionManager 的 acitons_ 中</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ActionParser::EndSection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (action_ &amp;&amp; action_-&gt;<span class="built_in">NumCommands</span>() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        ActionManager::<span class="built_in">GetInstance</span>().<span class="built_in">AddAction</span>(std::<span class="built_in">move</span>(action_));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ActionManager::AddAction</span><span class="params">(std::unique_ptr&lt;Action&gt; action)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (old_action_it != actions_.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        (*old_action_it)-&gt;<span class="built_in">CombineAction</span>(*action);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//将解析之后的 action 对象增加到 actions_ 链表中，用于遍历执行。</span></span><br><span class="line">        actions_.<span class="built_in">emplace_back</span>(std::<span class="built_in">move</span>(action));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ActionManager 在 action.h 中的定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActionManager</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> ActionManager&amp; <span class="title">GetInstance</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">AddAction</span><span class="params">(std::unique_ptr&lt;Action&gt; action)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">QueueEventTrigger</span><span class="params">(<span class="keyword">const</span> std::string&amp; trigger)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">QueuePropertyTrigger</span><span class="params">(<span class="keyword">const</span> std::string&amp; name, <span class="keyword">const</span> std::string&amp; value)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">QueueAllPropertyTriggers</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">QueueBuiltinAction</span><span class="params">(BuiltinFunction func, <span class="keyword">const</span> std::string&amp; name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ExecuteOneCommand</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">HasMoreCommands</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DumpState</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">ActionManager</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ActionManager</span>(ActionManager <span class="keyword">const</span>&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span>=(ActionManager <span class="keyword">const</span>&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">    std::vector&lt;std::unique_ptr&lt;Action&gt;&gt; actions_; <span class="comment">//actions_ 的定义</span></span><br><span class="line">    std::queue&lt;std::unique_ptr&lt;Trigger&gt;&gt; trigger_queue_;</span><br><span class="line">    std::queue&lt;<span class="keyword">const</span> Action*&gt; current_executing_actions_;</span><br><span class="line">    std::<span class="keyword">size_t</span> current_command_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>通过以上分析我们能够知道 class_start 的处理函数和 function_map_ 相关，查看 function_map_ 在 action.h 中的定义可以看到</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> KeywordMap&lt;BuiltinFunction&gt;* function_map_;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">set_function_map</span><span class="params">(<span class="keyword">const</span> KeywordMap&lt;BuiltinFunction&gt;* function_map)</span> </span>&#123;</span><br><span class="line">    function_map_ = function_map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以要想知道处理函数是什么只需要知道 set_function_map 在哪里调用？让我们再次回到 init.cpp 中，可以看到</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> BuiltinFunctionMap function_map;</span><br><span class="line">Action::<span class="built_in">set_function_map</span>(&amp;function_map);</span><br></pre></td></tr></table></figure>
<p>接下来需要找到 BuiltinFunctionMap，BuiltinFunctionMap 的实现我们可以在 builtins.cpp 中找到，其具体的实现 system/core/init/builtins.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">BuiltinFunctionMap::Map&amp; <span class="title">BuiltinFunctionMap::map</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constexpr</span> std::<span class="keyword">size_t</span> kMax = std::numeric_limits&lt;std::<span class="keyword">size_t</span>&gt;::<span class="built_in">max</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> Map builtin_functions = &#123;</span><br><span class="line">        ...</span><br><span class="line">        &#123;<span class="string">&quot;class_start&quot;</span>,             &#123;<span class="number">1</span>,     <span class="number">1</span>,    do_class_start&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;class_stop&quot;</span>,              &#123;<span class="number">1</span>,     <span class="number">1</span>,    do_class_stop&#125;&#125;,</span><br><span class="line">        ...</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> builtin_functions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到这里就可以确定 class_start 对应的处理函数是 do_class_start，do_class_start 也可在 builtins.cpp 中找到。 简单总结下解析 Action 的过程，<strong>实际上是创建一个 Action 对象，然后为 Action 对象添加 Trigger 以及对应的 Command，其中在添加 Command 的过程中还为 Command 指定了处理函数，最后在将 Action 对象增加到 ActionManager vector 类型的 actions_ 链表当中去。</strong></p>
<h4 id="serviceparser-解析过程">ServiceParser 解析过程</h4>
<p>与前文一致，接着看那三个函数 ParseSection 的主要工作是创建 Service 对象，将 service_ 移动至当前 Service 对象</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ServiceParser::ParseSection</span><span class="params">(<span class="keyword">const</span> std::vector&lt;std::string&gt;&amp; args,</span></span></span><br><span class="line"><span class="params"><span class="function">                                 std::string* err)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  <span class="comment">//获取服务名</span></span><br><span class="line">    <span class="keyword">const</span> std::string&amp; name = args[<span class="number">1</span>];</span><br><span class="line">    ...</span><br><span class="line">  <span class="comment">//保存服务名外的参数（如执行路径等）</span></span><br><span class="line">    <span class="function">std::vector&lt;std::string&gt; <span class="title">str_args</span><span class="params">(args.begin() + <span class="number">2</span>, args.end())</span></span>;</span><br><span class="line">  <span class="comment">//将 service_ 指针指向当前 Service 对象</span></span><br><span class="line">    service_ = std::make_unique&lt;Service&gt;(name, <span class="string">&quot;default&quot;</span>, str_args);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//service_ 在 service.h 中的定义</span></span><br><span class="line">std::unique_ptr&lt;Service&gt; service_;</span><br></pre></td></tr></table></figure>
<p>ParseLineSection 的主要工作是为 Service 中每个 option 指定处理函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ServiceParser::ParseLineSection</span><span class="params">(<span class="keyword">const</span> std::vector&lt;std::string&gt;&amp; args,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="keyword">const</span> std::string&amp; filename, <span class="keyword">int</span> line,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     std::string* err)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">  <span class="comment">//为 Service 中的每一个 Option 指定处理函数</span></span><br><span class="line">    <span class="keyword">return</span> service_ ? service_-&gt;<span class="built_in">HandleLine</span>(args, err) : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Service::HandleLine</span><span class="params">(<span class="keyword">const</span> std::vector&lt;std::string&gt;&amp; args, std::string* err)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> OptionHandlerMap handler_map;</span><br><span class="line">  <span class="comment">//寻找对应 option 的处理函数</span></span><br><span class="line">    <span class="keyword">auto</span> handler = handler_map.<span class="built_in">FindFunction</span>(args[<span class="number">0</span>], args.<span class="built_in">size</span>() - <span class="number">1</span>, err);</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span>-&gt;*handler)(args, err);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>EndSection 的主要工作是将解析完成的 service （域填充完毕的 Service 对象）添加到 ServiceManager 的 services_ 中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> ServiceParser::EndSection() &#123;</span><br><span class="line">    <span class="keyword">if</span> (service_) &#123;</span><br><span class="line">        ServiceManager::GetInstance().AddService(std::move(service_));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ServiceManager::AddService(std::unique_ptr&lt;Service&gt; service) &#123;</span><br><span class="line">    Service* old_service = FindServiceByName(service-&gt;name());</span><br><span class="line">    <span class="keyword">if</span> (old_service) &#123;</span><br><span class="line">        ERROR(<span class="string">&quot;ignored duplicate definition of service &#x27;%s&#x27;&quot;</span>,</span><br><span class="line">              service-&gt;name().c_str());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//将解析之后 service 对象增加到 services_ 链表中</span></span><br><span class="line">    services_.emplace_back(std::move(service));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ServiceManager 在 service.h 中的定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServiceManager</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> ServiceManager&amp; GetInstance();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">AddService</span><span class="params">(std::unique_ptr&lt;Service&gt; service)</span></span>;</span><br><span class="line">    Service* MakeExecOneshotService(<span class="keyword">const</span> std::vector&lt;std::string&gt;&amp; args);</span><br><span class="line">    Service* FindServiceByName(<span class="keyword">const</span> std::string&amp; name) <span class="keyword">const</span>;</span><br><span class="line">    Service* FindServiceByPid(pid_t pid) <span class="keyword">const</span>;</span><br><span class="line">    Service* FindServiceByKeychord(<span class="keyword">int</span> keychord_id) <span class="keyword">const</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ForEachService</span><span class="params">(std::function&lt;<span class="keyword">void</span>(Service*)</span>&gt; callback) <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ForEachServiceInClass</span><span class="params">(<span class="keyword">const</span> std::string&amp; classname,</span></span></span><br><span class="line"><span class="params"><span class="function">                               <span class="keyword">void</span> (*func)</span><span class="params">(Service* svc)</span>) <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ForEachServiceWithFlags</span><span class="params">(unsigned matchflags,</span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="keyword">void</span> (*func)</span><span class="params">(Service* svc)</span>) <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ReapAnyOutstandingChildren</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RemoveService</span><span class="params">(<span class="keyword">const</span> Service&amp; svc)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DumpState</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ServiceManager();</span><br><span class="line">    <span class="function">bool <span class="title">ReapOneProcess</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> exec_count_; <span class="comment">// Every service needs a unique name.</span></span><br><span class="line">    std::vector&lt;std::unique_ptr&lt;Service&gt;&gt; services_; <span class="comment">//services_ 的定义</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>对应的可以看下 option 的处理函数，虽然 OptionHandlerMap 与启动 zygote 无关，但是还是看下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Service::OptionHandlerMap::Map&amp; Service::OptionHandlerMap::<span class="built_in">map</span>() <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">constexpr</span> std::<span class="keyword">size_t</span> kMax = std::numeric_limits&lt;std::<span class="keyword">size_t</span>&gt;::<span class="built_in">max</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> Map option_handlers = &#123;</span><br><span class="line">        &#123;<span class="string">&quot;class&quot;</span>,       &#123;<span class="number">1</span>,     <span class="number">1</span>,    &amp;Service::HandleClass&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;console&quot;</span>,     &#123;<span class="number">0</span>,     <span class="number">0</span>,    &amp;Service::HandleConsole&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;critical&quot;</span>,    &#123;<span class="number">0</span>,     <span class="number">0</span>,    &amp;Service::HandleCritical&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;disabled&quot;</span>,    &#123;<span class="number">0</span>,     <span class="number">0</span>,    &amp;Service::HandleDisabled&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;group&quot;</span>,       &#123;<span class="number">1</span>,     NR_SVC_SUPP_GIDS + <span class="number">1</span>, &amp;Service::HandleGroup&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;ioprio&quot;</span>,      &#123;<span class="number">2</span>,     <span class="number">2</span>,    &amp;Service::HandleIoprio&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;keycodes&quot;</span>,    &#123;<span class="number">1</span>,     kMax, &amp;Service::HandleKeycodes&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;oneshot&quot;</span>,     &#123;<span class="number">0</span>,     <span class="number">0</span>,    &amp;Service::HandleOneshot&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;onrestart&quot;</span>,   &#123;<span class="number">1</span>,     kMax, &amp;Service::HandleOnrestart&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;seclabel&quot;</span>,    &#123;<span class="number">1</span>,     <span class="number">1</span>,    &amp;Service::HandleSeclabel&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;setenv&quot;</span>,      &#123;<span class="number">2</span>,     <span class="number">2</span>,    &amp;Service::HandleSetenv&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;socket&quot;</span>,      &#123;<span class="number">3</span>,     <span class="number">6</span>,    &amp;Service::HandleSocket&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;user&quot;</span>,        &#123;<span class="number">1</span>,     <span class="number">1</span>,    &amp;Service::HandleUser&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;writepid&quot;</span>,    &#123;<span class="number">1</span>,     kMax, &amp;Service::HandleWritepid&#125;&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> option_handlers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>与解析 Action 类似，<strong>在整个过程中先创建 Service 对象，解析出 Service 的名字和对应的参数添加到对象当中，并且给每个 Option 指定了相应的处理函数</strong> 到这里 rc 文件的解析就结束了，通过 rc 文件的解析使得每个 action 都有了对应的执行函数，<strong>所以接下来的问题是这些 action 是如何被触发的（也即是 command 命令是如何被执行的）？</strong></p>
<h4 id="actions-的触发">Actions 的触发</h4>
<p>让我们继续回到 init.cpp 中</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ActionManager&amp; am = ActionManager::<span class="built_in">GetInstance</span>();</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!waiting_for_exec) &#123;</span><br><span class="line">        am.<span class="built_in">ExecuteOneCommand</span>();</span><br><span class="line">        <span class="built_in">restart_processes</span>();</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到 action 的 command 的执行是通过 ActionManager 的 ExecuteOneCommand 函数，而ActionManager 的 ExecuteOneCommand 最终调用了 Action 的 ExecuteOneCommand system/core/init/action.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ActionManager::ExecuteOneCommand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//循环等待，直到队列中不为空</span></span><br><span class="line">    <span class="keyword">while</span> (current_executing_actions_.<span class="built_in">empty</span>() &amp;&amp; !trigger_queue_.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="comment">//遍历 actions_</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; action : actions_) &#123;</span><br><span class="line">            <span class="keyword">if</span> (trigger_queue_.<span class="built_in">front</span>()-&gt;<span class="built_in">CheckTriggers</span>(*action)) &#123;</span><br><span class="line">                <span class="comment">//将 action 加入到 current_executing_actions_ 中</span></span><br><span class="line">                current_executing_actions_.<span class="built_in">emplace</span>(action.<span class="built_in">get</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        trigger_queue_.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每次只执行一个 action</span></span><br><span class="line">    <span class="keyword">auto</span> action = current_executing_actions_.<span class="built_in">front</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (current_command_ == <span class="number">0</span>) &#123;</span><br><span class="line">        std::string trigger_name = action-&gt;<span class="built_in">BuildTriggersString</span>();</span><br><span class="line">        <span class="built_in">INFO</span>(<span class="string">&quot;processing action (%s)\n&quot;</span>, trigger_name.<span class="built_in">c_str</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行 action 的 command</span></span><br><span class="line">    action-&gt;<span class="built_in">ExecuteOneCommand</span>(current_command_);</span><br><span class="line">  </span><br><span class="line">    ++current_command_;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Action::ExecuteOneCommand</span><span class="params">(std::<span class="keyword">size_t</span> command)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">  <span class="comment">//执行 action 对象中保存的 command</span></span><br><span class="line">    <span class="built_in">ExecuteCommand</span>(commands_[command]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Action::ExecuteCommand</span><span class="params">(<span class="keyword">const</span> Command&amp; command)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    Timer t;</span><br><span class="line">  <span class="comment">//调用 command 对应的处理函数</span></span><br><span class="line">    <span class="keyword">int</span> result = command.<span class="built_in">InvokeFunc</span>();</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过上述分析可以知道，init 进程最终进入到无限循环中，然后按照 ActionManager 中 actions_ 保存的 action 顺序依次对每个 Action 进行处理，而在这个过程中 system/core/init/builtins.cpp 下用于启动 zygote 的 do_class_start 函数将会被执行</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">do_class_start</span><span class="params">(<span class="keyword">const</span> std::vector&lt;std::string&gt;&amp; args)</span> </span>&#123;</span><br><span class="line">    ServiceManager::<span class="built_in">GetInstance</span>().</span><br><span class="line">        <span class="built_in">ForEachServiceInClass</span>(args[<span class="number">1</span>], [] (Service* s) &#123; s-&gt;<span class="built_in">StartIfNotDisabled</span>(); &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>do_class_start 函数中调用 Service 的 StartIfNotDisabled，StartIfNotDisabled 在 service.cpp 的实现如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Service::StartIfNotDisabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(flags_ &amp; SVC_DISABLED)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Start</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        flags_ |= SVC_DISABLED_START;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>StartIfNotDisabled 最终调用了 Service 的 Start 函数，Start 函数创建了 zygote 的进程，并且执行了 init.zygote64_32.rc 中定义的执行路径下的文件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Service::Start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ....</span><br><span class="line">   <span class="comment">//创建子进程</span></span><br><span class="line">    <span class="keyword">pid_t</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">        ...</span><br><span class="line">       <span class="comment">//执行对应 service 对应的执行文件，args_[0].c_str() 就是执行路径</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">execve</span>(args_[<span class="number">0</span>].<span class="built_in">c_str</span>(), (<span class="keyword">char</span>**) &amp;strs[<span class="number">0</span>], (<span class="keyword">char</span>**) ENV) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">ERROR</span>(<span class="string">&quot;cannot execve(&#x27;%s&#x27;): %s\n&quot;</span>, args_[<span class="number">0</span>].<span class="built_in">c_str</span>(), <span class="built_in">strerror</span>(errno));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _exit(<span class="number">127</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在完成这一切之后将会进入 frameworks/base/cmds/app_process/app_main.cpp 中</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* <span class="keyword">const</span> argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ....</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (zygote) &#123;</span><br><span class="line">      <span class="comment">//启动 zygote</span></span><br><span class="line">        runtime.<span class="built_in">start</span>(<span class="string">&quot;com.android.internal.os.ZygoteInit&quot;</span>, args, zygote);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className) &#123;</span><br><span class="line">        runtime.<span class="built_in">start</span>(<span class="string">&quot;com.android.internal.os.RuntimeInit&quot;</span>, args, zygote);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Error: no class name or --zygote supplied.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">app_usage</span>();</span><br><span class="line">        <span class="built_in">LOG_ALWAYS_FATAL</span>(<span class="string">&quot;app_process: no class name or --zygote supplied.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到 zygote 最终在 app_main 的 main 函数中被启动。</p>
<h2 id="总结">总结</h2>
<p>到这里我们就能够回答对 init 部分相关的问题了 1. init 的作用 init 是系统中的第一个用户进程，它的主要作用是<strong>创建用户空间文件夹并挂载、启动属性服务、解析 init.rc 文件并启动 zygote 进程</strong>。 2. init 启动 zygote 的过程 init 进程通过解析 init.rc 文件将 action 保存在 ActionManager 的 actions_ 链表中，然后通过遍历 actions_ 链表，执行 action 命令对应的处理函数，从而转至 builtins.cpp 的 do_class_start 函数，之后通过 Service 的 StartIfNotDisabled 调用 Service 的 Start 函数，最终通过 Start 函数创建 zygote 进程，执行对应的 app_main.cpp 文件启动 zygote。</p>
<h2 id="thanks">Thanks</h2>
<ol type="1">
<li><span class="exturl" data-url="aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2F1Z2FtZWxhL2FydGljbGUvZGV0YWlscy81MjEzMzE4Ng==">Android7.0 init进程源码分析<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9uZ2JvY2hlbjEyMjMvYXJ0aWNsZS9kZXRhaWxzLzU2MzMxNjkw">Android Init Language(android初始化语言)<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaXRhY2hpODUvYXJ0aWNsZS9kZXRhaWxzLzU0NzgzNTA2">Android系统启动流程（一）解析init进程启动过程<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>SourceCode Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 启动过程简析（二）之 zygote 进程</title>
    <url>/posts/32f3dbe6.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>在 <a href="/posts/da66bd78.html" title="Android启动过程简析（一）">Android启动过程简析（一）</a>中我们已经分析过了 init 进程是如何被启动的，本篇文章将会继续分析 zygote 启动过程以及作用。<span id="more"></span></p>
<h2 id="zygote-启动过程">zygote 启动过程</h2>
<p>zygote 进程创建之后会首先进入到 app_main.cpp 的 main 函数当中去，所以首先对 app_main 进行分析</p>
<h3 id="app_main-分析">app_main 分析</h3>
<p>frameworks/base/cmds/app_process/app_main.cpp</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* <span class="keyword">const</span> argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//创建 AppRuntime 对象</span></span><br><span class="line">    <span class="function">AppRuntime <span class="title">runtime</span><span class="params">(argv[<span class="number">0</span>], computeArgBlockSize(argc, argv)</span>)</span>;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析运行时参数，当遇到无法识别的选项时停止</span></span><br><span class="line">    bool zygote = <span class="keyword">false</span>;</span><br><span class="line">    bool startSystemServer = <span class="keyword">false</span>;</span><br><span class="line">    bool application = <span class="keyword">false</span>;</span><br><span class="line">    String8 niceName;</span><br><span class="line">    String8 className;</span><br><span class="line"></span><br><span class="line">    ++i;  <span class="comment">// Skip unused &quot;parent dir&quot; argument.</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; argc) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* arg = argv[i++];</span><br><span class="line">      <span class="comment">//如果传入的参数有 ”--zygote“ 则将 zygote 置为 true</span></span><br><span class="line">        <span class="keyword">if</span> (strcmp(arg, <span class="string">&quot;--zygote&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            zygote = <span class="keyword">true</span>;</span><br><span class="line">            niceName = ZYGOTE_NICE_NAME;</span><br><span class="line">          <span class="comment">//如果传入的参数有 &quot;--start-system-server&quot; 则将 startSystemServer 置为 true</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(arg, <span class="string">&quot;--start-system-server&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            startSystemServer = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(arg, <span class="string">&quot;--application&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            application = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strncmp(arg, <span class="string">&quot;--nice-name=&quot;</span>, <span class="number">12</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            niceName.setTo(arg + <span class="number">12</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strncmp(arg, <span class="string">&quot;--&quot;</span>, <span class="number">2</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            className.setTo(arg);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            --i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Vector&lt;String8&gt; args;</span><br><span class="line">  <span class="comment">//非 zygote 模式处理</span></span><br><span class="line">    <span class="keyword">if</span> (!className.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// We&#x27;re not in zygote mode, the only argument we need to pass</span></span><br><span class="line">        <span class="comment">// to RuntimeInit is the application argument.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// The Remainder of args get passed to startup class main(). Make</span></span><br><span class="line">        <span class="comment">// copies of them before we overwrite them with the process name.</span></span><br><span class="line">        args.add(application ? String8(<span class="string">&quot;application&quot;</span>) : String8(<span class="string">&quot;tool&quot;</span>));</span><br><span class="line">        runtime.setClassNameAndArgs(className, argc - i, argv + i);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//zygote 模式下的处理</span></span><br><span class="line">        maybeCreateDalvikCache();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//如果 startSystemServer 为 true 则将 &quot;start-system-server&quot; 添加到 args</span></span><br><span class="line">        <span class="keyword">if</span> (startSystemServer) &#123;</span><br><span class="line">            args.add(String8(<span class="string">&quot;start-system-server&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> prop[PROP_VALUE_MAX];</span><br><span class="line">        <span class="keyword">if</span> (property_get(ABI_LIST_PROPERTY, prop, NULL) == <span class="number">0</span>) &#123;</span><br><span class="line">            LOG_ALWAYS_FATAL(<span class="string">&quot;app_process: Unable to determine ABI list from property %s.&quot;</span>,</span><br><span class="line">                ABI_LIST_PROPERTY);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">11</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">String8 <span class="title">abiFlag</span><span class="params">(<span class="string">&quot;--abi-list=&quot;</span>)</span></span>;</span><br><span class="line">        abiFlag.append(prop);</span><br><span class="line">        args.add(abiFlag);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// In zygote mode, pass all remaining arguments to the zygote</span></span><br><span class="line">        <span class="comment">// main() method.</span></span><br><span class="line">        <span class="keyword">for</span> (; i &lt; argc; ++i) &#123;</span><br><span class="line">            args.add(String8(argv[i]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!niceName.isEmpty()) &#123;</span><br><span class="line">        runtime.setArgv0(niceName.string());</span><br><span class="line">        set_process_name(niceName.string());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//如果 zygote 为 true 则启动 zygote</span></span><br><span class="line">    <span class="keyword">if</span> (zygote) &#123;</span><br><span class="line">      <span class="comment">//通过 runtime 对象启动 zygote</span></span><br><span class="line">        runtime.start(<span class="string">&quot;com.android.internal.os.ZygoteInit&quot;</span>, args, zygote);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className) &#123;</span><br><span class="line">        runtime.start(<span class="string">&quot;com.android.internal.os.RuntimeInit&quot;</span>, args, zygote);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fprintf(stderr, <span class="string">&quot;Error: no class name or --zygote supplied.\n&quot;</span>);</span><br><span class="line">        app_usage();</span><br><span class="line">        LOG_ALWAYS_FATAL(<span class="string">&quot;app_process: no class name or --zygote supplied.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到在 main 函数中首先创建了一个 AppRuntime 对象，然后就会根据传入的参数对一些标志位进行相应的置位，这里值得注意的一个标志位是 startSystemServer，上文说过 Android 5.0 之后系统可能会启动两个 zygote 进程，而 SystemServer 只需要启动一次，所以通过这个标志位控制只在启动主 zygote 进程的时候将 &quot;start-system-server&quot; 增加到 args，然后则会通过 AppRuntime 的 start 函数调用 Java 层的 zygote 代码。</p>
<h3 id="androidruntime-分析">AndroidRuntime 分析</h3>
<p>由于 AppRuntime 继承自 AndroidRuntime，所以想要了解系统是如何调用 Java 层的 zygote 代码则需要继续了解 AndroidRuntime 的 start 函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppRuntime</span> :</span> <span class="keyword">public</span> AndroidRuntime</span><br></pre></td></tr></table></figure>
<p>AndroidRuntime 位于 frameworks/base/core/jni</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Start the Android runtime.  This involves starting the virtual machine</span></span><br><span class="line"><span class="comment"> * and calling the &quot;static void main(String[] args)&quot; method in the class</span></span><br><span class="line"><span class="comment"> * named by &quot;className&quot;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Passes the main function two arguments, the class name and the specified</span></span><br><span class="line"><span class="comment"> * options string.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AndroidRuntime::start</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* className, <span class="keyword">const</span> Vector&lt;String8&gt;&amp; options, <span class="keyword">bool</span> zygote)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">const</span> String8 <span class="title">startSystemServer</span><span class="params">(<span class="string">&quot;start-system-server&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * &#x27;startSystemServer == true&#x27; means runtime is obsolete and not run from</span></span><br><span class="line"><span class="comment">     * init.rc anymore, so we print out the boot start event here.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; options.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">      <span class="comment">//只有 startSystemServer == true，options 才会有 start-system-server</span></span><br><span class="line">        <span class="keyword">if</span> (options[i] == startSystemServer) &#123;</span><br><span class="line">           <span class="comment">/* track our progress through the boot sequence */</span></span><br><span class="line">           <span class="keyword">const</span> <span class="keyword">int</span> LOG_BOOT_PROGRESS_START = <span class="number">3000</span>;</span><br><span class="line">           <span class="built_in">LOG_EVENT_LONG</span>(LOG_BOOT_PROGRESS_START,  <span class="built_in">ns2ms</span>(<span class="built_in">systemTime</span>(SYSTEM_TIME_MONOTONIC)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">//const char* kernelHack = getenv(&quot;LD_ASSUME_KERNEL&quot;);</span></span><br><span class="line">    <span class="comment">//ALOGD(&quot;Found LD_ASSUME_KERNEL=&#x27;%s&#x27;\n&quot;, kernelHack);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* start the virtual machine */</span></span><br><span class="line">    JniInvocation jni_invocation;</span><br><span class="line">    jni_invocation.<span class="built_in">Init</span>(<span class="literal">NULL</span>);</span><br><span class="line">    JNIEnv* env;</span><br><span class="line">    <span class="comment">//创建启动 DVM</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">startVm</span>(&amp;mJavaVM, &amp;env, zygote) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">onVmCreated</span>(env);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Register android functions.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//注册 JNI 方法</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">startReg</span>(env) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">ALOGE</span>(<span class="string">&quot;Unable to register all android natives\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * We want to call main() with a String array with arguments in it.</span></span><br><span class="line"><span class="comment">     * At present we have two arguments, the class name and an option string.</span></span><br><span class="line"><span class="comment">     * Create an array to hold them.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//将 options 转化为 java 中的 String 数组</span></span><br><span class="line">    jclass stringClass;</span><br><span class="line">    jobjectArray strArray;</span><br><span class="line">    jstring classNameStr;</span><br><span class="line"></span><br><span class="line">    stringClass = env-&gt;<span class="built_in">FindClass</span>(<span class="string">&quot;java/lang/String&quot;</span>);</span><br><span class="line">    <span class="built_in">assert</span>(stringClass != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">//创建对象数组，类型为 stringClass（即 String 类型），长度为 options.size() + 1</span></span><br><span class="line">    strArray = env-&gt;<span class="built_in">NewObjectArray</span>(options.<span class="built_in">size</span>() + <span class="number">1</span>, stringClass, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">assert</span>(strArray != <span class="literal">NULL</span>);</span><br><span class="line">    classNameStr = env-&gt;<span class="built_in">NewStringUTF</span>(className);</span><br><span class="line">    <span class="built_in">assert</span>(classNameStr != <span class="literal">NULL</span>);</span><br><span class="line">    env-&gt;<span class="built_in">SetObjectArrayElement</span>(strArray, <span class="number">0</span>, classNameStr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将 options 逐个增加到对象数组当中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; options.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        jstring optionsStr = env-&gt;<span class="built_in">NewStringUTF</span>(options.<span class="built_in">itemAt</span>(i).<span class="built_in">string</span>());</span><br><span class="line">        <span class="built_in">assert</span>(optionsStr != <span class="literal">NULL</span>);</span><br><span class="line">        env-&gt;<span class="built_in">SetObjectArrayElement</span>(strArray, i + <span class="number">1</span>, optionsStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Start VM.  This thread becomes the main thread of the VM, and will</span></span><br><span class="line"><span class="comment">     * not return until the VM exits.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">char</span>* slashClassName = <span class="built_in">toSlashClassName</span>(className);</span><br><span class="line">    <span class="comment">//寻找类名为 slashClassName 的类</span></span><br><span class="line">    jclass startClass = env-&gt;<span class="built_in">FindClass</span>(slashClassName);</span><br><span class="line">    <span class="keyword">if</span> (startClass == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">ALOGE</span>(<span class="string">&quot;JavaVM unable to locate class &#x27;%s&#x27;\n&quot;</span>, slashClassName);</span><br><span class="line">        <span class="comment">/* keep going */</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//查找 main 方法，([Ljava/lang/String;)V 是 main 方法的签名</span></span><br><span class="line">        jmethodID startMeth = env-&gt;<span class="built_in">GetStaticMethodID</span>(startClass, <span class="string">&quot;main&quot;</span>,</span><br><span class="line">            <span class="string">&quot;([Ljava/lang/String;)V&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (startMeth == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">ALOGE</span>(<span class="string">&quot;JavaVM unable to find main() in &#x27;%s&#x27;\n&quot;</span>, className);</span><br><span class="line">            <span class="comment">/* keep going */</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//调用 startClass 类当中的 main 方法，传入参数 strArray</span></span><br><span class="line">            env-&gt;<span class="built_in">CallStaticVoidMethod</span>(startClass, startMeth, strArray);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">            <span class="keyword">if</span> (env-&gt;<span class="built_in">ExceptionCheck</span>())</span><br><span class="line">                <span class="built_in">threadExitUncaughtException</span>(env);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过 start 函数的注释我们可以大致了解到 <strong>start 函数的主要作用是启动虚拟机和名为 classname 的 main 方法</strong>。</p>
<p>而上文可以知道，传入的 classname 是 &quot;com.android.internal.os.ZygoteInit&quot; 。那么整个的执行流程就是：</p>
<p>首先会判断传递进来的参数是否存在 &quot;start-system-server&quot; ，如果存在则会输出启动日志，然后会通过 startVm 函数创建启动 DVM，在启动 DVM 之后会通过 startReg 函数注册 JNI 方法，在注册完毕之后会将传入的 options 参数转换为 Java 的对象数组，而之所以需要转换成对象数组是因为在于 options 需要作为 main 方法的参数传入，之后再通过传入的 className 去获得 jclass 对象，并根据 main 方法的 JNI 签名得到 jmethodID，最终通过CallStaticVoidMethod 方法完成 main 方法的调用。</p>
<h3 id="zygoteinit-分析">ZygoteInit 分析</h3>
<p>frameworks/base/core/java/com/android/internal/os</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String argv[])</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    String socketName = <span class="string">&quot;zygote&quot;</span>;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//注册 socket</span></span><br><span class="line">        registerZygoteSocket(socketName);</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//预加载类和资源</span></span><br><span class="line">        preload();</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (startSystemServer) &#123;</span><br><span class="line">            <span class="comment">//创建 SystemServer 进程</span></span><br><span class="line">            startSystemServer(abiList, socketName);</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//等待客户端请求</span></span><br><span class="line">        runSelectLoop(abiList);</span><br><span class="line">      	...</span><br><span class="line">      </span><br><span class="line">        closeServerSocket();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (MethodAndArgsCaller caller) &#123;</span><br><span class="line">        caller.run();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;Zygote died with exception&quot;</span>, ex);</span><br><span class="line">        closeServerSocket();</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>整个 main 方法的执行流程是：首先通过 registerZygoteSocket 方法对 socket 进行了注册，注册的 socket 用于和 ActivityManagerService 进行通信，然后调用 preload 方法对类和资源进行加载，之后则会调用 startSystemServer 创建 SystemServer 进程，最后通过 runSelectLoop 等待来自 ActivityManagerService 的请求。</p>
<p>这里最为关键的是 socket 以及创建 SystemServer 进程，所以我们需要进一步了解这两个部分。</p>
<h4 id="注册-socket-过程">注册 Socket 过程</h4>
<p>首先是注册 Socket 部分， registerZygoteSocket 主要是利用文件描述符创建了一个 LocalServerSocket 对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerZygoteSocket</span><span class="params">(String socketName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sServerSocket == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> fileDesc;</span><br><span class="line">      <span class="comment">//socket 名为 ANDROID_SOCKET_zygote</span></span><br><span class="line">        <span class="keyword">final</span> String fullSocketName = ANDROID_SOCKET_PREFIX + socketName;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String env = System.getenv(fullSocketName);</span><br><span class="line">            fileDesc = Integer.parseInt(env);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(fullSocketName + <span class="string">&quot; unset or invalid&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileDescriptor fd = <span class="keyword">new</span> FileDescriptor();</span><br><span class="line">            fd.setInt$(fileDesc);</span><br><span class="line">          <span class="comment">//创建 LocalServerSockt</span></span><br><span class="line">            sServerSocket = <span class="keyword">new</span> LocalServerSocket(fd);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    <span class="string">&quot;Error binding to local socket &#x27;&quot;</span> + fileDesc + <span class="string">&quot;&#x27;&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="启动-systemserver">启动 SystemServer</h4>
<p>startSystemServer 主要工作是对设置的参数进行解析，然后通过 forkSystemServer 创建 SystemServer 进程，最后在 SystemServer 进程中调用 handleSystemServerProcess 方法处理剩余工作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">startSystemServer</span><span class="params">(String abiList, String socketName)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> MethodAndArgsCaller, RuntimeException </span>&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="comment">/* Hardcoded command line to start the system server */</span></span><br><span class="line">  <span class="comment">//设置 uid 为 1000,设置 gid 为 1000，启动 com.android.server.SystemServer</span></span><br><span class="line">    String args[] = &#123;</span><br><span class="line">        <span class="string">&quot;--setuid=1000&quot;</span>,</span><br><span class="line">        <span class="string">&quot;--setgid=1000&quot;</span>,</span><br><span class="line">        <span class="comment">/// M: ANR mechanism for system_server add shell(2000) group to access</span></span><br><span class="line">        <span class="comment">///    /sys/kernel/debug/tracing/tracing_on</span></span><br><span class="line">        <span class="string">&quot;--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1021,1032,2000,&quot;</span> +</span><br><span class="line">            <span class="string">&quot;3001,3002,3003,3006,3007,3009,3010&quot;</span>,</span><br><span class="line">        <span class="string">&quot;--capabilities=&quot;</span> + capabilities + <span class="string">&quot;,&quot;</span> + capabilities,</span><br><span class="line">        <span class="string">&quot;--nice-name=system_server&quot;</span>,</span><br><span class="line">        <span class="string">&quot;--runtime-args&quot;</span>,</span><br><span class="line">        <span class="string">&quot;com.android.server.SystemServer&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    ZygoteConnection.Arguments parsedArgs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> pid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//对 args 进行解析</span></span><br><span class="line">        parsedArgs = <span class="keyword">new</span> ZygoteConnection.Arguments(args);</span><br><span class="line">        ZygoteConnection.applyDebuggerSystemProperty(parsedArgs);</span><br><span class="line">        ZygoteConnection.applyInvokeWithSystemProperty(parsedArgs);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Request to fork the system server process */</span></span><br><span class="line">      <span class="comment">//创建 SystemServer 进程</span></span><br><span class="line">        pid = Zygote.forkSystemServer(</span><br><span class="line">                parsedArgs.uid, parsedArgs.gid,</span><br><span class="line">                parsedArgs.gids,</span><br><span class="line">                parsedArgs.debugFlags,</span><br><span class="line">                <span class="keyword">null</span>,</span><br><span class="line">                parsedArgs.permittedCapabilities,</span><br><span class="line">                parsedArgs.effectiveCapabilities);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* For child process */</span></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hasSecondZygote(abiList)) &#123;</span><br><span class="line">            waitForSecondaryZygote(socketName);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//处理 SystemServer 进程剩余工作</span></span><br><span class="line">        handleSystemServerProcess(parsedArgs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="监听客户端的请求">监听客户端的请求</h4>
<p>runSelectLoop 的主要工作是通过 ZygoteConnection 的 acceptCommandPeer 方法监听客户端的请求，然后调用 runOnce 方法对来自客户端的请求进行处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">runSelectLoop</span><span class="params">(String abiList)</span> <span class="keyword">throws</span> MethodAndArgsCaller </span>&#123;</span><br><span class="line">    ArrayList&lt;FileDescriptor&gt; fds = <span class="keyword">new</span> ArrayList&lt;FileDescriptor&gt;();</span><br><span class="line">    ArrayList&lt;ZygoteConnection&gt; peers = <span class="keyword">new</span> ArrayList&lt;ZygoteConnection&gt;();</span><br><span class="line"></span><br><span class="line">    fds.add(sServerSocket.getFileDescriptor());</span><br><span class="line">    peers.add(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//循环处理连接请求</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        StructPollfd[] pollFds = <span class="keyword">new</span> StructPollfd[fds.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pollFds.length; ++i) &#123;</span><br><span class="line">            pollFds[i] = <span class="keyword">new</span> StructPollfd();</span><br><span class="line">            pollFds[i].fd = fds.get(i);</span><br><span class="line">            pollFds[i].events = (<span class="keyword">short</span>) POLLIN;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Os.poll(pollFds, -<span class="number">1</span>);<span class="comment">//无限等待能够进行 I/O 操作</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ErrnoException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;poll failed&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pollFds.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="comment">//说明没有来自客户端的连接请求或数据处理请求</span></span><br><span class="line">            <span class="keyword">if</span> ((pollFds[i].revents &amp; POLLIN) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;<span class="comment">//处理来自客户端的连接请求</span></span><br><span class="line">                ZygoteConnection newPeer = acceptCommandPeer(abiList);</span><br><span class="line">                peers.add(newPeer);</span><br><span class="line">                fds.add(newPeer.getFileDesciptor());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">boolean</span> done = peers.get(i).runOnce();<span class="comment">//处理客户端数据处理请求，创建对应的进程</span></span><br><span class="line">                <span class="keyword">if</span> (done) &#123;<span class="comment">//处理完毕则进行移除</span></span><br><span class="line">                    peers.remove(i);</span><br><span class="line">                    fds.remove(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="处理客户端请求">处理客户端请求</h4>
<p>对于 runOnce 而言主要做的工作是从连接中读取参数，然后根据参数创建相应的进程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">runOnce</span><span class="params">()</span> <span class="keyword">throws</span> ZygoteInit.MethodAndArgsCaller </span>&#123;</span><br><span class="line"></span><br><span class="line">    String args[];</span><br><span class="line">    Arguments parsedArgs = <span class="keyword">null</span>;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        args = readArgumentList();<span class="comment">//读取参数</span></span><br><span class="line">        descriptors = mSocket.getAncillaryFileDescriptors();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        Log.w(TAG, <span class="string">&quot;IOException on command socket &quot;</span> + ex.getMessage());</span><br><span class="line">        closeSocket();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (args == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// EOF reached.</span></span><br><span class="line">        closeSocket();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        parsedArgs = <span class="keyword">new</span> Arguments(args);<span class="comment">//构造 Arguments 对象</span></span><br><span class="line">      </span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//创建进程</span></span><br><span class="line">        pid = Zygote.forkAndSpecialize(parsedArgs.uid, parsedArgs.gid, parsedArgs.gids,</span><br><span class="line">                parsedArgs.debugFlags, rlimits, parsedArgs.mountExternal, parsedArgs.seInfo,</span><br><span class="line">                parsedArgs.niceName, fdsToClose, parsedArgs.instructionSet,</span><br><span class="line">                parsedArgs.appDataDir);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ErrnoException ex) &#123;</span><br><span class="line">        logAndPrintError(newStderr, <span class="string">&quot;Exception creating pipe&quot;</span>, ex);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">        logAndPrintError(newStderr, <span class="string">&quot;Invalid zygote arguments&quot;</span>, ex);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ZygoteSecurityException ex) &#123;</span><br><span class="line">        logAndPrintError(newStderr,</span><br><span class="line">                <span class="string">&quot;Zygote security policy prevents request: &quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// in child</span></span><br><span class="line">            IoUtils.closeQuietly(serverPipeFd);</span><br><span class="line">            serverPipeFd = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//进入子进程的处理流程</span></span><br><span class="line">            handleChildProc(parsedArgs, descriptors, childPipeFd, newStderr);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// should never get here, the child is expected to either</span></span><br><span class="line">            <span class="comment">// throw ZygoteInit.MethodAndArgsCaller or exec().</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// in parent...pid of &lt; 0 means failure</span></span><br><span class="line">            IoUtils.closeQuietly(childPipeFd);</span><br><span class="line">            childPipeFd = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> handleParentProc(pid, descriptors, serverPipeFd, parsedArgs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        IoUtils.closeQuietly(childPipeFd);</span><br><span class="line">        IoUtils.closeQuietly(serverPipeFd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结">总结</h2>
<p>到这里我们大致能够知晓 Zygote 进程的启动过程和主要作用了：</p>
<ol type="1">
<li>系统在启动 Zygote 的过程中首先启动了虚拟机，然后通过 JNI 调用了 ZygoteInit 中的 main 方法，由此系统从 C++ 的 FrameWork 层到了 Java 的 FrameWork 层，之后在则注册了用于和 ActvityManagerService 通信的 Socket，完成注册之后则会调用 startSystemServer 启动 SystemServer 进程，最后 Zygote 进程将会通过 runSelectLoop 对来自客户端的连接进行监听。</li>
<li>总的来说 Zygote 的主要作用启动 SystemServer 进程以及根据客户端的连接创建相应的进程。</li>
</ol>
<h2 id="thanks">Thanks</h2>
<ol type="1">
<li><span class="exturl" data-url="aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaXRhY2hpODUvYXJ0aWNsZS9kZXRhaWxzLzU1MDQ3MTA0">Android系统启动流程（二）解析Zygote进程启动过程<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2dpdHl1YW4uY29tLzIwMTYvMDIvMTMvYW5kcm9pZC16eWdvdGUv">Android系统启动-zygote篇<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>SourceCode Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础之注解</title>
    <url>/posts/7f462002.html</url>
    <content><![CDATA[<h2 id="问题">问题</h2>
<p>关于注解首先请思考一下以下问题：</p>
<ul>
<li>注解是什么？</li>
<li>注解的主要使用场景？</li>
<li>注解可以分为哪些类型？</li>
<li>注解的处理过程？</li>
</ul>
<p>接下来我们将对这几个问题进行探讨<span id="more"></span></p>
<h2 id="注解简介">注解简介</h2>
<blockquote>
<p><em>Annotations</em>, a form of metadata, provide data about a program that is not part of the program itself. Annotations have no direct effect on the operation of the code they annotate.</p>
</blockquote>
<p>上述是官方给出的关于注解的定义，大致意思是注解是<strong>元数据</strong>（MetaData）的一种形式，它用于提供一些和程序元素有关的元数据，这些数据本身不属于程序，并且也不会直接影响程序的操作。 为了更直观的理解注解的概念，我们还需要进一步了解元数据这个概念，关于元数据 Wiki 上的描述如下：</p>
<blockquote>
<p><strong>Metadata</strong> is &quot;data [information] that provides information about other data&quot;，For example, a digital image may include metadata that describes how large the picture is, the color depth, the image resolution, when the image was created, the shutter speed, and other data.</p>
</blockquote>
<p>元数据是描述数据的数据，对于一张相片而言元数据包括相片的大小、色彩深度、图片的分辨率、图片建立时间以及快门速度等相关数据。 结合两者可以得到：<strong>注解是一种用于描述程序元素信息的修饰符，可以用来修饰包、类、构造器、方法、成员变量、参数、局部变量。</strong> 这里再结合具体的场景进行理解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@BindView(R.id.toolbar)</span></span><br><span class="line"><span class="keyword">public</span> Toolbar mToolbar;</span><br></pre></td></tr></table></figure>
<p>对于成员变量 mToolbar 而言，其基本的信息包含 width、heigth、id，通过注解我们能够很明确的描述它的 id 信息。</p>
<h2 id="注解的主要使用场景">注解的主要使用场景</h2>
<p>要明白注解的使用场景，首先需要了解的是注解的主要作用：</p>
<blockquote>
<ul>
<li><p><strong>Information for the compiler</strong>— Annotations can be used by the compiler to detect errors or suppress warnings.</p></li>
<li><p><strong>Compile-time and deployment-time processing</strong>— Software tools can process annotation information to generate code, XML files, and so forth.</p></li>
<li><p><strong>Runtime processing</strong>— Some annotations are available to be examined at runtime.</p></li>
</ul>
</blockquote>
<p>接下来举几个常见的例子说明：</p>
<ol type="1">
<li><p>为编译器提供信息用于检测错误或者抑制警告</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addItems</span><span class="params">(<span class="meta">@NonNull</span> String item)</span> </span>&#123;</span><br><span class="line">  List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">  list.add(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编译时和部署时通过对注解进行处理生成代码、XML 文件等</p>
<p>比较常见的如<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0pha2VXaGFydG9uL2J1dHRlcmtuaWZl">butterknife<i class="fa fa-external-link-alt"></i></span>，butterknife 能够通过注解自动生成 findViewById 的代码，<strong>有助于减轻样板代码的负担</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@BindView(R.id.toolbar)</span></span><br><span class="line"><span class="keyword">public</span> Toolbar mToolbar;</span><br></pre></td></tr></table></figure></li>
<li><p>运行时通过注解进行检查处理</p>
<p>在运行时我们可以通过反射机制对注解提供的信息进行处理，然后实现需要的功能。</p></li>
</ol>
<p>在明确了注解的主要作用之后，注解的使用场景就已经呼之欲出了，<strong>当我们需要为程序中的元素提供信息，并且这些信息需要得到处理的时候，就可以考虑使用注解。</strong></p>
<h2 id="注解的分类">注解的分类</h2>
<h3 id="基本注解">基本注解</h3>
<p>Java 提供了 5 个基本的 Annotation</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">注解名</th>
<th style="text-align: left;">作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><span class="citation" data-cites="Override">@Override</span></td>
<td style="text-align: left;">限定重写父类方法</td>
</tr>
<tr class="even">
<td style="text-align: left;"><span class="citation" data-cites="Deprecated">@Deprecated</span></td>
<td style="text-align: left;">表示某个程序元素已经过时</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><span class="citation" data-cites="SuppressWarnings">@SuppressWarnings</span></td>
<td style="text-align: left;">抑制编译器的警告</td>
</tr>
<tr class="even">
<td style="text-align: left;"><span class="citation" data-cites="SafeVarargs">@SafeVarargs</span></td>
<td style="text-align: left;">抑制堆污染警告</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><span class="citation" data-cites="FunctionalInterface">@FunctionalInterface</span></td>
<td style="text-align: left;">指定某个接口必须是函数式接口</td>
</tr>
</tbody>
</table>
<p>接下来聊聊它们的使用</p>
<ol type="1">
<li><p>Override</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FatherClass</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">overridedMethod</span><span class="params">()</span> </span>&#123; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseAnnotationUse</span> <span class="keyword">extends</span> <span class="title">FatherClass</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">overridedMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.overridedMethod();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
Override的主要作用是：
<ol type="1">
<li><p>帮助检查是否正确的复写了父类中的已有方法（如果不小心拼写错误或者方法签名对不上被覆盖的方法，编辑器都会发出警告信息）</p></li>
<li><p>表示当前方法定义将覆盖超类的方法。</p>
<p>如果没有正确的复写父类中的方法则会提示 <strong>Method does not override method from its superclass</strong>。</p>
<p><img src="/posts/7f462002/Override-error.jpg"></p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fnhpc8zywyj30el00qglf.jpg"></p></li>
</ol></li>
<li><p>Deprecated 在 FatherClass 增加如下方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deprecatedMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在 BaseAnnotationUse 中增加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useDeprecatedMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> deprecatedMethod();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个时候将会看到 deprecatedMethod() 显示红色，并且编辑器提示<strong>deprecatedMethod() 已经过时了</strong></p></li>
</ol>
<p><img src="/posts/7f462002/deprecated-error.jpg"></p>
<ol start="3" type="1">
<li><p>SuppressWarning 对 BaseAnnotationUse 中的 useDeprecatedMethod 方法进行如下修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;deprecation&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useDeprecatedMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> deprecatedMethod();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过增加 SuppressWarning 抑制了 Deprecated 的警告，deprecatedMethod() 的红色将会消失</p></li>
</ol>
<p><img src="/posts/7f462002/suppressWarning.jpg"></p>
<ol start="4" type="1">
<li><p>SafeVarargs</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SafeVarargs</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">faultyMethod</span><span class="params">(List&lt;String&gt;... listStrArray)</span> </span>&#123;</span><br><span class="line">  List[] listArray = listStrArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当把一个不带泛型的对象赋给一个带泛型的变量的时候，往往将会导致”堆污染“，所以在 Java 7 中增加了 SafeVarargs 用于抑制堆污染的警告，SafeVarargs 只能用在参数长度可变的方法或构造方法上，且方法必须声明为static或final，否则会出现编译错误。</p>
<p><img src="/posts/7f462002/SafeVarargs.jpg"></p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fnhpc97402j30ns00wglh.jpg"></p></li>
<li><p>FunctionalInterface</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseInterface</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>FunctionalInterface 是 Java 8 专门为 Lambda 表达式新增的，通过 FunctionalInterface 可以限制接口中只能存在一个抽象方法，如果在 BaseInterface 接口中新增抽象方法，编译时将会提示 BaseInterface 不是函数式接口。</p>
<p><img src="/posts/7f462002/FunctionalInterface.jpg"></p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fnhpc8exc7j30od01vgll.jpg"></p></li>
</ol>
<h3 id="元注解">元注解</h3>
<p>JDK 在 java.lang.annotation 中内置了 6 种元注解，除了 Native 之外都用于修饰其它的 Annotation 定义</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">注解名</th>
<th style="text-align: left;">作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><span class="citation" data-cites="Retention">@Retention</span></td>
<td style="text-align: left;">指定被修饰的注解的保留时间</td>
</tr>
<tr class="even">
<td style="text-align: left;"><span class="citation" data-cites="Target">@Target</span></td>
<td style="text-align: left;">指定被修饰的注解可以修饰的程序元素</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><span class="citation" data-cites="Documented">@Documented</span></td>
<td style="text-align: left;">指定被修饰的注解可以被 javadoc 提取成文档</td>
</tr>
<tr class="even">
<td style="text-align: left;"><span class="citation" data-cites="Inherited">@Inherited</span></td>
<td style="text-align: left;">指定被修饰的注解具有继承性，如果某个类使用了被 <span class="citation" data-cites="Inherited">@Inherited</span> 修饰的注解，那么其子类将自动被该注解修饰</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><span class="citation" data-cites="Repeatable">@Repeatable</span></td>
<td style="text-align: left;">用于定义重复注解</td>
</tr>
<tr class="even">
<td style="text-align: left;"><span class="citation" data-cites="Native">@Native</span></td>
<td style="text-align: left;">表示定义常量值的字段可以从本地代码引用。</td>
</tr>
</tbody>
</table>
<p>接下来主要介绍前五种，<span class="citation" data-cites="Native">@Native</span> 实在是不常用</p>
<ol type="1">
<li><p>Retention</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Retention &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Returns the retention policy.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> the retention policy</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function">RetentionPolicy <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Retention的定义如上，其拥有一个 RetentionPolicy 类型的成员变量，RetentionPolicy 是枚举类，主要有三个枚举值：</p>
<ul>
<li>RetentionPolicy.SOURCE 注解只能保留在源文件当中，编译器不会编译这种注解</li>
<li>RetentionPolicy.CLASS 注解能够保留在 class 文件当中，但是当程序运行的时候，JVM 不能够获取到注解信息</li>
<li>RetentionPolicy.RUNTIME 注解能够保留在 class 文件当中，程序运行的时候，JVM 也能够获取到注解信息，程序能够通过反射去获取到 Annotation 信息</li>
</ul></li>
<li><p>Target</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Target &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Returns an array of the kinds of elements an annotation type</span></span><br><span class="line"><span class="comment">  * can be applied to.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> an array of the kinds of elements an annotation type</span></span><br><span class="line"><span class="comment">  * can be applied to</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  ElementType[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ElementType 也是一个枚举类，其枚举值和意义是：</p>
<ul>
<li>ElementType.TYPE 表明注解可以修饰类、接口或者枚举定义</li>
<li>ElementType.FIELD 表明注解可以修饰成员变量</li>
<li>ElementType.METHOD 表明注解可以修饰方法定义</li>
<li>ElementType.PARAMETER 表明注解可以修饰参数</li>
<li>ElementType.CONSTRUCTOR 表明注解可以修饰构造函数</li>
<li>ElementType.LOCAL_VARIABLE 表明注解可以修饰局部变量</li>
<li>ElementType.ANNOTATION_TYPE 表明注解可以修饰注解</li>
<li>ElementType.PACKAGE 表明注解可以修饰包定义</li>
<li>ElementType.TYPE_PARAMETER 表明注解只能定义程序元素的修饰</li>
<li>ElementType.TYPE_USE 表明注解不仅可以在定义程序元素的时候使用，还可以在<strong>创建对象、类型转换、使用 implements 实现接口、使用 throws 声明抛出异常</strong>的时候使用</li>
</ul></li>
<li><p>Documented 对于使用被 <span class="citation" data-cites="Documented">@Documented</span> 修饰的注解和不带 <span class="citation" data-cites="Documented">@Documented</span> 修饰的注解，其区别如下：</p></li>
</ol>
<figure>
<img src="/posts/7f462002/Documented.jpg" alt="annotation_1"><figcaption>annotation_1</figcaption>
</figure>
<figure>
<img src="/posts/7f462002/noDocumented.jpg" alt="annotation_2"><figcaption>annotation_2</figcaption>
</figure>
<ol start="4" type="1">
<li><p>Inherited</p>
<p>Inherited 的继承作用可以通过以下例子来体现，首先创建一个 Interitable 注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.CLASS)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Inheritable &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后创建一个由 Inheritable 修饰的 Base 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Inheritable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后创建一个继承自 Base 类的 InheritableTest 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InheritableTest</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//判断是否被 Inheritable 注解</span></span><br><span class="line">    System.out.println(InheritableTest.class.isAnnotationPresent(Inheritable.class));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行之后可以发现结果为 true</p></li>
<li><p>Repeatable</p>
<p>Repeatable 是 Java8 新增的注解，用于定义重复注解，在 Java8 之前的重复注解只能写成以下形式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Infos(&#123;@Info(name = &quot;zhangsan&quot;), @Info(name = &quot;lisi&quot;)&#125;)</span><br><span class="line">private Person mPerson;</span><br><span class="line">public class Person &#123;</span><br><span class="line"></span><br><span class="line">    private String mName;</span><br><span class="line">    private int mAge;</span><br><span class="line">    private int mHeight;</span><br><span class="line">    private int mWeight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中 Info 和 Infos 分别是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.CLASS)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Info &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.CLASS)</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Infos &#123;</span><br><span class="line">  </span><br><span class="line">  Info[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于 Infos 中保留了 Info 的信息，所以 Infos 的保留时间不能比 Info 少，否则编译器将会报错。如果 Info 的保留时间是 RUNTIME，而 Infos 的保留时间是 SOURCE，那么 JVM 最终会丢弃 Infos 以及 Infos 中的 Info 信息，这与 Info 期望的保留时间相矛盾。</p></li>
</ol>
<h3 id="自定义注解">自定义注解</h3>
<p>JDK 内置的注解并不能完全满足我们的需求，大多数情况下我们还需要学会自定义注解，定义一个注解需要用到 <span class="citation" data-cites="Interface">@Interface</span> 关键字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> BindView &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> View 的 Id</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> BindOnClickListener &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 实现 OnClickListener 接口的类</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  Class&lt;? extends OnClickListener&gt; value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面定义了两个注解用于绑定 View 的 id 以及 点击事件，并且指定了注解可以修饰的元素以及保留时间，可以看到定义一个注解与定义一个接口非常类似，而实际上每个注解都是继承自 Annotation 接口的接口，反编译 BindView 生成的 class 文件可以看到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Compiled from <span class="string">&quot;BindView.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">com</span>.<span class="title">rookieyang</span>.<span class="title">runtimeannotation</span>.<span class="title">customizeannotation</span>.<span class="title">BindView</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">annotation</span>.<span class="title">Annotation</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里自定义的注解都是含有成员变量的，而注解除了按照基本注解、元注解、自定义注解进行分类之外，我还可以根据是否包含成员变量将它分为两类：</p>
<ul>
<li><p>标记注解：这种注解没有成员变量，它仅仅通过是否存在来提供信息，如@Override、<span class="citation" data-cites="Deprecated">@Deprecated</span></p></li>
<li><p>元数据注解：这种注解包含成员变量，它通过成员变量提供更多的信息，如@Retention、<span class="citation" data-cites="Target">@Target</span></p></li>
</ul>
<h2 id="注解的处理">注解的处理</h2>
<p>在使用自定义的注解的时候，如果不提供注解的处理工具，注解是不会自动生效的，注解的处理方法主要有两种，一种是运行时处理注解，一种是编译时处理注解。</p>
<ol type="1">
<li><p>运行时处理注解</p>
<p>运行时处理注解主要利用 Java 的反射机制，接下来将结合具体实例说明如何通过反射处理注解。</p>
<p>首先利用自定义注解部分定义的两个注解 BindView 和 BindOnClickListener 对 View 进行注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@BindView(R.id.hello_world)</span></span><br><span class="line"><span class="meta">@BindOnClickListener(CustomizeOnClickListener.class)</span></span><br><span class="line"><span class="keyword">private</span> Button mHelloWorld;</span><br></pre></td></tr></table></figure>
<p>然后在 Activity 中定义一个 CustomizeOnClickListener 内部类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class CustomizeOnClickListener implements OnClickListener &#123;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public void onClick(View view) &#123;</span><br><span class="line">    Toast.makeText(MainActivity.this, R.string.hello_world,</span><br><span class="line">    Toast.LENGTH_SHORT).show();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着定义一个处理注解的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationProcess</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    Field[] fields = obj.getClass().getDeclaredFields();</span><br><span class="line">    Activity activity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> Activity)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;传入的参数不是Activity&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    activity = (Activity) obj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        View view = <span class="keyword">null</span>;</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span> );</span><br><span class="line">        BindView bindView = field.getAnnotation(BindView.class);</span><br><span class="line">        BindOnClickListener bindOnClickListener = field</span><br><span class="line">        .getAnnotation(BindOnClickListener.class);</span><br><span class="line">        <span class="comment">//判断是否是 View</span></span><br><span class="line">        <span class="keyword">boolean</span> isView = View.class.isAssignableFrom(field.getType());</span><br><span class="line">        <span class="keyword">if</span> (bindView != <span class="keyword">null</span> &amp;&amp; isView) &#123;</span><br><span class="line">          view = activity.findViewById(bindView.value());</span><br><span class="line">          <span class="comment">//设置 obj 对象当中的 field 值为 view</span></span><br><span class="line">          field.set(obj, view);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (bindOnClickListener != <span class="keyword">null</span> &amp;&amp; isView &amp;&amp; view != <span class="keyword">null</span>) &#123;</span><br><span class="line">          Class&lt;? extends OnClickListener&gt; listener = bindOnClickListener.value();</span><br><span class="line">          <span class="comment">//实例化 CustomizeOnClickListener 内部类</span></span><br><span class="line">          OnClickListener onClickListener = listener.getConstructor(</span><br><span class="line">          obj.getClass()).newInstance(activity);</span><br><span class="line">          view.setOnClickListener(onClickListener);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        Log.i(obj.getClass().getSimpleName(), e.getMessage());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后在 Activity 中调用即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AnnotationProcess.process(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>编译时处理注解</p>
<p>相对与运行时利用反射处理注解会有性能损失而言，编译时处理注解利用 APT（Annotation Processing Tool）对注解进行处理然后生成代码、XML 文件，利用 APT 去处理注解性能更好。参照 JDK 文档中对于 Processor 接口的描述，我们可以大致知道注解处理器的工作流程</p>
<blockquote>
<ol type="1">
<li>If an existing Processor object is not being used, to create an instance of a processor the tool calls the no-arg constructor of the processor class.</li>
<li>Next, the tool calls the init method with an appropriate ProcessingEnvironment.</li>
<li>Afterwards, the tool calls getSupportedAnnotationTypes, getSupportedOptions, and getSupportedSourceVersion. These methods are only called once per run, not on each round.</li>
<li>As appropriate, the tool calls the process method on the Processor object; a new Processor object is not created for each round.</li>
</ol>
</blockquote>
<p>编译工具将会通过注解处理器的无参构造函数实例化一个注解处理器对象，然后调用注解处理器的 init 方法并传入 ProcessingEnvironment，之后则调用 getSupportedAnnotationTypes，getSupportedOptions和getSupportedSourceVersion，最后将会调用 process 方法。 接下来将说明如何利用 APT 生成一个类文件用于显示 HelloWorld：</p>
<p>首先需要明确希望生成的类文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rookieyang.myannotationtwo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity_HelloWorld</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    Toast.makeText(context, <span class="string">&quot;HelloWorld&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>想要生成这个类文件需要获取到两点信息：<strong>包名和类名</strong>，通过包名可以使类文件生成在使用注解的包下，便于解析注解的时候加载类文件，通过类名加上 &quot;_HelloWorld&quot; 确保生成的类文件唯一存在，同时也达到了使用注解的类和生成的类绑定的效果。</p>
<p>接下来需要创建两个 Module，其中一个定义了所有的注解，另外一个定义了 APT，之所以需要定义两个 Module 的原因，其一为了让工程结构更清晰，另一方面定义 APT 需要用到 javax 包。整体的工程结构如下图所示：</p>
<p><img src="/posts/7f462002/project-structure.jpg"></p>
<p>之后需要为 annotations-compiler 和 app 模块引入相关依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">annotations-compiler 模块</span><br><span class="line">compile <span class="string">&#x27;com.google.auto.service:auto-service:1.0-rc3&#x27;</span></span><br><span class="line"><span class="function">compile <span class="title">project</span><span class="params">(path: <span class="string">&#x27;:annotations&#x27;</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">app 模块</span></span><br><span class="line"><span class="function">compile <span class="title">project</span><span class="params">(path: <span class="string">&#x27;:annotations&#x27;</span>)</span></span></span><br><span class="line"><span class="function">annotationProcessor <span class="title">project</span><span class="params">(<span class="string">&#x27;:annotations-compiler&#x27;</span>)</span></span></span><br></pre></td></tr></table></figure>
<p>其中 auto-service 的作用是帮助我们生成下列文件，主要作用是声明注解处理器。</p>
<p><img src="/posts/7f462002/META-INF.jpg"></p>
<p>annotationProcessor 则是为模块指定注解处理器</p>
<p>配置之后首先在 annotations 模块定义一个 HelloWorld 注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.CLASS)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> HelloWorld &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在 annotations-compiler 模块编写对应注解处理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//标识一个注解处理器</span></span><br><span class="line"><span class="meta">@AutoService(Processor.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationsCompiler</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Elements mElements;</span><br><span class="line">  <span class="keyword">private</span> Filer mFiler;</span><br><span class="line">  <span class="keyword">private</span> Messager mMessager;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  * 用于初始化 mElements、mFiler、mMessager</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment processingEnvi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.init(processingEnvi);</span><br><span class="line"></span><br><span class="line">    mElements = processingEnvi.getElementUtils();</span><br><span class="line">    mFiler = processingEnvi.getFiler();</span><br><span class="line">    mMessager = processingEnvi.getMessager();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> elements 实际上传入的都是 &#123;<span class="doctag">@link</span> #getSupportedAnnotationTypes()&#125;</span></span><br><span class="line"><span class="comment">  * 中支持的并且被扫描到（使用过）注解元素，例如这里获取到的类元素就是 HelloWorld 注解</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> roundEnvi 一个注解处理工具框架，通过它可以查询到使用了注解的元素</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 返回处理结果</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; elements,</span></span></span><br><span class="line"><span class="params"><span class="function">  RoundEnvironment roundEnvi)</span> </span>&#123;</span><br><span class="line">    String packageName;</span><br><span class="line">    String className;</span><br><span class="line">    <span class="comment">//获取使用了 HelloWorld 注解的元素</span></span><br><span class="line">    <span class="keyword">for</span> (Element element : roundEnvi.getElementsAnnotatedWith(HelloWorld.class)) &#123;</span><br><span class="line">      <span class="comment">//通过 Elements 去获取包名</span></span><br><span class="line">      packageName = mElements.getPackageOf(element).toString();</span><br><span class="line">      <span class="comment">//HelloWorld 注解只能被用在成员变量，所以通过获取外层元素就可以获取到使用注解的元素所在的类</span></span><br><span class="line">      className = element.getEnclosingElement().getSimpleName() + <span class="string">&quot;_HelloWorld&quot;</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//通过 Filer 指定的路径下创建一个 java 源文件，然后写入对应的代码</span></span><br><span class="line">        JavaFileObject javaFileObject = mFiler.createSourceFile(</span><br><span class="line">        packageName + <span class="string">&quot;.&quot;</span> + className);</span><br><span class="line">        Writer writer = javaFileObject.openWriter();</span><br><span class="line">        writer.write(<span class="string">&quot;package &quot;</span> + packageName + <span class="string">&quot;;\n\n&quot;</span>);</span><br><span class="line">        writer.write(<span class="string">&quot;import android.content.Context;\n&quot;</span>);</span><br><span class="line">        writer.write(<span class="string">&quot;import android.widget.Toast;\n\n&quot;</span>);</span><br><span class="line">        writer.write(<span class="string">&quot;public class &quot;</span> + className + <span class="string">&quot; &#123;\n\n&quot;</span>);</span><br><span class="line">        writer.write(<span class="string">&quot;\tpublic static void show(Context context) &#123;\n&quot;</span>);</span><br><span class="line">        writer.write(<span class="string">&quot;\t\tToast.makeText(context,&quot;</span></span><br><span class="line">        + <span class="string">&quot; \&quot;HelloWorld\&quot;, Toast.LENGTH_SHORT).show();\n&quot;</span>);</span><br><span class="line">        writer.write(<span class="string">&quot;\t&#125;\n&quot;</span>);</span><br><span class="line">        writer.write(<span class="string">&quot;\n&#125;&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 返回注解处理器支持的 Java 版本</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> SourceVersion <span class="title">getSupportedSourceVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> SourceVersion.latestSupported();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 返回注解处理器支持的注解集合</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getSupportedAnnotationTypes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Set&lt;String&gt; annotationTypes = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Class&lt;? extends Annotation&gt; annotation : getSupportedAnnotations()) &#123;</span><br><span class="line">      annotationTypes.add(annotation.getCanonicalName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> annotationTypes;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 返回支持的注解类型集合</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">private</span> Set&lt;Class&lt;? extends Annotation&gt;&gt; getSupportedAnnotations() &#123;</span><br><span class="line">    Set&lt;Class&lt;? extends Annotation&gt;&gt; annotationSet = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">    annotationSet.add(HelloWorld.class);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> annotationSet;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来说下几个有助于理解注解处理器的点：</p>
<ul>
<li><p>Elements 是一个获取程序元素信息的接口，例如获取元素的包名、判断是否是重写方法，例如</p>
<p><img src="/posts/7f462002/Elements.jpg"></p></li>
<li><p>Filer 则是一个支持通过注解处理器创建文件的接口，可以用于创建 Class文件、源文件、资源文件</p>
<p><img src="/posts/7f462002/Filer.jpg"></p></li>
<li><p>Messager 则是为注解处理器提供的输出错误信息的接口。</p>
<p><img src="/posts/7f462002/Messager.jpg"></p></li>
<li><p>Element 与 Elements 区别在于 Element 是获取单个程序元素信息的接口，而 Elements 可以获取整个程序的元素信息。除了 Element 之外，上述程序还可以看到 TypeElement，而 TypeElement 是一个继承了 Element 接口的接口，用于表示类元素。实际上 JDK 还提供了很多继承自 Element 的接口用于表示程序中的各项元素，具体的 Element 继承结构如下图所示：</p>
<p><img src="/posts/7f462002/Element.jpg"></p></li>
</ul>
<p>在编写完注解处理器之后，最后在 App 模块中编写对应的调用代码即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//获得生成的类的 Class 对象</span></span><br><span class="line">    Class&lt;?&gt; helloClass = Class.forName(getPackageName() + <span class="string">&quot;.&quot;</span></span><br><span class="line">    + getClass().getSimpleName() + <span class="string">&quot;_HelloWorld&quot;</span>);</span><br><span class="line">    <span class="comment">//利用反射取得 show 方法，然后执行对应的方法即可</span></span><br><span class="line">    Method showMethod = helloClass.getMethod(<span class="string">&quot;show&quot;</span>, Context.class);</span><br><span class="line">    showMethod.invoke(<span class="keyword">this</span>, <span class="keyword">this</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实际上编译时注解的整个处理过程是利用注解处理器对程序中使用了注解的元素进行遍历，从元素中提取所需的信息，然后生成类文件，最后在程序中加载生成的类并调用其中的方法。</p>
<p>最后给出本次测试的工程链接 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZpcnN0ZHJlYW0xMC9BbmRyb2lkLVN0dWR5LVByb2plY3QvdHJlZS9tYXN0ZXIvQW5ub3RhdGlvbg==">Annotation 测试<i class="fa fa-external-link-alt"></i></span></p></li>
</ol>
<h2 id="总结">总结</h2>
<p>最后让我们回答开始的几个问题</p>
<ol type="1">
<li><p>注解是一种用于描述程序元素信息的修饰符，可以用来修饰包、类、构造器、方法、成员变量、参数、局部变量。</p></li>
<li><p>当我们需要为程序中的元素提供信息，并且这些信息得到处理的时候，就可以考虑使用注解。</p></li>
<li><p>按照系统内置的注解，可以分为<strong>基本注解、元注解、自定义注解</strong>。按照是否有成员变量可以分为<strong>标记注解、元数据注解</strong>。按照处理方式，可以分为<strong>运行时注解、编译时注解</strong>。</p></li>
<li><p>注解的处理过程主要为运行时通过反射处理和编译时通过注解处理器进行处理。</p></li>
</ol>
<h2 id="thanks">Thanks</h2>
<ul>
<li>《Java 编程思想》</li>
<li>《疯狂 Java 讲义》</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlL3R1dG9yaWFsL2phdmEvYW5ub3RhdGlvbnMvaW5kZXguaHRtbA==">Annotation Tutorials<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG9jX3NnbC9hcnRpY2xlL2RldGFpbHMvNTAzNjcwODM=">自己动手实现Java注解（Java Annotation in Action）<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5qaWFuc2h1LmNvbS9wL2I2YjMyODM5NjhlMA==">注解处理器（Annotation Processor）原理简析<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5jbmJsb2dzLmNvbS93aG9pc2xjai9wLzYxNjg2NDEuaHRtbA==">Android注解使用之通过annotationProcessor注解生成代码实现自己的ButterKnife框架<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5jbmJsb2dzLmNvbS93aG9pc2xjai9wLzYxNDg0MTAuaHRtbA==">Android注解使用之注解编译android-apt如何切换到annotationProcessor<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title>Giraph 运行流程（一）</title>
    <url>/posts/f82c45a5.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>本文主要分析了 Giraph1.3 SNAPSHOT 的 Job 提交和初始化的过程。其中 Job 提交部分的分析根据运行在 Standalone 模式下的 Hadoop 部分进行，分析仅涉及本地运行时执行的代码， 而初始化部分则主要根据集群模式进行分析。</p>
<span id="more"></span>
<h2 id="示例-job">示例 Job</h2>
<p>该部分不属于源码，而是为了方便分析运行的一个示例 Job，Job 的具体配置和运行在 <a href="/posts/72593b40.html" title="Giraph 编程实践及源码调试">Giraph 编程实践及源码调试</a> 一文中已经说明。通常情况下， Job 提交过程如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GiraphConfiguration conf = <span class="keyword">new</span> GiraphConfiguration(<span class="keyword">new</span> Configuration());</span><br><span class="line"><span class="comment">//指定计算类</span></span><br><span class="line">conf.setComputationClass(Shortestpath.class);</span><br><span class="line"><span class="comment">//设置输入和输出格式</span></span><br><span class="line">conf.setVertexInputFormatClass(JsonLongDoubleFloatDoubleVertexInputFormat.class);</span><br><span class="line">conf.setVertexOutputFormatClass(IdWithValueTextOutputFormat.class);</span><br><span class="line"><span class="comment">//设置本地运行模式，方便调试查看源码</span></span><br><span class="line">conf.setLocalTestMode(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//设置 Worker 配置</span></span><br><span class="line">conf.setWorkerConfiguration(<span class="number">1</span>, <span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line"><span class="comment">//本地模式下运行不分 Master 和 Worker</span></span><br><span class="line">GiraphConstants.SPLIT_Master_Worker.set(conf, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">GiraphJob job = <span class="keyword">new</span> GiraphJob(conf, Shortestpath.class.getSimpleName());</span><br><span class="line"><span class="comment">//设置输入和输出路径</span></span><br><span class="line">GiraphTextInputFormat.setVertexInputPath(conf, <span class="keyword">new</span> Path(INPUT_PATH));</span><br><span class="line">GiraphTextOutputFormat.setOutputPath(job.getInternalJob(), <span class="keyword">new</span> Path(OUTPUT_PATH));</span><br><span class="line">••••••</span><br><span class="line"><span class="comment">//向 Giraph 提交 Job</span></span><br><span class="line">job.run(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>
<p>首先指定一系列参数，然后调用 job.run(true) 向 Giraph 提交 Job</p>
<h2 id="giraph-向-hadoop-提交-job">Giraph 向 Hadoop 提交 Job</h2>
<p>Giraph 是基于 Hadoop 开发的，因此在向 Giraph 提交 Job 之后，Giraph 内部还会向 Hadoop 提交 Job。本部分主要分析 Giraph 如何向 Hadoop 提交 Job。首先查看 run 方法：</p>
<p>org.apache.giraph.job.GiraphJob#run</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Runs the actual graph application through Hadoop Map-Reduce.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> verbose If true, provide verbose output, false otherwise</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> True if success, false otherwise</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ClassNotFoundException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">run</span><span class="params">(<span class="keyword">boolean</span> verbose)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> IOException, InterruptedException, ClassNotFoundException </span>&#123;</span><br><span class="line">  <span class="comment">//更改 Job 的 counter 数量限制</span></span><br><span class="line">  setIntConfIfDefault(<span class="string">&quot;mapreduce.job.counters.limit&quot;</span>, <span class="number">512</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//设置 Giraph 中 Worker 或者 Master 内存上限</span></span><br><span class="line">  setIntConfIfDefault(<span class="string">&quot;mapred.job.map.memory.mb&quot;</span>, <span class="number">1024</span>);</span><br><span class="line">  setIntConfIfDefault(<span class="string">&quot;mapred.job.reduce.memory.mb&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Speculative execution doesn&#x27;t make sense for Giraph</span></span><br><span class="line">  giraphConfiguration.setBoolean(</span><br><span class="line">      <span class="string">&quot;mapred.map.tasks.speculative.execution&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set the ping interval to 5 minutes instead of one minute</span></span><br><span class="line">  Client.setPingInterval(giraphConfiguration, <span class="number">60000</span> * <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置优先使用用户上传的 Jar 包的 class</span></span><br><span class="line">  giraphConfiguration.setBoolean(<span class="string">&quot;mapreduce.user.classpath.first&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">  giraphConfiguration.setBoolean(<span class="string">&quot;mapreduce.job.user.classpath.first&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//不做 Checkpoint 的时候最大尝试数为 1，为了让不能恢复的 Job 更快的结束</span></span><br><span class="line">  <span class="keyword">if</span> (giraphConfiguration.getCheckpointFrequency() == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> oldMaxTaskAttempts = giraphConfiguration.getMaxTaskAttempts();</span><br><span class="line">    giraphConfiguration.setMaxTaskAttempts(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    ••••••</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  ImmutableClassesGiraphConfiguration conf =</span><br><span class="line">      <span class="keyword">new</span> ImmutableClassesGiraphConfiguration(giraphConfiguration);</span><br><span class="line">  checkLocalJobRunnerConfiguration(conf);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> tryCount = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//默认是 org.apache.giraph.job.DefaultGiraphJobRetryChecker</span></span><br><span class="line">  GiraphJobRetryChecker retryChecker = conf.getJobRetryChecker();</span><br><span class="line">  <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    ••••••</span><br><span class="line"></span><br><span class="line">    tryCount++;</span><br><span class="line">    <span class="comment">//创建一个 Hadoop Job</span></span><br><span class="line">    Job submittedJob = <span class="keyword">new</span> Job(conf, jobName);</span><br><span class="line">    <span class="keyword">if</span> (submittedJob.getJar() == <span class="keyword">null</span>) &#123;</span><br><span class="line">      submittedJob.setJarByClass(getClass());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Giraph 不需要执行 Reduce 任务</span></span><br><span class="line">    submittedJob.setNumReduceTasks(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//设置 Mapper</span></span><br><span class="line">    submittedJob.setMapperClass(GraphMapper.class);</span><br><span class="line">    <span class="comment">//设置输入格式</span></span><br><span class="line">    submittedJob.setInputFormatClass(BspInputFormat.class);</span><br><span class="line">    <span class="comment">//设置输出格式，默认情况是 org.apache.giraph.bsp.BspOutputFormat</span></span><br><span class="line">    submittedJob.setOutputFormatClass(</span><br><span class="line">        GiraphConstants.HADOOP_OUTPUT_FORMAT_CLASS.get(conf));</span><br><span class="line">    ••••••</span><br><span class="line">    <span class="comment">//提交 Job </span></span><br><span class="line">    submittedJob.submit();</span><br><span class="line">    </span><br><span class="line">    ••••••</span><br><span class="line">    <span class="comment">//获取 Job 运行结果</span></span><br><span class="line">    <span class="keyword">boolean</span> passed = submittedJob.waitForCompletion(verbose);</span><br><span class="line">    </span><br><span class="line">    ••••••</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果运行失败则会尝试重启 Job</span></span><br><span class="line">    <span class="keyword">if</span> (!passed) &#123;</span><br><span class="line">      <span class="comment">//默认情况（指没有指定 JobRetryChecker 情况）返回 null，即永远不会重启 Job</span></span><br><span class="line">      String restartFrom = retryChecker.shouldRestartCheckpoint(submittedJob);</span><br><span class="line">      <span class="keyword">if</span> (restartFrom != <span class="keyword">null</span>) &#123;</span><br><span class="line">        GiraphConstants.RESTART_JOB_ID.set(conf, restartFrom);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果 Job 运行成功或者失败情况下不尝试重新运行（默认情况下永远不会尝试尝试重新运行）</span></span><br><span class="line">    <span class="keyword">if</span> (passed || !retryChecker.shouldRetry(submittedJob, tryCount)) &#123;</span><br><span class="line">      <span class="keyword">return</span> passed;</span><br><span class="line">    &#125;</span><br><span class="line">    •••••••</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>run 方法中首先会对 Hadoop 和 Giraph 进行配置，然后创建一个 Hadoop Job 对象。在设置好 Hadoop Job 的 MapperClass 和输入输出格式等相关信息后，即会调用 submit 向 Hadoop 提交 Job。从代码中可以看到整个过程与提交普通的 Hadoop Job 基本无异。</p>
<h2 id="hadoop-内部运行">Hadoop 内部运行</h2>
<p>在 Giraph 调用 submit 向 Hadoop 提交 Job 之后，程序的运行就会进入到 Hadoop 内部，对于该部分主要需要了解 Hadoop 如何启动 Giraph 的 MapTask。</p>
<h3 id="内部提交-job">内部提交 Job</h3>
<p>org.apache.hadoop.mapreduce.Job#submit</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException, ClassNotFoundException </span>&#123;</span><br><span class="line">  ensureState(JobState.DEFINE);</span><br><span class="line">  <span class="comment">//设置用新的 API</span></span><br><span class="line">  setUseNewAPI();</span><br><span class="line">  connect();</span><br><span class="line">  <span class="keyword">final</span> JobSubmitter submitter = </span><br><span class="line">      getJobSubmitter(cluster.getFileSystem(), cluster.getClient());</span><br><span class="line">  <span class="comment">//提交 Job 到系统</span></span><br><span class="line">  status = ugi.doAs(<span class="keyword">new</span> PrivilegedExceptionAction&lt;JobStatus&gt;() &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> JobStatus <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException, </span></span><br><span class="line"><span class="function">      ClassNotFoundException </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> submitter.submitJobInternal(Job.<span class="keyword">this</span>, cluster);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  state = JobState.RUNNING;</span><br><span class="line">  ••••••</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>submit 方法内部会创建 JobSubmitter 对象，然后通过 submitJobInternal 方法进一步提交 Job。</p>
<p>org.apache.hadoop.mapreduce.JobSubmitter#submitJobInternal</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">JobStatus <span class="title">submitJobInternal</span><span class="params">(Job job, Cluster cluster)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ClassNotFoundException, InterruptedException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    ••••••</span><br><span class="line"></span><br><span class="line">    Configuration conf = job.getConfiguration();</span><br><span class="line">    addMRFrameworkToDistributedCache(conf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得暂存目录， 默认情况下路径生成在 /tmp/hadoop/mapred/staging 下</span></span><br><span class="line">    Path jobStagingArea = JobSubmissionFiles.getStagingDir(cluster, conf);</span><br><span class="line">    ••••••</span><br><span class="line">    <span class="comment">//生成 Job ID</span></span><br><span class="line">    JobID jobId = submitClient.getNewJobID();</span><br><span class="line">    <span class="comment">//设置 Job ID</span></span><br><span class="line">    job.setJobID(jobId);</span><br><span class="line">    <span class="comment">//获得提交 Job 的目录</span></span><br><span class="line">    Path submitJobDir = <span class="keyword">new</span> Path(jobStagingArea, jobId.toString());</span><br><span class="line">    JobStatus status = <span class="keyword">null</span>;</span><br><span class="line">    ••••••</span><br><span class="line">    </span><br><span class="line">    ••••••</span><br><span class="line">    <span class="comment">//实际提交 Job</span></span><br><span class="line">    status = submitClient.submitJob(</span><br><span class="line">        jobId, submitJobDir.toString(), job.getCredentials());</span><br><span class="line">    ••••••</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 submitJobInternal 中，Hadoop 会通过 submitClient 实际提交 Job。submitClient 是一个 ClientProtocol 接口，其有两个实现，由于提交 Job 的时候 Hadoop 运行在 Standalone 模式下，所以这里 submitClient 的实现是 LocalJobRunner。</p>
<p><img src="/posts/f82c45a5/ClientProtocol.png"></p>
<h3 id="启动-maptask">启动 MapTask</h3>
<p>org.apache.hadoop.mapred.LocalJobRunner#submitJob</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> org.apache.hadoop.mapreduce.<span class="function">JobStatus <span class="title">submitJob</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    org.apache.hadoop.mapreduce.JobID jobid, String jobSubmitDir,</span></span></span><br><span class="line"><span class="params"><span class="function">    Credentials credentials)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  Job job = <span class="keyword">new</span> Job(JobID.downgrade(jobid), jobSubmitDir);</span><br><span class="line">  job.job.setCredentials(credentials);</span><br><span class="line">  <span class="keyword">return</span> job.status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>org.apache.hadoop.mapred.LocalJobRunner.Job#Job</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Job</span><span class="params">(JobID jobid, String jobSubmitDir)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ••••••</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>submitJob 内部会创建一个 Job 对象，这里的 Job 是继承了 <code>Thread</code> 的 LocalJobRunner 的内部类。通过构造方法可以知道，submitJob 在创建 Job 的同时也开启了线程，所以需要查看 Job#run 方法。</p>
<p>org.apache.hadoop.mapred.LocalJobRunner.Job#run</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    JobID jobId = profile.getJobID();</span><br><span class="line">    JobContext jContext = <span class="keyword">new</span> JobContextImpl(job, jobId);</span><br><span class="line">    </span><br><span class="line">    ••••••</span><br><span class="line"></span><br><span class="line">    Map&lt;TaskAttemptID, MapOutputFile&gt; mapOutputFiles =</span><br><span class="line">        Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;TaskAttemptID, MapOutputFile&gt;());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取需要执行的任务</span></span><br><span class="line">    List&lt;RunnableWithThrowable&gt; mapRunnables = getMapTaskRunnables(</span><br><span class="line">        taskSplitMetaInfos, jobId, mapOutputFiles);</span><br><span class="line">            </span><br><span class="line">    initCounters(mapRunnables.size(), numReduceTasks);</span><br><span class="line">    ExecutorService mapService = createMapExecutor();</span><br><span class="line">    <span class="comment">//运行任务</span></span><br><span class="line">    runTasks(mapRunnables, mapService, <span class="string">&quot;map&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ••••••</span><br><span class="line">    <span class="comment">// delete the temporary directory in output directory</span></span><br><span class="line">    outputCommitter.commitJob(jContext);</span><br><span class="line">    status.setCleanupProgress(<span class="number">1.0f</span>);</span><br><span class="line"></span><br><span class="line">    ••••••</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>org.apache.hadoop.mapred.LocalJobRunner.Job#getMapTaskRunnables</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;RunnableWithThrowable&gt; <span class="title">getMapTaskRunnables</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        TaskSplitMetaInfo [] taskInfo, JobID jobId,</span></span></span><br><span class="line"><span class="params"><span class="function">        Map&lt;TaskAttemptID, MapOutputFile&gt; mapOutputFiles)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numTasks = <span class="number">0</span>;</span><br><span class="line">    ArrayList&lt;RunnableWithThrowable&gt; list =</span><br><span class="line">        <span class="keyword">new</span> ArrayList&lt;RunnableWithThrowable&gt;();</span><br><span class="line">  	<span class="comment">//生成对应数量的 MapTaskRunnable</span></span><br><span class="line">    <span class="keyword">for</span> (TaskSplitMetaInfo task : taskInfo) &#123;</span><br><span class="line">    list.add(<span class="keyword">new</span> MapTaskRunnable(task, numTasks++, jobId,</span><br><span class="line">        mapOutputFiles));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>org.apache.hadoop.mapred.LocalJobRunner.Job#runTasks</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">runTasks</span><span class="params">(List&lt;RunnableWithThrowable&gt; runnables,</span></span></span><br><span class="line"><span class="params"><span class="function">        ExecutorService service, String taskType)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//提交任务</span></span><br><span class="line">    <span class="keyword">for</span> (Runnable r : runnables) &#123;</span><br><span class="line">    service.submit(r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    service.shutdown(); <span class="comment">// Instructs queue to drain.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Wait for tasks to finish; do not use a time-based timeout.</span></span><br><span class="line">    <span class="comment">// (See http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6179024)</span></span><br><span class="line">    LOG.info(<span class="string">&quot;Waiting for &quot;</span> + taskType + <span class="string">&quot; tasks&quot;</span>);</span><br><span class="line">    service.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">    <span class="comment">// Cancel all threads.</span></span><br><span class="line">    service.shutdownNow();</span><br><span class="line">    <span class="keyword">throw</span> ie;</span><br><span class="line">    &#125;</span><br><span class="line">    ••••••</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于 Job#run 方法应该主要关注 MapTaskRunnable 的生成和执行，可以看到 Hadoop 会通过 getMapTaskRunnables 方法根据分配的 Task 的数量生成对应数量的 MapTaskRunnable，然后会调用 runTasks 方法向线程池提交任务。</p>
<p>MapTaskRunnable 任务提交到线程池后继续关注 MapTaskRunnable#run 方法</p>
<p>org.apache.hadoop.mapred.LocalJobRunner.Job.MapTaskRunnable#run</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      ••••••</span><br><span class="line">      MapTask map = <span class="keyword">new</span> MapTask(systemJobFile.toString(), mapId, taskId,</span><br><span class="line">        info.getSplitIndex(), <span class="number">1</span>);</span><br><span class="line">      ••••••</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        ••••••</span><br><span class="line">        map.run(localConf, Job.<span class="keyword">this</span>);</span><br><span class="line">        ••••••</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">      <span class="keyword">this</span>.storedException = e;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从 MapTaskRunnable#run 中可以看到其创建了一个 MapTask 对象，并调用了 MapTask#run 方法。</p>
<p>org.apache.hadoop.mapred.MapTask#run</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">final</span> JobConf job, <span class="keyword">final</span> TaskUmbilicalProtocol umbilical)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">    ••••••</span><br><span class="line">    <span class="comment">//org.apache.hadoop.mapreduce.Job#submit 设置了 useNewApi，所以返回 true</span></span><br><span class="line">    <span class="keyword">boolean</span> useNewApi = job.getUseNewMapper();</span><br><span class="line"></span><br><span class="line">    ••••••</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (useNewApi) &#123;</span><br><span class="line">        runNewMapper(job, splitMetaInfo, umbilical, reporter);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        runOldMapper(job, splitMetaInfo, umbilical, reporter);</span><br><span class="line">    &#125;</span><br><span class="line">    done(umbilical, reporter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>MapTask#run 中会调用 runNewMapper 方法，所以继续查看该方法</p>
<p>org.apache.hadoop.mapred.MapTask#runNewMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;INKEY,INVALUE,OUTKEY,OUTVALUE&gt; <span class="function"><span class="keyword">void</span> <span class="title">runNewMapper</span><span class="params">(<span class="keyword">final</span> JobConf job,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="keyword">final</span> TaskSplitIndex splitIndex,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="keyword">final</span> TaskUmbilicalProtocol umbilical,</span></span></span><br><span class="line"><span class="params"><span class="function">                    TaskReporter reporter</span></span></span><br><span class="line"><span class="params"><span class="function">                    )</span> <span class="keyword">throws</span> IOException, ClassNotFoundException,</span></span><br><span class="line"><span class="function">                             InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// make a task context so we can get the classes</span></span><br><span class="line">    org.apache.hadoop.mapreduce.TaskAttemptContext taskContext =</span><br><span class="line">        <span class="keyword">new</span> org.apache.hadoop.mapreduce.task.TaskAttemptContextImpl(job, </span><br><span class="line">                                                                    getTaskID(),</span><br><span class="line">                                                                    reporter);</span><br><span class="line">    <span class="comment">// 反射获取设置的 MapperClass 实例对象</span></span><br><span class="line">    org.apache.hadoop.mapreduce.Mapper&lt;INKEY,INVALUE,OUTKEY,OUTVALUE&gt; mapper =</span><br><span class="line">        (org.apache.hadoop.mapreduce.Mapper&lt;INKEY,INVALUE,OUTKEY,OUTVALUE&gt;)</span><br><span class="line">        ReflectionUtils.newInstance(taskContext.getMapperClass(), job);</span><br><span class="line"></span><br><span class="line">    ••••••</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建 Context</span></span><br><span class="line">    org.apache.hadoop.mapreduce.MapContext&lt;INKEY, INVALUE, OUTKEY, OUTVALUE&gt; </span><br><span class="line">    mapContext = </span><br><span class="line">        <span class="keyword">new</span> MapContextImpl&lt;INKEY, INVALUE, OUTKEY, OUTVALUE&gt;(job, getTaskID(), </span><br><span class="line">            input, output, </span><br><span class="line">            committer, </span><br><span class="line">            reporter, split);</span><br><span class="line"></span><br><span class="line">    org.apache.hadoop.mapreduce.Mapper&lt;INKEY,INVALUE,OUTKEY,OUTVALUE&gt;.Context </span><br><span class="line">        mapperContext = </span><br><span class="line">            <span class="keyword">new</span> WrappedMapper&lt;INKEY, INVALUE, OUTKEY, OUTVALUE&gt;().getMapContext(</span><br><span class="line">                mapContext);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ••••••</span><br><span class="line">        mapper.run(mapperContext);</span><br><span class="line">        ••••••</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        ••••••</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>MapTask#runNewMapper 方法中会通过反射创建设置的 MapperClass 的对象，即 org.apache.giraph.job.GiraphJob#run 中设定的 GraphMapper 类的对象。在获取到 GraphMapper 对象后，系统会调用其 run 方法，从而使得程序的执行进入到 Giraph 部分。</p>
<h2 id="giraph-执行-job">Giraph 执行 Job</h2>
<p>org.apache.giraph.graph.GraphMapper#run</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// Notify the master quicker if there is Worker failure rather than</span></span><br><span class="line">    <span class="comment">// waiting for ZooKeeper to timeout and delete the ephemeral znodes</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        setup(context);</span><br><span class="line">        <span class="comment">//执行计算</span></span><br><span class="line">        <span class="keyword">while</span> (context.nextKeyValue()) &#123;</span><br><span class="line">        graphTaskManager.execute();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//清理</span></span><br><span class="line">        cleanup(context);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">        ••••••</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从 GraphMapper#run 方法可以看到一个 Giraph Job 的执行能够分为三个过程：</p>
<ul>
<li>初始化</li>
<li>执行计算</li>
<li>清理</li>
</ul>
<p>下面针对初始化过程进行分析</p>
<h3 id="初始化">初始化</h3>
<p>org.apache.giraph.graph.GraphMapper#setup</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">(Context context)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">  <span class="comment">// Execute all Giraph-related role(s) assigned to this compute node.</span></span><br><span class="line">  <span class="comment">// Roles can include &quot;Master,&quot; &quot;Worker,&quot; &quot;zookeeper,&quot; or . . . ?</span></span><br><span class="line">  graphTaskManager = <span class="keyword">new</span> GraphTaskManager&lt;I, V, E&gt;(context);</span><br><span class="line">  graphTaskManager.setup(</span><br><span class="line">    DistributedCache.getLocalCacheArchives(context.getConfiguration()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>GraphMapper#setup 方法中会创建 GraphTaskManager 对象，并调用其 setup 方法</p>
<p>org.apache.giraph.graph.GraphTaskManager#setup</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">(Path[] zkPathList)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    Configuration hadoopConf = context.getConfiguration();</span><br><span class="line">    <span class="comment">//初始化一些配置</span></span><br><span class="line">    conf = <span class="keyword">new</span> ImmutableClassesGiraphConfiguration&lt;I, V, E&gt;(hadoopConf);</span><br><span class="line">    ••••••</span><br><span class="line">    <span class="comment">//从配置中读取 Zookeeper 的连接信息，没有提供外部 Zookeeper 情况下为空</span></span><br><span class="line">    String serverPortList = conf.getZookeeperList();</span><br><span class="line">    <span class="comment">//如果没有提供外部 Zookeeper 则需要自己启动 Zookeeper</span></span><br><span class="line">    <span class="keyword">if</span> (serverPortList.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (startZooKeeperManager()) &#123;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// ZK connect/startup failed</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        createZooKeeperCounter(serverPortList);</span><br><span class="line">    &#125;</span><br><span class="line">    ••••••</span><br><span class="line">    <span class="keyword">this</span>.graphFunctions = determineGraphFunctions(conf, zkManager);</span><br><span class="line">    <span class="keyword">if</span> (zkManager != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.graphFunctions.isMaster()) &#123;</span><br><span class="line">        <span class="comment">//将由 Master 创建的文件夹标记为删除，文件系统关闭时将会删除文件</span></span><br><span class="line">        zkManager.cleanupOnExit();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//初始化 BSP 服务</span></span><br><span class="line">        instantiateBspService();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        ••••••</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>GraphTaskManager#setup 方法主要做三件事：</p>
<ul>
<li>获取 Zookeeper 连接信息</li>
<li>决定进程的角色</li>
<li>初始化 BSP 服务</li>
</ul>
<h4 id="获取-zookeeper-连接信息">获取 Zookeeper 连接信息</h4>
<p>GraphTaskManager#setup 中会通过 conf.getZookeeperList() 获得 Zookeeper 的连接信息。如果提供了外部 Zookeeper 则直接返回连接信息，但如果没有提供外部 Zookeeper 时，getZookeeperList() 会返回空值。此时 GraphTaskManager#setup 会调用 startZooKeeperManager 方法在某一个 Task 启动 Zookeeper。</p>
<p>org.apache.giraph.graph.GraphTaskManager#startZooKeeperManager</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Instantiate and configure ZooKeeperManager for this job. This will</span></span><br><span class="line"><span class="comment"> * result in a Giraph-owned Zookeeper instance, a connection to an</span></span><br><span class="line"><span class="comment"> * existing quorum as specified in the job configuration, or task failure</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true if this task should terminate</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">startZooKeeperManager</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    zkManager = <span class="keyword">new</span> ZooKeeperManager(context, conf);</span><br><span class="line">    context.setStatus(<span class="string">&quot;setup: Setting up Zookeeper manager.&quot;</span>);</span><br><span class="line">    zkManager.setup();</span><br><span class="line">    <span class="comment">//如果计算已经结束则不需要再启动 Zookeeper，</span></span><br><span class="line">    <span class="comment">//大部分情况应该会在没有提供外部 Zookeeper 且重启 Task 时候起作用</span></span><br><span class="line">    <span class="keyword">if</span> (zkManager.computationDone()) &#123;</span><br><span class="line">        done = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    zkManager.onlineZooKeeperServer();</span><br><span class="line">    <span class="comment">//更新 Zookeeper 连接信息，创建计数器</span></span><br><span class="line">    String serverPortList = zkManager.getZooKeeperServerPortString();</span><br><span class="line">    conf.setZookeeperList(serverPortList);</span><br><span class="line">    createZooKeeperCounter(serverPortList);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>startZooKeeperManager 中首先会创建 ZooKeeperManager 对象，然后调用其 setup 方法</p>
<p>org.apache.giraph.zk.ZooKeeperManager#setup</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    createCandidateStamp();</span><br><span class="line">    getZooKeeperServerList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ZooKeeperManager#setup 方法中会首先调用 createCandidateStamp 方法</p>
<p>org.apache.giraph.zk.ZooKeeperManager#createCandidateStamp</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a HDFS stamp for this task.  If another task already</span></span><br><span class="line"><span class="comment"> * created it, then this one will fail, which is fine.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createCandidateStamp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ••••••</span><br><span class="line">    fs.mkdirs(baseDirectory);</span><br><span class="line">    ••••••</span><br><span class="line">    fs.mkdirs(serverDirectory);</span><br><span class="line">    ••••••</span><br><span class="line">    <span class="keyword">if</span> (!fs.getFileStatus(baseDirectory).isDir()) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">        <span class="string">&quot;createCandidateStamp: &quot;</span> + baseDirectory +</span><br><span class="line">        <span class="string">&quot; is not a directory, but should be.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ••••••</span><br><span class="line">    <span class="comment">//根据 hostname 和 taskPartition 生成文件名</span></span><br><span class="line">    Path myCandidacyPath = <span class="keyword">new</span> Path(</span><br><span class="line">        taskDirectory, myHostname +</span><br><span class="line">        HOSTNAME_TASK_SEPARATOR + taskPartition);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ••••••</span><br><span class="line">        fs.createNewFile(myCandidacyPath);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        LOG.error(<span class="string">&quot;createCandidateStamp: Failed (maybe previous task &quot;</span> +</span><br><span class="line">            <span class="string">&quot;failed) to create filestamp &quot;</span> + myCandidacyPath, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 createCandidateStamp 方法中，每个 Task 会根据自己的 hostname 和 taskPartition 在 _bsp/_defaultZkManagerDir/_task 下创建对应文件，这些文件将会在系统选择某个 Task 启动 Zookeeper 服务时用到。具体结果如下图所示：</p>
<p><img src="/posts/f82c45a5/Giraph-CandidateStamp.png"></p>
<p>图中 hostname 是 localhost 的原因在于，运行源码的时候 Hadoop 处于 Standalone 模式。</p>
<p>在 createCandidateStamp 执行完成之后，ZooKeeperManager#setup 会接着调用 getZooKeeperServerList</p>
<p>org.apache.giraph.zk.ZooKeeperManager#getZooKeeperServerList</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getZooKeeperServerList</span><span class="params">()</span> <span class="keyword">throws</span> IOException,</span></span><br><span class="line"><span class="function">      InterruptedException </span>&#123;</span><br><span class="line">    String serverListFile;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//taskPartition 为 0 的 Task 会创建 zooKeeperServerList </span></span><br><span class="line">    <span class="keyword">if</span> (taskPartition == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">//0 号 Task 如果重启检查到已经有 serverList 则不会重新创建</span></span><br><span class="line">      serverListFile = getServerListFile();</span><br><span class="line">      <span class="keyword">if</span> (serverListFile == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//创建 serverList</span></span><br><span class="line">        createZooKeeperServerList();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      <span class="comment">//其余 Task 等待 serverList 的创建</span></span><br><span class="line">      serverListFile = getServerListFile();</span><br><span class="line">      ••••••</span><br><span class="line">      <span class="keyword">if</span> (serverListFile != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//减少 CPU 的占用</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(pollMsecs);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        LOG.warn(<span class="string">&quot;getZooKeeperServerList: Strange interrupted &quot;</span> +</span><br><span class="line">            <span class="string">&quot;exception &quot;</span> + e.getMessage());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析 serverList 中的信息</span></span><br><span class="line">    String[] serverHostList = serverListFile.substring(</span><br><span class="line">        ZOOKEEPER_SERVER_LIST_FILE_PREFIX.length()).split(</span><br><span class="line">            HOSTNAME_TASK_SEPARATOR);</span><br><span class="line">    ••••••</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得 Zookeeper 服务所在节点的 hostname</span></span><br><span class="line">    zkServerHost = serverHostList[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//获得应该启动 Zookeeper 服务的 Task 的 taskPartition</span></span><br><span class="line">    zkServerTask = Integer.parseInt(serverHostList[<span class="number">1</span>]);</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//各个 Task 更新自己的 zkServerPortString</span></span><br><span class="line">    updateZkPortString();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>getZooKeeperServerList 方法会根据 taskPartition 进行判断，如果是 0 号 Task 则会先调用 createZooKeeperServerList 创建 serverListFile（serverListFile 表明了 Zookeeper 服务所在的 hostname 和 taskPartition），而如果是非 0 号 Task 则会进行轮询来获取 serverListFile 的文件名。在获取到文件名后会对其进行解析来更新 zkServerHost、zkServerTask 以及 zkServerPortString。</p>
<p>接下来会对 createZooKeeperServerList 和 getZooKeeperServerList 进行分析以便更好的理解系统如何选取启动 Zookeeper 服务的 Task</p>
<ul>
<li><p>org.apache.giraph.zk.ZooKeeperManager#createZooKeeperServerList</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createZooKeeperServerList</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">  String host;</span><br><span class="line">  String task;</span><br><span class="line">  <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    <span class="comment">//返回 Task 下文件的元数据，会有一个文件名格式校验的过程，会去掉以 . 开头和 crc 结尾文件</span></span><br><span class="line">    FileStatus [] fileStatusArray = fs.listStatus(taskDirectory);</span><br><span class="line">    <span class="keyword">if</span> (fileStatusArray.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">//选取第一位的元数据标识的 Task 去启动 Zookeeper 服务</span></span><br><span class="line">      FileStatus fileStatus = fileStatusArray[<span class="number">0</span>];</span><br><span class="line">      <span class="comment">//解析信息</span></span><br><span class="line">      String[] hostnameTaskArray =</span><br><span class="line">          fileStatus.getPath().getName().split(</span><br><span class="line">              HOSTNAME_TASK_SEPARATOR);</span><br><span class="line">      ••••••</span><br><span class="line">      host = hostnameTaskArray[<span class="number">0</span>];</span><br><span class="line">      task = hostnameTaskArray[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Thread.sleep(pollMsecs);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//根据解析的信息生成 serverListFile 文件名</span></span><br><span class="line">  String serverListFile =</span><br><span class="line">      ZOOKEEPER_SERVER_LIST_FILE_PREFIX + host +</span><br><span class="line">      HOSTNAME_TASK_SEPARATOR + task;</span><br><span class="line">  Path serverListPath =</span><br><span class="line">      <span class="keyword">new</span> Path(baseDirectory, serverListFile);</span><br><span class="line">  ••••••</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//创建文件</span></span><br><span class="line">  fs.createNewFile(serverListPath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>createZooKeeperServerList 中会获取所有 Task 在 createCandidateStamp 方法中创建的文件的文件名，然后选取返回数组中第一个元素标识的 Task 信息去创建 serverListFile。</p></li>
<li><p>org.apache.giraph.zk.ZooKeeperManager#getServerListFile</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getServerListFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  String serverListFile = <span class="keyword">null</span>;</span><br><span class="line">  <span class="comment">//baseDirectory 是 _bsp/_defaultZkManagerDir，列出文件夹下的文件元数据</span></span><br><span class="line">  FileStatus [] fileStatusArray = fs.listStatus(baseDirectory);</span><br><span class="line">  <span class="keyword">for</span> (FileStatus fileStatus : fileStatusArray) &#123;</span><br><span class="line">    <span class="comment">//筛选文件名中含有 zkServerList_ 的文件，即 taskpartition 为 0 task 创建的 serverListFile</span></span><br><span class="line">    <span class="keyword">if</span> (fileStatus.getPath().getName().startsWith(</span><br><span class="line">        ZOOKEEPER_SERVER_LIST_FILE_PREFIX)) &#123;</span><br><span class="line">      serverListFile = fileStatus.getPath().getName();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> serverListFile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>getServerListFile 会获取 baseDirectory 下的文件元数据，然后筛选出对应的 serverListFile，最后返回其文件名。</p></li>
</ul>
<p>接着回到 startZooKeeperManager 方法中，在选定了启动 Zookeeper 服务的 Task 后，系统会首先判断计算是否完成，如果已经完成则表明无需再继续运行。否则会调用 onlineZooKeeperServer 方法启动 Zookeeper 服务。</p>
<p>org.apache.giraph.zk.ZooKeeperManager#onlineZooKeeperServer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onlineZooKeeperServer</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="comment">//如果当前 task 的 taskPartition 等于 zkServerTask，则需要启动 Zookeeper 服务 </span></span><br><span class="line">  <span class="keyword">if</span> (zkServerTask == taskPartition) &#123;</span><br><span class="line">    File zkDirFile = <span class="keyword">new</span> File(<span class="keyword">this</span>.zkDir);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//删除旧的文件夹</span></span><br><span class="line">      ••••••</span><br><span class="line">      FileUtils.deleteDirectory(zkDirFile);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      ••••••</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成 Zookeeper 配置</span></span><br><span class="line">    generateZooKeeperConfig();</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">      zkRunner = createRunner();</span><br><span class="line">      <span class="comment">//启动 Zookeeper 服务</span></span><br><span class="line">      <span class="keyword">int</span> port = zkRunner.start(zkDir, config);</span><br><span class="line">      <span class="keyword">if</span> (port &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        zkBasePort = port;</span><br><span class="line">        updateZkPortString();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Once the server is up and running, notify that this server is up</span></span><br><span class="line">    <span class="comment">// and running by dropping a ready stamp.</span></span><br><span class="line">    <span class="keyword">int</span> connectAttempts = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> maxConnectAttempts =</span><br><span class="line">        conf.getZookeeperConnectionAttempts();</span><br><span class="line">    <span class="keyword">while</span> (connectAttempts &lt; maxConnectAttempts) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        ••••••</span><br><span class="line">        <span class="comment">//连接 Zookeeper 服务</span></span><br><span class="line">        InetSocketAddress zkServerAddress =</span><br><span class="line">            <span class="keyword">new</span> InetSocketAddress(myHostname, zkBasePort);</span><br><span class="line">        Socket testServerSock = <span class="keyword">new</span> Socket();</span><br><span class="line">        testServerSock.connect(zkServerAddress, <span class="number">5000</span>);</span><br><span class="line">        ••••••</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (SocketTimeoutException e) &#123;</span><br><span class="line">        LOG.warn(<span class="string">&quot;onlineZooKeeperServers: Got &quot;</span> +</span><br><span class="line">            <span class="string">&quot;SocketTimeoutException&quot;</span>, e);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (ConnectException e) &#123;</span><br><span class="line">        LOG.warn(<span class="string">&quot;onlineZooKeeperServers: Got &quot;</span> +</span><br><span class="line">            <span class="string">&quot;ConnectException&quot;</span>, e);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        LOG.warn(<span class="string">&quot;onlineZooKeeperServers: Got &quot;</span> +</span><br><span class="line">            <span class="string">&quot;IOException&quot;</span>, e);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      ++connectAttempts;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(pollMsecs);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        LOG.warn(<span class="string">&quot;onlineZooKeeperServers: Sleep of &quot;</span> + pollMsecs +</span><br><span class="line">            <span class="string">&quot; interrupted - &quot;</span> + e.getMessage());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//超过最大的尝试数，连接失败</span></span><br><span class="line">    <span class="keyword">if</span> (connectAttempts == maxConnectAttempts) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">          <span class="string">&quot;onlineZooKeeperServers: Failed to connect in &quot;</span> +</span><br><span class="line">              connectAttempts + <span class="string">&quot; tries!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    Path myReadyPath = <span class="keyword">new</span> Path(</span><br><span class="line">        serverDirectory, myHostname +</span><br><span class="line">        HOSTNAME_TASK_SEPARATOR + taskPartition +</span><br><span class="line">        HOSTNAME_TASK_SEPARATOR + zkBasePort);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      ••••••</span><br><span class="line">      <span class="comment">//创建文件表明 Zookeeper 服务已经准备好，并且提供连接的信息</span></span><br><span class="line">      fs.createNewFile(myReadyPath);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      ••••••</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//其余 Task 等待 Zookeeper 服务的启动</span></span><br><span class="line">    <span class="keyword">int</span> readyRetrievalAttempt = <span class="number">0</span>;</span><br><span class="line">    String foundServer = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        FileStatus [] fileStatusArray =</span><br><span class="line">            fs.listStatus(serverDirectory);</span><br><span class="line">        <span class="comment">//检查 serverDirectory 文件夹下是否生成了 Zookeeper 连接信息文件</span></span><br><span class="line">        <span class="keyword">if</span> ((fileStatusArray != <span class="keyword">null</span>) &amp;&amp;</span><br><span class="line">            (fileStatusArray.length &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">          <span class="comment">//解析文件中的连接信息</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fileStatusArray.length; ++i) &#123;</span><br><span class="line">            String[] hostnameTaskArray =</span><br><span class="line">                fileStatusArray[i].getPath().getName().split(</span><br><span class="line">                    HOSTNAME_TASK_SEPARATOR);</span><br><span class="line">            <span class="keyword">if</span> (hostnameTaskArray.length != <span class="number">3</span>) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                  <span class="string">&quot;getZooKeeperServerList: Task 0 failed &quot;</span> +</span><br><span class="line">                      <span class="string">&quot;to parse &quot;</span> +</span><br><span class="line">                      fileStatusArray[i].getPath().getName());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//zookeeper 服务所在地址</span></span><br><span class="line">            foundServer = hostnameTaskArray[<span class="number">0</span>];</span><br><span class="line">            <span class="comment">//zookeeper 服务的连接端口</span></span><br><span class="line">            zkBasePort = Integer.parseInt(hostnameTaskArray[<span class="number">2</span>]);</span><br><span class="line">            <span class="comment">//更新 zookeeper 的连接信息</span></span><br><span class="line">            updateZkPortString();</span><br><span class="line">          &#125;</span><br><span class="line">          ••••••</span><br><span class="line">          <span class="comment">//查看 hostname 是否相同，相同则跳出等待，具体场景尚未想到</span></span><br><span class="line">          <span class="keyword">if</span> (zkServerHost.equals(foundServer)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          ••••••</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(pollMsecs);</span><br><span class="line">        ++readyRetrievalAttempt;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        ••••••</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到 onlineZooKeeperServer 实际做了两件事情：一是在选定的 Task 上启动 Zookeeper 服务，并创建文件表明服务已经准备好。二是所有未启动 Zookeeper 服务的 Task 去更新 Zookeeper 的连接信息。</p>
<h4 id="分配角色">分配角色</h4>
<p>在启动完成 Zookeeper 服务之后系统会更新 Zookeeper 相关的配置信息然后返回到 org.apache.giraph.graph.GraphTaskManager#setup 方法中，之后会调用 determineGraphFunctions</p>
<p>org.apache.giraph.graph.GraphTaskManager#determineGraphFunctions</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> GraphFunctions <span class="title">determineGraphFunctions</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  ImmutableClassesGiraphConfiguration conf,</span></span></span><br><span class="line"><span class="params"><span class="function">  ZooKeeperManager zkManager)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//判断是本地模式还是集群模式，本地模式只会启动一个 Task</span></span><br><span class="line">  <span class="keyword">boolean</span> splitMasterWorker = conf.getSplitMasterWorker();</span><br><span class="line">  <span class="comment">//获取当前 Task 的 taskPartition</span></span><br><span class="line">  <span class="keyword">int</span> taskPartition = conf.getTaskPartition();</span><br><span class="line">  <span class="comment">//判断是否提供了外部的 Zookeeper</span></span><br><span class="line">  <span class="keyword">boolean</span> zkAlreadyProvided = conf.isZookeeperExternal();</span><br><span class="line">  <span class="comment">//初始时刻 Task 的角色</span></span><br><span class="line">  GraphFunctions functions = GraphFunctions.UNKNOWN;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!splitMasterWorker) &#123;</span><br><span class="line">    <span class="comment">//本地模式下如果是内部启动 Zookeeper 则 Task 充当所有的角色，否则充当 Master 和 Worker</span></span><br><span class="line">    <span class="keyword">if</span> ((zkManager != <span class="keyword">null</span>) &amp;&amp; zkManager.runsZooKeeper()) &#123;</span><br><span class="line">      functions = GraphFunctions.ALL;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      functions = GraphFunctions.ALL_EXCEPT_ZOOKEEPER;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (zkAlreadyProvided) &#123;</span><br><span class="line">      <span class="comment">//如果有外部 Zookeeper 则 0 号 Task 就是 Master，其余的都是 Worker</span></span><br><span class="line">      <span class="keyword">if</span> (taskPartition == <span class="number">0</span>) &#123;</span><br><span class="line">        functions = GraphFunctions.Master_ONLY;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        functions = GraphFunctions.Worker_ONLY;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//如果是内部启动的 Zookeeper 服务，</span></span><br><span class="line">      <span class="comment">//则启动 Zookeeper 服务的 Task 充当 Master 和 zookeeper 角色，其余为 Worker</span></span><br><span class="line">      <span class="keyword">if</span> ((zkManager != <span class="keyword">null</span>) &amp;&amp; zkManager.runsZooKeeper()) &#123;</span><br><span class="line">        functions = GraphFunctions.Master_ZOOKEEPER_ONLY;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        functions = GraphFunctions.Worker_ONLY;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> functions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>determineGraphFunctions 主要是对 Task 的角色进行判断，系统提供了 6 种角色：</p>
<ul>
<li><p>UNKNOWN</p>
<p>表明 Task 的角色还未知</p></li>
<li><p>Master_ONLY</p>
<p>表明 Task 是 Master</p></li>
<li><p>Master_ZOOKEEPER_ONLY</p>
<p>表明 Task 既是 Master 也是 Zookeeper</p></li>
<li><p>Worker_ONLY</p>
<p>表明 Task 只是 Worker</p></li>
<li><p>ALL</p>
<p>表明 Task 既是 Master 也是 Worker 和 Zookeeper</p></li>
<li><p>ALL_EXCEPT_ZOOKEEPER</p>
<p>表明 Task 既是 Master 也是 Worker</p></li>
</ul>
<h4 id="初始化-bsp">初始化 BSP</h4>
<p>在决定各个 Task 的角色之后，系统会调用 instantiateBspService 初始化 BSP 服务。</p>
<p>org.apache.giraph.graph.GraphTaskManager#instantiateBspService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">instantiateBspService</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (graphFunctions.isMaster()) &#123;</span><br><span class="line">    ••••••</span><br><span class="line">    <span class="comment">//创建 Master 对象</span></span><br><span class="line">    serviceMaster = <span class="keyword">new</span> BspServiceMaster&lt;I, V, E&gt;(context, <span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//Master 运行在线程里面</span></span><br><span class="line">    MasterThread = <span class="keyword">new</span> MasterThread&lt;I, V, E&gt;(serviceMaster, context);</span><br><span class="line">    MasterThread.setUncaughtExceptionHandler(</span><br><span class="line">        createUncaughtExceptionHandler());</span><br><span class="line">    MasterThread.start();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (graphFunctions.isWorker()) &#123;</span><br><span class="line">    ••••••</span><br><span class="line">    <span class="comment">//创建 Worker 对象</span></span><br><span class="line">    serviceWorker = <span class="keyword">new</span> BspServiceWorker&lt;I, V, E&gt;(context, <span class="keyword">this</span>);</span><br><span class="line">    installGCMonitoring();</span><br><span class="line">    ••••••</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>instantiateBspService 中对于 Master 主要是创建 serviceMaster 对象，然后启动 MasterThread 线程，对于 Worker 则是创建 serviceWorker 对象。</p>
<h2 id="总结">总结</h2>
<p>总的来说，Giraph 的 Job 提交和初始化依据以下流程来执行：</p>
<ol type="1">
<li>用户向 Giraph 提交 Job</li>
<li>Giraph 向 Hadoop 提交 Job</li>
<li>Hadoop 启动 MapTask，并执行 GraphMapper 的 run 方法</li>
<li>GraphMapper 创建 GraphTaskManager 对象进行初始化</li>
<li>初始化过程首先获取 Zookeeper 连接信息，如果没有外置 Zookeeper 则需要从所有 MapTask 中进行选取 Task 来启动 Zookeeper 服务。</li>
<li>获取到 Zookeeper 连接信息之后会根据 determineGraphFunctions 分配角色，由此区分 MapTask 中的 Master 和 Worker</li>
<li>分配完角色之后则会通过 instantiateBspService 来初始化 BSP 服务，由此结束整个初始化过程。</li>
</ol>
]]></content>
      <categories>
        <category>Giraph</category>
      </categories>
      <tags>
        <tag>SourceCode Analysis</tag>
      </tags>
  </entry>
</search>
